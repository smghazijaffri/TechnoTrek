@page "/cart"

@inject CRUD crud;
@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

@if (AppState.CustomerAuthorized)
{
    <div class="video-container" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;">
        <video autoplay muted loop playsinline style="width: 100%; height: 100%; object-fit: cover;">
            <source src="_content/SharedClass/Images/scene-rainbow.webm" type="video/webm">
            Your browser does not support the video tag.
        </video>
    </div>
    <div class="content-container" style="position: relative; width: 100%; height: 100%; overflow-y: auto;">
        <section class="h-100 h-custom" style="border-radius: 10px; background-color:transparent;">
            <div class="container h-100">
                <div class="row d-flex justify-content-center align-items-center h-100">
                    <div class="col">
                        <div class="card" style="border-radius: 10px; background-color:transparent;">
                            <div class="card-body p-4">
                                <div class="row">
                                    <div class="col-lg-7" style="color:white;">

                                        <h5 class="mb-3">
                                            <a href="/products" style="color:white;">
                                                <i class="bi bi-arrow-left-circle me-2"></i>Continue shopping
                                            </a>
                                        </h5>
                                        <hr>

                                        <div class="d-flex justify-content-between align-items-center mb-4">
                                            <div>
                                                <p class="mb-1">Shopping cart</p>
                                                <p class="mb-0">You have @AppState.CartItemCount items in your cart</p>
                                            </div>
                                        </div>
                                        <div>
                                            @foreach (var item in items)
                                            {
                                                if (!string.IsNullOrEmpty(item.Name))
                                                {
                                                    <div class="card mb-3 shadow-lg" style="border-radius: 10px; backdrop-filter: blur(2px); background-color: transparent; color: white;">
                                                        <div class="card-body">
                                                            <div class="d-flex justify-content-between">
                                                                <div class="d-flex flex-row align-items-center">
                                                                    <div class="ms-3 me-1">
                                                                        <h6>@item.Brand</h6>
                                                                        <p class="small mb-0">@item.Name</p>
                                                                    </div>
                                                                </div>
                                                                <div class="d-flex flex-row align-items-center">
                                                                    <div style="width: 50px;">
                                                                        <label>QTY</label>
                                                                        <h6 class="fw-normal ms-1 mb-0">@item.Quantity</h6>
                                                                    </div>
                                                                    <div style="width: 100px;">
                                                                        <label>Rs.</label>
                                                                        <h6 class="mb-0">@item.Price</h6>
                                                                    </div>
                                                                    <a @onclick="() => DeleteItem(item.Code)" style="color: red; cursor:pointer;"><i class="bi bi-trash"></i></a>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="col-lg-5">
                                        @if (AppState.CartItemCount > 0)
                                        {
                                            <div class="card text-white rounded-3" style="background-color: transparent; backdrop-filter: blur(2px); border-radius: 10px;">
                                                <div class="card-body">

                                                    <hr class="my-4">

                                                    <div class="d-flex justify-content-between mb-4">
                                                        <h4 class="mb-2">Total</h4>
                                                        <h4 class="mb-2">Rs. @totalAmount</h4>
                                                    </div>

                                                    <button type="button" data-mdb-button-init data-mdb-ripple-init @onclick="Checkout" class="btn" style="background-color:gold">
                                                        <div class="d-flex justify-content-between">
                                                            <span>Checkout <i class="bi bi-arrow-right-circle ms-2"></i></span>
                                                        </div>
                                                    </button>

                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}

@code {
    private class BulkItem
    {
        public string? Name { get; set; }
        public string? Brand { get; set; }
        public string? Code { get; set; }
        public int Price { get; set; }
        public int Quantity { get; set; }
    }

    bool isMobile = false;

    string? userid { get; set; }
    string? DeviceType { get; set; }

    int totalAmount { get; set; } = 0;

    List<BulkItem> items = new List<BulkItem>();

    protected async override void OnInitialized()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        if (!string.IsNullOrEmpty(AppState.Username) && !string.IsNullOrEmpty(AppState.Role))
        {
            userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });
            if (AppState.Role != "Customer")
            {
                Snackbar.Add("Please login as a Customer", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            if (string.IsNullOrEmpty(userid))
            {
                Snackbar.Add("User does not exist", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
        else
        {
            Snackbar.Add("Please login as a Customer", Severity.Error);
            AppState.Authorized = false;
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        await LoadItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private async Task LoadItems()
    {
        try
        {
            items.Clear();

            var itemTasks = LoadItemDataAsync();

            var itemResults = await Task.WhenAll(itemTasks);

            foreach (var itemList in itemResults)
            {
                foreach (var result in itemList)
                {
                    if (!string.IsNullOrEmpty(result.Name) && result.Quantity >= 20 && result.Quantity <= 50)
                    {
                        items.Add(new BulkItem
                            {
                                Name = result.Name,
                                Brand = result.Brand,
                                Code = result.Code,
                                Price = result.Price * result.Quantity,
                                Quantity = result.Quantity
                            });
                    }
                }
            }

            AppState.CartItemCount = items.Select(item => item.Code).Distinct().Count();

            totalAmount = items.Sum(item => item.Price);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<List<(string Name, string Brand, string Code, int Price, int Quantity)>> LoadItemDataAsync()
    {
        var resultList = new List<(string Name, string Brand, string Code, int Price, int Quantity)>();

        try
        {
            var result = await Select.RetrieveCartItems(userid);

            foreach (var item in result)
            {
                var Code = item.Code;
                var Quantity = item.Quantity;
                string Details1, Details2;
                int Price;

                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    var itemDetails = await db.QuerySingleOrDefaultAsync<(string?, string)>("SELECT ItemName, Brand FROM Items WHERE ItemCode = @ItemCode ORDER BY ItemCode", new { ItemCode = Code });
                    int itemPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode", new { ItemCode = Code });
                    Details1 = itemDetails.Item1;
                    Details2 = itemDetails.Item2;
                    Price = itemPrice;
                }

                resultList.Add((Details1, Details2, Code, Price, Quantity));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return resultList;
    }

    private async Task DeleteItem(string? ItemCode)
    {
        try
        {
            if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
            items.RemoveAll(item => item.Code == ItemCode);
            var serializedItems = JsonSerializer.Serialize(items);
            var parameters = new DynamicParameters();
            parameters.Add("@UserID", userid);
            parameters.Add("@CartItemsJson", serializedItems);
            parameters.Add("@Action", "Save");

            var result = crud.CRD3(parameters, "ManageCartItems", CommandType.StoredProcedure, false, outputMessage: true, errorMessage: true);

            if (!string.IsNullOrEmpty(result.Output))
            {
                Snackbar.Add(result.Output, Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to remove from cart.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            if (isMobile) Vibration.Default.Vibrate();
            Snackbar.Add(ex.Message, Severity.Error);
        }

        await LoadItems();
    }

    private async Task Checkout()
    {
        try
        {
            if (isMobile)
            {
                HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
            }

            if (AppState.CartItemCount > 0)
            {
                await using SqlConnection db = new SqlConnection(con.connectionString);
                var customerID = await db.QueryFirstOrDefaultAsync<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });
                var customerName = db.QueryFirstOrDefault<string>("select Name from Customer where CustomerID = @CustomerID", new { CustomerID = customerID });
                string bulkordername = "BulkOrder for " + customerName + " on " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss tt");
                int totalAmount = items.Sum(item => item.Price);
                int totalQuantity = items.Sum(item => item.Quantity);
                DataTable ItemTable = Select.ItemTable();
                DataTable Delete = new DataTable();
                Delete.Columns.Add("RowID", typeof(int));
                foreach (var PO in items)
                {
                    ItemTable.Rows.Add(0, PO.Code, PO.Quantity, "UOM-001", 0, PO.Price, null);
                }
                BulkOrder bulkOrder = new BulkOrder
                    {
                        BulkOrderID = null,
                        BulkOrderName = bulkordername,
                        CustomerID = customerID,
                        Status = "Received",
                        TotalAmount = totalAmount,
                        TotalQuantity = totalQuantity
                    };
                var parameters = new DynamicParameters(bulkOrder);
                parameters.Add("@BOItems", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteBOItems", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass output = crud.CRD3(parameters, "CreateBulkOrder ", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    Snackbar.Add(output.ErrorMessage, Severity.Error);
                    return;
                }
                if (!string.IsNullOrEmpty(customerID))
                {
                    await db.ExecuteAsync("Delete from Cart where UserID = @UserID", new { UserID = customerID });

                    items.Clear();

                    AppState.CartItemCount = 0;
                    totalAmount = 0;

                    StateHasChanged();

                    Snackbar.Add("Checkout completed successfully.", Severity.Success);

                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    AppState.CartItemCount = 0;
                    AppState.Username = string.Empty;
                    AppState.CustomerAuthorized = false;
                    Snackbar.Add("User not found.", Severity.Error);
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                }
            }
            else
            {
                Snackbar.Add("Cart is empty.", Severity.Error);
                NavigationManager.NavigateTo("/products", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            if (isMobile)
            {
                Vibration.Default.Vibrate();
            }

            Snackbar.Add($"Error during checkout: {ex.Message}", Severity.Error);
        }
    }

    private string GetComponentValue(string componentName)
    {
        return componentName switch
        {
            "Motherboard" => AppState.Motherboard,
            "Processor" => AppState.Processor,
            "Memory" => AppState.Memory,
            "Storage" => AppState.Storage,
            "Graphics Card" => AppState.GPU,
            "Power Supply" => AppState.PSU,
            "Gaming Case" => AppState.Case,
            "Cooler" => AppState.Cooler,
            _ => string.Empty
        };
    }
}