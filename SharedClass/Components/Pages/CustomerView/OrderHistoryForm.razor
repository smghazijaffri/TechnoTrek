@page "/order-history/{BulkOrderID?}"

@inject CRUD crud;
@inject Select select;
@inject Connection con;
@inject BO_Items boItem;
@inject AppState AppState;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject BulkOrder bulkorder;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @if (IsReceived)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Ordered</MudChip>
            }
            @if (IsConfirmed)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Confirmed</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (IsReceived && !isEditing)
        {
            <button type="submit" class="btn btn-info m-1 rounded-3 text-white text-sm-center" @onclick="EditOrder">
                Edit
            </button>
        }
        @if (isEditing && !IsConfirmed && !IsCancelled)
        {
            <button type="submit" class="btn btn-info m-1 rounded-3 text-white text-sm-center" @onclick="SaveBO">
                Confirm
            </button>
        }
        @if (!IsCancelled && !isEditing && !IsConfirmed)
        {
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel Order
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Customer</label>
            <input type="text" class="form-control" @bind="customer.Name" readonly>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 160px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    var rowIndex = index;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * item.Quantity);
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                @if (isEditing)
                                {
                                    <input type="checkbox" class="me-1" @bind="item.Selected" />
                                }
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" disabled="@Readonly" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@Readonly">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@Readonly"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Quantity" readonly="@Readonly" /></td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Rate" readonly /></td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    @if (isEditing)
    {
        <div class="col-12 d-flex justify-content-start p-0">
            <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@Readonly">Add Row</button>
            <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@Readonly">Delete</button>
        </div>
    }
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumQuantity" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumAmounts" readonly>
        </div>
    </form>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
</script>

@code {
    [Parameter]
    public string? BulkOrderID { get; set; }

    string? DeviceType { get; set; }

    bool isMobile = false;
    bool isEditing = false;
    bool IsReceived = false;
    bool IsConfirmed = false;
    bool IsCancelled = false;
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool Readonly { get { return (IsConfirmed || IsCancelled) && !isEditing; } }

    List<int> IsDelete = new List<int>();
    List<string> ItemName = new List<string>();
    List<BO_Items> Items = new List<BO_Items>();

    DropDown DropDownItem = new DropDown();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!string.IsNullOrEmpty(AppState.Username) && !string.IsNullOrEmpty(AppState.Role))
            {
                string? userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });

                if (AppState.Role != "Customer")
                {
                    Snackbar.Add("Please login as a Customer", Severity.Error);
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    return;
                }

                if (string.IsNullOrEmpty(userid))
                {
                    Snackbar.Add("User does not exist", Severity.Error);
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    return;
                }
            }
            else
            {
                Snackbar.Add("Please login as a Customer", Severity.Error);
                AppState.Authorized = false;
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            if (BulkOrderID != null)
            {
                bulkorder = db.QueryFirstOrDefault<BulkOrder>("Select * from BulkOrder where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID });
                Items = db.Query<BO_Items>("Select * from BO_Items where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                ItemName = db.Query<string>("Select ItemName from BO_Items inner join Items on Item = ItemCode where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                customer = db.QueryFirstOrDefault<Customer>("Select c.* from Customer c inner join BulkOrder bo on c.CustomerID = bo.CustomerID where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID });
                if (bulkorder == null || Items.Count == 0) NavigationManager.NavigateTo("/order-history/");

                if (bulkorder.Status == SaleStatus.Received)
                {
                    IsReceived = true;
                }
                else if (bulkorder.Status == SaleStatus.Cancelled)
                {
                    IsCancelled = true;
                }
                else if (bulkorder.Status == SaleStatus.Confirmed)
                {
                    IsConfirmed = true;
                }
            }
            DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items").ToList();
        }
        StateHasChanged();

        base.OnInitialized();
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    public string CreateBulkOrder()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }

                bulkorder.BulkOrderName = $"Bulk Order for {customer.Name}";
                bulkorder.TotalAmount = SumAmounts;
                bulkorder.TotalQuantity = SumQuantity;

                if (isEditing)
                {
                    bulkorder.Status = SaleStatus.Received;
                }
                else if (IsCancelled)
                {
                    bulkorder.Status = SaleStatus.Cancelled;
                }

                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                DataTable ItemTable = Select.ItemTable();
                foreach (var PO in Items)
                {
                    ItemTable.Rows.Add(PO.RowID, PO.Item, PO.Quantity, "UOM-001", 0, PO.Amount, null);
                }
                var parameters = new DynamicParameters(bulkorder);
                parameters.Add("@BOItems", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteBOItems", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass output = crud.CRD3(parameters, "CreateBulkOrder ", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                bulkorder.BulkOrderID = output.Output;
                IsDelete.Clear();
                ToggleApproval();
                if (BulkOrderID == null)
                {
                    NavigationManager.NavigateTo($"/order-history/{bulkorder.BulkOrderID}", forceLoad: true);
                }
                else
                {
                    Items = db.Query<BO_Items>("Select * from BO_Items where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                }
                if (isEditing)
                {
                    return "Order Saved Successfully";
                }

                else if (IsConfirmed)
                {
                    return "Order Confirmed Successfully";
                }

                else if (IsCancelled)
                {
                    return "Order Cancelled Successfully";
                }

                else
                {
                    return "Error in saving Order";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (bulkorder.BulkOrderID != null)
            {
                string? GetStatus = db.QueryFirstOrDefault<string>("Select Status from BulkOrder where BulkOrderID = @BulkOrderID", new { BulkOrderID = bulkorder.BulkOrderID });
                if (GetStatus != null)
                {
                    if (GetStatus == SaleStatus.Confirmed && IsConfirmed) return "Order has already been confirmed changes cannot be done";

                    if (GetStatus == SaleStatus.Cancelled && !IsCancelled) return "This Order has already been Cancelled";
                }
                else
                {
                    return "Order does not exist";
                }
            }

            if (bulkorder.CustomerID == null) return "Customer not found";

            if (Items.Count > 0)
            {
                int count = 0;

                foreach (var BO in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (BO.Rate <= 0) return $"Row {count}: Rate cannot be less than or equal to 0";

                    if (BO.Quantity < 20 || BO.Quantity > 50) return $"Row {count}: Quantity cannot be less than 20 or greater than 50";

                    if (BO.Amount <= 0) return $"Row {count}: Amount cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }

            return null;
        }
    }

    public void EditOrder()
    {
        isEditing = true;
        StateHasChanged();
    }

    public void SaveBO()
    {
        string notification = CreateBulkOrder();
        if (notification.Contains("Successfully"))
        {
            isEditing = false;
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
        StateHasChanged();
    }

    public void CreatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from BulkOrder where BulkOrderID = @BulkOrderID", new { BulkOrderID = bulkorder.BulkOrderID });

            if (GetStatus == SaleStatus.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Request, Bulk Order has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Bulk Order ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("BulkOrderID", bulkorder.BulkOrderID);
            NavigationManager.NavigateTo("/purchaserequisition/new-purchase-request");
        }
    }

    private void ToggleApproval()
    {
        if (IsReceived && !isEditing)
        {
            IsReceived = false;
            if (bulkorder.Status == SaleStatus.Confirmed)
            {
                IsConfirmed = true;
            }
            else if (bulkorder.Status == SaleStatus.Cancelled)
            {
                IsCancelled = true;
            }
        }
        else if (IsCancelled)
        {
            IsReceived = false;
            IsConfirmed = false;
        }
        StateHasChanged();
    }

    private void AddRow()
    {
        Items.Add(new BO_Items
            {
                Quantity = 20,
                Rate = 0,
                Amount = 0
            });
        ItemName.Add("");
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!Items.Any(option => option.Item == options.Value) && ItemName[rowIndex] != options.Text)
            {
                bool result = DropDownItem.SelectOption(options, rowIndex);
                if (result == false)
                {
                    ItemName[rowIndex] = options.Text;
                    Items[rowIndex].Item = options.Value;
                    Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                }
            }
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {

            string? GetStatus = db.QueryFirstOrDefault<string>("Select Status from BulkOrder where BulkOrderID = @BulkOrderID", new { BulkOrderID = bulkorder.BulkOrderID });

            if (GetStatus == SaleStatus.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Order has already been Cancelled", Severity.Error);
                return;
            }

        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Order", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = bulkorder.BulkOrderID;
            cancelall.type = "Bulk Order";
            crud.CRD(cancelall, "CancelAll");
            IsCancelled = true;
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}