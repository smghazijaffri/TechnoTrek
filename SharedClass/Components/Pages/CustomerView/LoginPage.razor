@page "/login"

@inject Login login;
@inject Users users;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using SharedClass.Components.Data;

<div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;">
    <img src="_content/SharedClass/Images/dell1.jpg" style="width: 100%; height: 100%; object-fit: cover;" />
</div>
<div style="position: relative; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; margin-top: 24vh;">
    <EditForm Model="@login" style="text-align: center; width: 300px;" autocomplete="off">
        <div class="mb-3">
            <InputText id="usernameInput" placeholder="Username" class="form-control text-danger" @bind-Value="Username" style="backdrop-filter: blur(5px);" />
        </div>
        <div class="mb-3">
            <InputText id="passwordInput" placeholder="Password" type="password" class="form-control text-danger" @bind-Value="Password" style="backdrop-filter: blur(5px);" />
        </div>
        @if (!LoggingIn)
        {
            <button type="submit" class="btn btn-danger rounded-lg me-4" @onclick="Pagelogin">Login</button>
        }
        else if (LoggingIn)
        {
            <button class="btn btn-danger rounded-lg me-4" type="button" disabled>
                <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                <span role="status">Logging in...</span>
            </button>
        }
        <button type="submit" class="btn btn-danger rounded-lg" @onclick="SignUp">SignUp</button>
    </EditForm>
</div>

@* <div class="d-flex justify-content-center bg-danger bg-gradient align-middle" style="height: 100vh">
    <div class="d-flex justify-content-center ma-16 rounded-xl shadow-lg border-2 w-auto mud-border-secondary pa-4 h-50 align-middle" style="backdrop-filter: blur(5px);">
        <EditForm Model="@login" class="text-center ma-10 align-middle" style="width: 50vw">
            <div class="mb-10">
                <h4 style="font-style:italic; color:white;">WELCOME</h4>
            </div>
            <div class="mb-10">
                <InputText id="usernameInput" placeholder="Username" class="form-control bg-transparent text-danger" @bind-Value="Username" style="backdrop-filter: blur(5px);" />
            </div>
            <div class="mb-10">
                <InputText id="passwordInput" placeholder="Password" type="password" class="form-control bg-transparent text-danger" @bind-Value="Password" style="backdrop-filter: blur(5px);" />
            </div>
            <div class="mb-16">
                @if (!LoggingIn)
                {
                    <button type="submit" class="btn btn-danger rounded-lg me-4 shadow-lg btn-lg" @onclick="Pagelogin">Login</button>
                }
                else if (LoggingIn)
                {
                    <button class="btn btn-danger shadow-lg btn-lg" type="button" disabled>
                        <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                        <span role="status">Logging in...</span>
                    </button>
                }
                <button type="submit" class="btn btn-danger rounded-lg shadow-lg btn-lg" @onclick="SignUp">SignUp</button>
            </div>
        </EditForm>
    </div>
</div> *@

@code {
    bool isMobile = false;
    bool LoggingIn = false;

    string? DeviceType { get; set; }
    string Username = string.Empty;
    string Password = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            using SqlConnection db = new SqlConnection(con.connectionString);

            if (!string.IsNullOrEmpty(AppState.Username) && AppState.CustomerAuthorized)
            {
                users = db.QueryFirstOrDefault<Users>("SELECT * FROM Users WHERE UserName = @Username", new { Username = AppState.Username });

                if (users == null)
                {
                    NavigationManager.NavigateTo("/signup/", forceLoad: true, replace: true);
                    return;
                }
                else
                {
                    NavigationManager.NavigateTo($"/user/{AppState.Username}", forceLoad: true, replace: true);
                    return;
                }
            }

            if (AppState.Authorized)
            {
                if (users == null)
                {
                    NavigationManager.NavigateTo("/signup/", forceLoad: true, replace: true);
                    return;
                }
                else
                {
                    NavigationManager.NavigateTo("/dashboard/", forceLoad: true, replace: true);
                    return;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private async void Pagelogin()
    {
        if (LoggingIn)
        {
            return;
        }

        LoggingIn = true;

        try
        {
            var (IsLoginSuccessful, Role) = await login.Access(Username, Password, Snackbar);
            if (IsLoginSuccessful)
            {
                if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
                AppState.Username = Username;
                AppState.Role = Role;

                if (Role != "Customer")
                {
                    AppState.Authorized = true;
                    AppState.CustomerAuthorized = false;
                    using SqlConnection db = new SqlConnection(con.connectionString);
                    string userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });
                    string useridint = db.QueryFirstOrDefault<string>("select cast(UserIdentityID as varchar(50)) as UserIdentityID  from Users where UserName = @Username", new { Username = AppState.Username });
                    UserIDSession.UserID = useridint;
                    NavigationManager.NavigateTo("/dashboard");
                }
                else
                {
                    using SqlConnection db = new SqlConnection(con.connectionString);
                    string userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });
                    string useridint = db.QueryFirstOrDefault<string>("select cast(UserIdentityID as varchar(50)) as UserIdentityID  from Users where UserName = @Username", new { Username = AppState.Username });
                    UserIDSession.UserID = useridint;

                    var result = await Select.RetrieveCartItems(userid);

                    foreach (var item in result)
                    {
                        AppState.CartItemCount++;
                    }

                    AppState.CustomerAuthorized = true;
                    AppState.Authorized = false;
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                Snackbar.Clear();
                Snackbar.Add("Welcome " + Username, Severity.Success);
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("Login failed. Please check your credentials.", Severity.Error);
                if (isMobile) Vibration.Default.Vibrate();
            }
        }
        catch (SqlException ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            LoggingIn = false;
        }
    }

    private void SignUp()
    {
        NavigationManager.NavigateTo("/signup");
    }
}