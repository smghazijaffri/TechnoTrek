@page "/login"

@inject Login login;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject ExampleJsInterop Example;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;">
    <img src="_content/SharedClass/Images/dell1.jpg" style="width: 100%; height: 100%; object-fit: cover;" />
</div>
<div style="position: relative; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; margin-top: 24vh;">
    <EditForm Model="@login" style="text-align: center; width: 300px;">
        <div class="mb-3">
            <InputText id="usernameInput" placeholder="Username" class="form-control text-danger" @bind-Value="Username" style="backdrop-filter: blur(5px);" />
        </div>
        <div class="mb-3">
            <InputText id="passwordInput" placeholder="Password" type="password" class="form-control text-danger" @bind-Value="Password" style="backdrop-filter: blur(5px);" />
        </div>
        <button type="submit" class="btn btn-danger rounded-lg" @onclick="Pagelogin">Login</button>
        <button type="submit" class="btn btn-danger rounded-lg" @onclick="SignUp">SignUp</button>
    </EditForm>
</div>

@code {
    bool isMobile = false;

    string? DeviceType { get; set; }
    string Username = string.Empty;
    string Password = string.Empty;
    bool IsLoginSuccessful = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private async void Pagelogin()
    {
        var (IsLoginSuccessful, Role) = await login.Access(Username, Password, JSRuntime, Snackbar);
        if (IsLoginSuccessful)
        {
            if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
            await _protectedLocalStore.SetLocalAsync("Authorized", true);
            await _protectedLocalStore.SetLocalAsync("Username", Username);
            await _protectedLocalStore.SetLocalAsync("Role", Role);

            if (Role != "Customer") NavigationManager.NavigateTo("/dashboard");
            else NavigationManager.NavigateTo("/", forceLoad: true);
            Snackbar.Clear();
            Snackbar.Add("Welcome " + Username, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("Login failed. Please check your credentials.", Severity.Error);
            if (isMobile) Vibration.Default.Vibrate();
        }
    }

    private void SignUp()
    {
        NavigationManager.NavigateTo("/signup");
    }
}