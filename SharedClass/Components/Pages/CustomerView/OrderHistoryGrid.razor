@page "/order-history"

@inject CRUD crud;
@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject BulkOrder bulkorder;
@inject NavigationManager NavigationManager;

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <MudTable @ref="_table" T="BulkOrder" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px"
                      OnRowClick="@OnRowClick" Virtualize="true" Filter="new Func<BulkOrder,bool>(FilterFunc1)" Elevation="4">

                <ToolBarContent>
                    @if (selectedItems.Any())
                    {
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteOutline" Class="mt-3"
                                   Color="Color.Error" OnClick="DeleteSelectedItems" Size="Size.Large">Delete</MudButton>
                    }
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Status</MudTh>
                    <MudTh>Total Amount</MudTh>
                    <MudTh>Total Quantity</MudTh>
                    <MudTh>Date</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd DataLabel="Total Amount">@context.TotalAmount</MudTd>
                    <MudTd DataLabel="Total Quantity">@context.TotalQuantity</MudTd>
                    <MudTd DataLabel="Date">@context.CreationDate.ToString("MM/dd/yyyy")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </div>
    </div>
</div>

@code {
    MudTable<BulkOrder>? _table;
    string? userid { get; set; }
    string searchString1 = string.Empty;
    IEnumerable<BulkOrder> Elements = new List<BulkOrder>();
    HashSet<BulkOrder> selectedItems = new HashSet<BulkOrder>();

    protected override async Task OnInitializedAsync()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        if (!string.IsNullOrEmpty(AppState.Username) && !string.IsNullOrEmpty(AppState.Role))
        {
            userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = AppState.Username });

            if (AppState.Role != "Customer")
            {
                Snackbar.Add("Please login as a Customer", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            if (string.IsNullOrEmpty(userid))
            {
                Snackbar.Add("User does not exist", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
        else
        {
            Snackbar.Add("Please login as a Customer", Severity.Error);
            AppState.Authorized = false;
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        Elements = await db.QueryAsync<BulkOrder>($"SELECT * FROM BulkOrder WHERE CustomerID = '{userid}'");

        if (!Elements.Any())
        {
            Snackbar.Add("No Orders to show", Severity.Error);
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/products", forceLoad: true);
        }
    }

    void OnRowClick(TableRowClickEventArgs<BulkOrder> args)
    {
        bulkorder.BulkOrderID = args.Item.BulkOrderID;
        NavigationManager.NavigateTo($"/order-history/{bulkorder.BulkOrderID}");
    }

    private bool FilterFunc1(BulkOrder element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BulkOrder element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.BulkOrderName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.BulkOrderID} {element.TotalAmount} {element.TotalQuantity} {element.CreationDate}".Contains(searchString)) return true;

        return false;
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems == null || !selectedItems.Any())
        {
            Snackbar.Add("No items selected to delete", Severity.Info);
            return;
        }

        var itemsToDelete = selectedItems.Where(item => item.Status == "Cancelled" && item.Status == "Received").ToList();
        if (itemsToDelete.Count == 0)
        {
            Snackbar.Add("Confirmed Orders cannot be deleted", Severity.Info);
            return;
        }

        try
        {
            foreach (var item in itemsToDelete)
            {
                OutputClass output = new OutputClass();
                var parameter = new DynamicParameters(item);
                output = crud.CRD3(parameter, "CreateBulkOrder", IsDelete: true, outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    Snackbar.Add(output.ErrorMessage, Severity.Error);
                    return;
                }
            }

            Elements = Elements.Where(e => !itemsToDelete.Any(d => d.BulkOrderID == e.BulkOrderID)).ToList();
            Snackbar.Add($"{itemsToDelete.Count} ordered deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deleting items: " + ex.Message, Severity.Error);
        }

        selectedItems.Clear();
        StateHasChanged();
    }
}