@page "/billofmaterial/new-bom"
@page "/billofmaterial/{BOMID?}"

@inject BOM bom;
@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject BOM_Item BOMItem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header

            @if (bom.BOMID != null)
            {
                if (Active)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Active</MudChip>
                }
                else if (!Active)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">InActive</MudChip>
                }
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (Createbutton)
        {
            <div class="dropdown m-1" id="dropdown">
                <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                    <li class="btn ms-2 m-1 text-sm-start" @onclick="CreatePO">Production Order</li>
                </ul>
            </div>
            @if (IsCustomer)
            {
                <div class="m-4"></div>
            }
        }
        @if (!IsCustomer)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                Save
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" autocomplete="off" @oninput="HandleFormInput">
        <div class="col-md-6" hidden=" @DisplayPO">
            <label class="form-label">BOM ID</label>
            <input type="text" class="form-control" @bind="bom.BOMID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">BOM Name</label>
            <input type="text" class="form-control" @bind="bom.ItemName">
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="bom.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Type</label>
            <input type="text" class="form-control" @bind="bom.Type" readonly>
        </div>
        <div class="col-md-6">
            <MudCheckBox @bind-Value="@bom.IsActive" Size="Size.Small" Dense="true" Label="Is Active"></MudCheckBox>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" autocomplete="off" @oninput="HandleFormInput" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        UOM
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    var rowIndex = index;

                    item.Amount = (item.Rate * (item.Quantity * quantity[index]));
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" readonly="@IsCustomer" />
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>

                        <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex,true)" @bind="UOMName[rowIndex]"
                                       placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                    style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" class="form-control" id="rate" @bind="item.Rate" readonly /></td>
                        <td><input type="text" class="form-control" inputmode="numeric" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    }); $('#rate').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#rate').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? BOMID { get; set; }

    string? DeviceType { get; set; }
    string header = "New Bill of Material";

    bool Active = true;
    bool IsSaving = true;
    bool DisplayPO = true;
    bool isMobile = false;
    bool IsCustomer = false;
    bool Createbutton = false;
    bool ReadonlyHidden { get { return !IsSaving || IsCustomer; } }
    bool IsAnyItemSelected => Items.Any(item => item.Selected);

    DropDown DropDownUOM = new DropDown();
    DropDown DropDownItem = new DropDown();

    List<int> Rate = new List<int>();
    List<int> IsDelete = new List<int>();
    List<int> quantity = new List<int>();
    List<string> UOMName = new List<string>();
    List<string> ItemName = new List<string>();
    List<BOM_Item> Items = new List<BOM_Item>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        bom.IsActive = true;
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (BOMID != null)
                {
                    bom = db.QueryFirstOrDefault<BOM>("Select * from BOM  where BOMID = @BOMID", new { BOMID = BOMID });
                    if (bom == null) { NavigationManager.NavigateTo("/billofmaterial/"); }
                    if (bom.Type == "Customer")
                    {
                        IsCustomer = true;
                        header = bom.BOMName;
                    }
                    else
                    {
                        header = bom.ItemName;
                    }
                    Items = db.Query<BOM_Item>("select * from BOM_Item where BOMID = @BOMID", new { BOMID = BOMID }).ToList();
                    ItemName = db.Query<string>("select ItemName from BOM_Item inner join Items on Item = ItemCode  where BOMID = @BOMID", new { BOMID = BOMID }).ToList();
                    UOMName = db.Query<string>("select UOMName from BOM_Item inner join UOM on UOMID = UOM  where BOMID = @BOMID", new { BOMID = BOMID }).ToList();
                    quantity = db.Query<int>("select StockQuantity from UOM Inner Join BOM_Item  on uom = UOM  where BOMID = @BOMID", new { BOMID = BOMID }).ToList();
                    DisplayPO = false;

                    IsSaving = true;

                    if (bom.IsActive)
                    {
                        Active = true;
                    }
                    CheckStatus();
                }
                else
                {
                    bom.DocumentDate = DateTime.Now;
                    bom.Type = "Manual";
                    AddRow();
                }
                DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items").ToList();
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePO();
                if (validate != null)
                {
                    return validate;
                }

                if (bom.Type != "Customer")
                {
                    bom.BOMName = bom.ItemName;
                    header = bom.ItemName;
                }

                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                DataTable ItemTable = Select.ItemTable();
                foreach (var PO in Items)
                {
                    ItemTable.Rows.Add(PO.RowID, PO.Item, PO.Quantity, PO.UOM, PO.Rate, PO.Amount, null);
                }
                var parameters = new DynamicParameters(bom);
                parameters.Add("@BOMItems", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteBOM_Items", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass output = crud.CRD3(parameters, "CreateBOM", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                bom.BOMID = output.Output;
                // bom.BOMID = crud.CRD(bom, "CreateBOM");

                // foreach (var PO in Items)
                // {
                //     foreach (int del in IsDelete)
                //     {
                //         if (PO.RowID == del)
                //         {
                //             IsDelete.Remove(del);
                //         }
                //     }
                //     PO.BOMID = bom.BOMID;
                //     DisplayPO = false;
                //     crud.CRD(PO, "BOMItem");
                // }

                // foreach (var del in IsDelete)
                // {
                //     BOMItem.RowID = del;
                //     BOMItem.BOMID = bom.BOMID;
                //     crud.CRD(BOMItem, "BOMItem", System.Data.CommandType.StoredProcedure, true);
                // }
                IsDelete.Clear();
                ToggleApproval();
                if (BOMID == null)
                {
                    NavigationManager.NavigateTo($"/billofmaterial/{bom.BOMID}", forceLoad: true);
                }
                CheckStatus();

                return "BOM Saved Successfully";
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (bom.BOMID != null)
            {
                int GetCount = db.QueryFirstOrDefault<int>("Select Count(1) from BOM where BOMID = @BOMID", new { BOMID = bom.BOMID });
                if (GetCount == 0)
                {
                    return "BOM ID does not exist";

                }
            }

            if (bom.DocumentDate == null) return "Please Enter Document Date";
            if (Items.Count > 0)
            {
                int count = 0;
                foreach (var PO in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please select Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(PO.UOM)) return $"Please Enter UOM on Row: {count}";

                    if (PO.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";

                    if (PO.Rate <= 0) return $"Row {count}: Rate cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }
            return null;
        }
    }

    public void SavePO()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private void ToggleApproval()
    {
        if (bom.IsActive)
        {
            Active = true;
        }
        else if (!bom.IsActive)
        {
            Active = false;
        }
    }

    private void AddRow()
    {
        Items.Add(new BOM_Item
            {
                Quantity = 1
            });
        ItemName.Add("");
        UOMName.Add("");
        quantity.Add(0);
        Rate.Add(0);
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                UOMName.RemoveAt(i);
                quantity.RemoveAt(i);
                Rate.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        Active = !Active;

        StateHasChanged();
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                if (Items[rowIndex].Item != options.Value)
                {
                    UOMName[rowIndex] = "";
                }

                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                DropDownUOM.ListItems[rowIndex].FilteredOptions = db.Query<Option>("select UOMName as Text , u.UOMID as Value  from UOM u inner join ItemUOM it on it.UOMID = u.UOMID where ItemID = @ItemID", new { ItemID = options.Value }).ToList();
                HandleFormInput();
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                Items[rowIndex].UOM = options.Value;
                quantity[rowIndex] = db.QueryFirstOrDefault<int>("select StockQuantity from UOM where UOMID = @UOMID", new { UOMID = options.Value });
                HandleFormInput();
            }
        }
    }

    public void CreatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool GetStatus = db.QueryFirstOrDefault<bool>("Select IsActive from BOM where BOMID = @BOMID", new { BOMID = bom.BOMID });

            if (!GetStatus)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Production Order, BOM is Inctive ", Severity.Error);
                return;
            }
            else if (string.IsNullOrEmpty((GetStatus).ToString()))
            {
                Snackbar.Clear();
                Snackbar.Add("BOM ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("BOMID", bom.BOMID);
            NavigationManager.NavigateTo("/productionorder/new-production-order");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }

    public void CheckStatus()
    {
        if (Active)
        {
            Createbutton = true;
        }
        else
        {
            Createbutton = false;
        }
    }
}