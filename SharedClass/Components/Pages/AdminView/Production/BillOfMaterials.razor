@page "/billofmaterial"

@using static MudBlazor.CategoryTypes
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Net.Http.Json
@using Dapper

@inject BOM bom;
@layout AdminLayout;
@inject Select select;
@inject Delete delete;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-end">
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Style="text-transform:none; margin-bottom: 20px;"
                           Href="/billofmaterial/new-bom" Size="Size.Large">Create</MudButton>
                @if (selectedItems.Any())
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteOutline" Style="text-transform:none; margin-bottom: 20px;"
                               Color="Color.Error" OnClick="DeleteSelectedItems" Size="Size.Large">Delete</MudButton>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <MudTable @ref="_table" T="BOM" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px"
                      OnRowClick="@OnRowClick" Filter="new Func<BOM,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Bill of Materials</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>BOM ID</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Item</MudTh>
                    <MudTh>Type</MudTh>
                    @* <MudTh>Status</MudTh> *@
                    <MudTh>Date</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="BOM ID">@context.BOMID</MudTd>
                    <MudTd DataLabel="Title">@context.BOMName</MudTd>
                    <MudTd DataLabel="Title">@context.ItemName</MudTd>
                    <MudTd DataLabel="Title">@context.Type</MudTd>
                    @* <MudTd DataLabel="Status">@context.Status</MudTd> *@
                    <MudTd DataLabel="Date">@context.DocumentDate</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </div>
    </div>
</div>

@code {
    private MudTable<BOM> _table;
    private string searchString1 = "";
    private bool _selectOnRowClick = true;
    private IEnumerable<BOM> Elements = new List<BOM>();
    private HashSet<BOM> selectedItems = new HashSet<BOM>();

    protected override async Task OnInitializedAsync()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);
        Elements = await db.QueryAsync<BOM>("SELECT * FROM BOM");
    }

    void OnRowClick(TableRowClickEventArgs<BOM> args)
    {
        bom.BOMID = args.Item.BOMID;
        NavigationManager.NavigateTo($"/billofmaterial/{bom.BOMID}");
    }

    private bool FilterFunc1(BOM element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BOM element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.BOMName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        // if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.BOMID}".Contains(searchString)) return true;

        return false;
    }

    private async void DeleteSelectedItems()
    {
        if (selectedItems == null || !selectedItems.Any())
        {
            Snackbar.Add("No items selected to delete", Severity.Info);
            return;
        }

        var itemsToDelete = selectedItems.Where(item => item.IsActive == false).ToList();
        if (itemsToDelete.Count == 0)
        {
            Snackbar.Add("No items with status 'InActive' to delete", Severity.Info);
            return;
        }

        try
        {
            foreach (var item in itemsToDelete)
            {
                await delete.DeleteFromTable("BOM", "BOMID", item.BOMID, "BOM_Item");
            }

            Elements = Elements.Where(e => !itemsToDelete.Any(d => d.BOMID == e.BOMID)).ToList();
            // Snackbar.Add($"{itemsToDelete.Count} items deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deleting items: " + ex.Message, Severity.Error);
        }

        selectedItems.Clear();
        StateHasChanged();
    }
}