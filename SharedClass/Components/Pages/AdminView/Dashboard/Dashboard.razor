@page "/dashboard";

@using System.Globalization

@inject BOM bom;
@layout AdminLayout;
@inject Login login;
@inject Select select;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <h4>Quick Access</h4>
<div class="row m-auto">
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.Bolt" Href="/item" Style="border-radius:10px">
                Items
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.AdUnits" Href="/uom" Style="border-radius:10px">
                UOM
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.RequestQuote" Href="/stock-entry" Style="border-radius:10px">
                Stock Entry
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.FireTruck" Href="/vendors" Style="border-radius:10px">
                Vendor
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Filled.Person" Href="/customers" Style="border-radius:10px">
                Customer
            </MudListItem>
        </MudList>
    </MudPaper>
</div> *@

<div class="m-auto">
    <Analytics />
</div>
<div class="m-auto mt-3" style="width:40%; justify-content: flex-start; display: inline-grid;">
    <MudTable @ref="_table" T="BOM" Items="@BOMElements" Hover="true" OnRowClick="@OnRowClick" Virtualize="true"
              Filter="new Func<BOM,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Custom PC BOM</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>BOM ID</MudTh>
            <MudTh>Title</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="BOM ID">@context.BOMID</MudTd>
            <MudTd DataLabel="Title">@context.BOMName</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] {5}" />
        </PagerContent>
    </MudTable>
</div>

@* <div class="m-auto">
    <Analytics />
</div> *@

<script defer>
    window.disableBackGesture = function () {
        window.history.pushState(null, document.title, location.href);
        window.addEventListener('popstate', function (event) {
            window.history.pushState(null, document.title, location.href);
        });
    };

    window.enableBackGesture = function () {
        window.removeEventListener('popstate', function (event) {
            window.history.pushState(null, document.title, location.href);
        });
    };
</script>

@code {
    private MudTable<BOM> _table;
    private string searchString1 = "";
    private bool _selectOnRowClick = false;
    private IEnumerable<BOM> BOMElements = new List<BOM>();
    private HashSet<BOM> selectedItems = new HashSet<BOM>();

    public string[] XAxisLabels;

    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();

    string? DeviceType { get; set; }

    protected override async void OnInitialized()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            BOMElements = await db.QueryAsync<BOM>("SELECT * FROM BOM Where Type = 'Customer' AND IsActive = 'true'");
        }

        StateHasChanged();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("disableBackGesture");
        }
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("enableBackGesture");
    }

    void OnRowClick(TableRowClickEventArgs<BOM> args)
    {
        bom.BOMID = args.Item.BOMID;
        NavigationManager.NavigateTo($"/billofmaterial/{bom.BOMID}");
    }

    private bool FilterFunc1(BOM element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BOM element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.BOMName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.BOMID}".Contains(searchString)) return true;

        return false;
    }
}