@page "/dashboard";

@using System.Globalization

@layout AdminLayout;
@inject Login login;
@inject Select select;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<h4>Quick Access</h4>
<div class="row m-auto">
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.Bolt" Href="/item" Style="border-radius:10px">
                Items
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.AdUnits" Href="/uom" Style="border-radius:10px">
                UOM
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.RequestQuote" Href="/stock-entry" Style="border-radius:10px">
                Stock Entry
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Outlined.FireTruck" Href="/vendors" Style="border-radius:10px">
                Vendor
            </MudListItem>
        </MudList>
    </MudPaper>
    <MudPaper Width="300px" Elevation="1" Style="margin-right:20px; border-radius:10px; margin-bottom: 20px;">
        <MudList Clickable="true">
            <MudListItem Avatar="@Icons.Material.Filled.Person" Href="/customers" Style="border-radius:10px">
                Customer
            </MudListItem>
        </MudList>
    </MudPaper>
</div>

<Analytics />

<script defer>
    window.disableBackGesture = function () {
        window.history.pushState(null, document.title, location.href);
        window.addEventListener('popstate', function (event) {
            window.history.pushState(null, document.title, location.href);
        });
    };

    window.enableBackGesture = function () {
        window.removeEventListener('popstate', function (event) {
            window.history.pushState(null, document.title, location.href);
        });
    };
</script>

@code {
    bool isLoading = false;
    public string[] XAxisLabels;

    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();

    string DeviceType { get; set; }

    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");

        StateHasChanged();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("disableBackGesture");
        }
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("enableBackGesture");
    }
}