@using System.Linq;

@layout AdminLayout;
@inject Connection con;
@implements IDisposable;
@inject ISnackbar Snackbar;
@inject Select DataService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <MudContainer Class="m-auto"> *@
    <MudGrid>
        <MudItem xs="12" md="6" lg="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Income</MudText>
                    <MudText Typo="Typo.h5">Rs. @TotalIncome</MudText>
                    <MudProgressLinear Color="Color.Info" Value="@TotalSpendings" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="6" lg="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Spendings</MudText>
                    <MudText Typo="Typo.h5">Rs. @TotalSpendings</MudText>
                    <MudProgressLinear Color="Color.Info" Value="@TotalIncome" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="6" lg="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Profit</MudText>
                    <MudText Typo="Typo.h5">Rs. @TotalProfit</MudText>
                    <MudProgressLinear Color="Color.Info" Value="@TotalIncome" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        @* <MudItem xs="12" md="6" lg="3">
        <MudCard>
        <MudCardContent>
        <MudText Typo="Typo.h6">Sale Orders</MudText>
        <MudText Typo="Typo.h5">@saleOrderCount</MudText>
        <MudProgressLinear Color="Color.Info" Value="@purchaseOrderCount" />
        </MudCardContent>
        </MudCard>
        </MudItem>

        <MudItem xs="12" md="6" lg="3">
        <MudCard>
        <MudCardContent>
        <MudText Typo="Typo.h6">Purchase Orders</MudText>
        <MudText Typo="Typo.h5">@purchaseOrderCount</MudText>
        <MudProgressLinear Color="Color.Info" Value="@saleOrderCount" />
        </MudCardContent>
        </MudCard>
        </MudItem> *@

        <MudItem xs="12" lg="7">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Revenue & Spendings per Month</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (RevenueSeries != null && RevenueXAxisLabelsArray != null)
                    {
                        <MudChart ChartType="ChartType.Bar" ChartSeries="@RevenueSeries" XAxisLabels="@RevenueXAxisLabelsArray" Height="auto"></MudChart>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1">No data...</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        @* <MudItem xs="12" lg="5">
        <MudCard>
        <MudCardHeader>
        <MudText Typo="Typo.h6">Order Activity</MudText>
        </MudCardHeader>
        <MudCardContent>
        <MudList>
        @foreach (var activity in OrderActivities)
        {
        <MudListItem>
        <MudText>@activity.Status</MudText>
        <MudText Align="Align.End">@activity.TimeAgo</MudText>
        </MudListItem>
        }
        </MudList>
        </MudCardContent>
        </MudCard>
        </MudItem> *@

        <MudItem xs="12" lg="8">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Real-Time Inventory</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (RealTimeSeries != null && RealTimeXAxisLabels.ToArray() != null)
                    {
                        <MudChart ChartType="ChartType.Bar" ChartSeries="@RealTimeSeries" XAxisLabels="@RealTimeXAxisLabels.ToArray()" Height="auto" />
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1">No data...</MudText>
                    }

                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" lg="4">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Sales Comparison</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Pie" InputData="@SalesComparisonData" InputLabels="@SalesComparisonLabels" Height="350px"></MudChart>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
@* </MudContainer> *@

@code {
    private Timer _timer;

    // private int saleOrderCount;
    // private int purchaseOrderCount;

    public double TotalIncome { get; set; }
    public double TotalProfit { get; set; }
    public double TotalSpendings { get; set; }
    public double[] SalesComparisonData { get; set; }

    public string[] SalesComparisonLabels { get; set; }
    public string[] RevenueXAxisLabelsArray { get; set; }

    public List<string> RealTimeXAxisLabels { get; set; } = new List<string> { };
    public List<DateOnly> RevenueXAxisLabels { get; set; } = new List<DateOnly> { };
    public List<ChartSeries> RevenueSeries { get; set; } = new List<ChartSeries>();
    public List<ChartSeries> RealTimeSeries { get; set; } = new List<ChartSeries>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        _timer = new Timer(async _ => await LoadDataAsync(), null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));
    }

    // public List<OrderActivity> OrderActivities = new List<OrderActivity>
    // {
    //     new OrderActivity { Status = "Order Received", TimeAgo = "5 minutes ago" },
    //     new OrderActivity { Status = "Order Processed", TimeAgo = "10 minutes ago" },
    //     new OrderActivity { Status = "Order Shipped", TimeAgo = "20 minutes ago" },
    //     new OrderActivity { Status = "Order Delivered", TimeAgo = "30 minutes ago" },
    // };

    public class OrderActivity
    {
        public string Status { get; set; }
        public string TimeAgo { get; set; }
    }

    private async Task LoadDataAsync()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            var itemsData = await DataService.GetItemsAsync();
            var saleOrderData = await db.QueryAsync<SaleOrder>("SELECT * FROM SaleOrder");
            var stockData = await db.QueryAsync<Stock>("SELECT * FROM Stock ORDER BY 'ItemID'");
            var purchaseOrderData = await db.QueryAsync<PurchaseOrders>("SELECT * FROM PurchaseOrder");
            var salesInvoiceData = await db.QueryAsync<SalesInvoice>("SELECT * FROM SaleInvoice WHERE Status = 'Paid'");
            var purchaseInvoicedata = await db.QueryAsync<PurchaseInvoice>("SELECT * FROM PurchaseInvoice WHERE Status = 'Paid'");
            // saleOrderCount = await db.ExecuteScalarAsync<int>("SELECT Count(*) FROM SaleOrder Where Status != 'Draft' AND Status != 'Cancelled'");
            // purchaseOrderCount = await db.ExecuteScalarAsync<int>("SELECT Count(*) FROM PurchaseOrder Where Status != 'Draft' AND Status != 'Cancelled'");

            // Calculate Total Income from Sales Invoices
            TotalIncome = salesInvoiceData.Sum(invoice => (double)invoice.TotalAmount);

            // Calculate Total Spendings from Purchase Invoices
            TotalSpendings = purchaseInvoicedata.Sum(invoice => (double)invoice.TotalAmount);

            // Calculate Total Revenue from Sales Invoices and Stock
            TotalProfit = salesInvoiceData.Sum(invoice => (double)invoice.TotalAmount)
                         - purchaseInvoicedata.Sum(invoice => (double)(invoice.TotalAmount));

            var salesDates = salesInvoiceData.Select(invoice => invoice.DocumentDate.Date).Where(date => date != null).Distinct();
            var purchaseDates = purchaseInvoicedata.Select(invoice => invoice.DocumentDate.Date).Where(date => date != null).Distinct();

            // Combine all distinct dates and group them by month
            var allDates = salesDates.Concat(purchaseDates).Distinct().OrderBy(date => date);
            var groupedDates = allDates.GroupBy(date => new { date.Year, date.Month });

            // Initialize lists to store aggregated revenue and spendings data
            var revenueData = new List<double>();
            var spendingData = new List<double>();

            // Iterate through each month to aggregate revenue and spending data
            foreach (var group in groupedDates)
            {
                var month = group.Key.Month;
                var year = group.Key.Year;

                // Filter Sales invoices for the current month and year
                var salesDataForMonth = salesInvoiceData.Where(invoice => invoice.DocumentDate.Year == year && invoice.DocumentDate.Month == month);
                var totalRevenueForMonth = salesDataForMonth.Sum(invoice => invoice.TotalAmount);

                // Filter Purchase invoices for the current month and year
                var purchaseDataForMonth = purchaseInvoicedata.Where(invoice => invoice.DocumentDate.Year == year && invoice.DocumentDate.Month == month);
                var totalSpendingForMonth = purchaseDataForMonth.Sum(invoice => invoice.TotalAmount);

                // Add aggregated revenue and spending data for the current month
                revenueData.Add(totalRevenueForMonth);
                spendingData.Add(totalSpendingForMonth);

                // Create X-axis label for the current month
                RevenueXAxisLabels.Add(new DateOnly(year, month, 1));
            }

            // Convert List<DateOnly> to string array
            RevenueXAxisLabelsArray = RevenueXAxisLabels.Select(date => date.ToString("MMM yyyy")).ToArray();

            // Assign aggregated data to RevenueSeries
            RevenueSeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Revenue",
                    Data = revenueData.ToArray()
                },
                new ChartSeries
                {
                    Name = "Spendings",
                    Data = spendingData.ToArray()
                }
            };

            foreach (var data in stockData)
            {
                if (!RealTimeXAxisLabels.Contains(data.ItemID))
                {
                    RealTimeXAxisLabels.Add(data.ItemID);
                }
            }

            // Populate RealTimeSeries with stock data
            RealTimeSeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Items",
                    Data = stockData.OrderBy(stock => stock.ItemID)
                                    .Select(stock => (double)stock.Quantity)
                                    .ToArray()
                }
            };

            // Populate SalesComparisonData with sales order item data
            SalesComparisonData = saleOrderData.GroupBy(order => order.SaleOrderName)
                                                   .Select(group => (double)group.Sum(order => order.TotalAmount))
                                                   .ToArray();
            SalesComparisonLabels = saleOrderData.Select(order => order.SaleOrderName).Distinct().ToArray();
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}