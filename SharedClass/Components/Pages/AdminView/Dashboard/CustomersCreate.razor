@page "/customers/new-customer"
@page "/customers/{CustomerID?}"

@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Connection con;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @header
                @if (IsSaving)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveCustomer">
                Save
            </button>
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Name and Type</h5>
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-md-6" hidden>
                <label class="form-label">Customer ID</label>
                <input type="text" class="form-control" @bind="customer.CustomerID" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Customer Name</label>
                <input type="text" @bind="customer.Name" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label">Customer Address</label>
                <input type="text" @bind="customer.Address" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label">Contact Number</label>
                <input type="text" class="form-control" @bind="customer.Contact">
            </div>
        </form>
    </div>
}

@code {
    [Parameter]
    public string? CustomerID { get; set; }
    private string header = "New Customer";

    bool isLoading = false;
    private bool IsSaving = true;
    public bool isAuthorized { get; set; }
    public bool ReadonlyHidden { get { return !IsSaving; } }

    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            try
            {
                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    if (CustomerID != null)
                    {
                        customer = db.QueryFirstOrDefault<Customer>("Select * from Customer where CustomerID = @CustomerID", new { CustomerID = CustomerID });
                        if (customer == null)
                            NavigationManager.NavigateTo("/customers/");
                        header = customer.Name;
                        IsSaving = false;
                    }
                }
                StateHasChanged();
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }

        base.OnInitialized();
    }

    public string createCustomer()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateCustomer();
                if (validate != null)
                {
                    return validate;
                }

                header = customer.Name;

                IsSaving = false;

                customer.CustomerID = crud.CRD(customer, "CreateCustomer");

                if (CustomerID == null)
                {
                    NavigationManager.NavigateTo($"/customers/{customer.CustomerID}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "Customer Created Successfully";
                }
                else
                {
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveCustomer()
    {
        string notification = createCustomer();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateCustomer()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (string.IsNullOrWhiteSpace(customer.Name)) { return $"Please enter Customer Name"; }
            if (string.IsNullOrWhiteSpace(customer.Address)) { return $"Please enter Customer Address"; }
            if (string.IsNullOrWhiteSpace(customer.Contact)) { return $"Please enter Customer Contact"; }

            if (customer.CustomerID != null)
            {
                int countcustomerContact = db.QueryFirstOrDefault<int>("Select Count(1) from Customer where CustomerID != @CustomerID and Contact = @Contact", new { CustomerID = customer.CustomerID, Contact = customer.Contact });
                if (countcustomerContact == 0)
                {
                    return "This Contact is already in use";
                }
            }

            return null;
        }
    }

    private void HandleFormInput()
    {
        IsSaving = true;
        StateHasChanged();
    }
}
