@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<MudTabs Centered="true" Rounded="true" PanelClass="pa-6" Class="m-auto">
    <MudTabPanel Text="General" Class="d-flex justify-content-center">
        <h5 class="m-3 mt-3">Quick View</h5>
        <MudGrid>
            <MudItem xs="18" md="12" lg="2" @onclick="NavigateItem" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Items <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@TotalProducts</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="18" md="12" lg="2" @onclick="NavigateCustomer" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Customers <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@TotalCustomers</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="18" md="12" lg="2" @onclick="NavigateVendor" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Vendors <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@TotalVendors</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="18" md="12" lg="2" @onclick="NavigateUOM" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">UOM <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@TotalUOM</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="18" md="12" lg="2" @onclick="NavigateEmployees" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Employees <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@TotalEmployees</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <h5 class="m-3">Analytics</h5>
        <MudGrid Class="mt-3 shadow-lg border border-secondary-subtle">
            @if (InventoryDetails != null && InventoryDetails.Any())
            {
                <MudIconButton Icon="@Icons.Material.Outlined.Download" Title="Download Report" Color="Color.Error" OnClick="DownloadReport" />
                <Syncfusion.Blazor.Charts.SfChart Title="Inventory" EnableAnimation="true">
                    <Syncfusion.Blazor.Charts.ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                                                EdgeLabelPlacement="Syncfusion.Blazor.Charts.EdgeLabelPlacement.Shift"
                                                                LabelIntersectAction="Syncfusion.Blazor.Charts.LabelIntersectAction.Wrap">
                    </Syncfusion.Blazor.Charts.ChartPrimaryXAxis>

                    <Syncfusion.Blazor.Charts.ChartSeriesCollection>
                        <Syncfusion.Blazor.Charts.ChartSeries DataSource="@InventoryDetails" XName="Item" YName="Quantity" Opacity="0.5" DashArray="5,5" Fill="blue" Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column">
                            <Syncfusion.Blazor.Charts.ChartSeriesBorder Width="2" Color="red"></Syncfusion.Blazor.Charts.ChartSeriesBorder>
                            <Syncfusion.Blazor.Charts.ChartMarker>
                                <Syncfusion.Blazor.Charts.ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                            </Syncfusion.Blazor.Charts.ChartMarker>
                        </Syncfusion.Blazor.Charts.ChartSeries>
                    </Syncfusion.Blazor.Charts.ChartSeriesCollection>
                </Syncfusion.Blazor.Charts.SfChart>
            }
            else
            {
                <MudText Typo="Typo.subtitle1">No data...</MudText>
            }
        </MudGrid>
    </MudTabPanel>

    <MudTabPanel Text="Purchase">
        <h5 class="m-3 mt-3">Quick View</h5>
        <MudGrid>
            <MudItem xs="12" md="16" lg="3" @onclick="NavigatePR" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Purchase Requests <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@PendingPurchaseRequest</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" md="16" lg="3" @onclick="NavigatePI" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Purchase Invoices <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@UnpaidPurchaseInvoice</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <h5 class="m-3">Analytics</h5>
        <MudGrid>
            <MudItem xs="12" md="6" lg="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Spendings</MudText>
                        <MudText Typo="Typo.h5">Rs. @TotalSpendings</MudText>
                        <MudProgressLinear Color="Color.Info" Value="@TotalIncome" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="6" lg="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Profit</MudText>
                        <MudText Typo="Typo.h5">Rs. @TotalProfit</MudText>
                        <MudProgressLinear Color="Color.Info" Value="@TotalIncome" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <PurchaseInsight FiscalYearEnd="@FiscalYearEnd" FiscalYearStart="@FiscalYearStart" />
    </MudTabPanel>

    <MudTabPanel Text="Sales">
        <h5 class="m-3 mt-3">Quick View</h5>
        <MudGrid>
            <MudItem xs="12" md="16" lg="3" @onclick="NavigateSI" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Sale Invoices <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@PartiallyPaidandOverdueSaleInvoice</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <h5 class="m-3">Analytics</h5>
        <MudGrid>
            <MudItem xs="12" md="6" lg="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Income</MudText>
                        <MudText Typo="Typo.h5">Rs. @TotalIncome</MudText>
                        <MudProgressLinear Color="Color.Info" Value="@TotalSpendings" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="6" lg="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Profit</MudText>
                        <MudText Typo="Typo.h5">Rs. @TotalProfit</MudText>
                        <MudProgressLinear Color="Color.Info" Value="@TotalIncome" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <SalesInsight FiscalYearEnd="@FiscalYearEnd" FiscalYearStart="@FiscalYearStart" />
    </MudTabPanel>

    <MudTabPanel Text="Production">
        <h5 class="m-3 mt-3">Quick View</h5>
        <MudGrid>
            <MudItem xs="12" md="16" lg="3" @onclick="NavigateBOM" Style="cursor: pointer;">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">Custom Configurations <i class="bi bi-arrow-up-right"></i></MudText>
                        <MudText Typo="Typo.h5">@NewCustomerBom</MudText>
                        <MudProgressLinear Color="Color.Info" Value="100" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    DateTime FiscalYearEnd;
    DateTime FiscalYearStart;

    bool isMobile = false;

    int TotalUOM { get; set; }
    int TotalVendors { get; set; }
    int TotalProducts { get; set; }
    int TotalEmployees { get; set; }
    int TotalInventory { get; set; }
    int TotalCustomers { get; set; }
    int NewCustomerBom { get; set; }
    int UnpaidPurchaseInvoice { get; set; }
    int PendingPurchaseRequest { get; set; }
    int PartiallyPaidandOverdueSaleInvoice { get; set; }

    double TotalIncome { get; set; }
    double TotalProfit { get; set; }
    double TotalSpendings { get; set; }

    string? DeviceType { get; set; }

    List<InventoryData> InventoryDetails { get; set; } = new List<InventoryData>();

    protected override async void OnInitialized()
    {
        SetCurrentFiscalYear();
        await LoadData();
        StateHasChanged();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private async Task LoadData()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            try
            {
                TotalCustomers = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM Customer").FirstOrDefault();
                var stockData = await db.QueryAsync<dynamic>("SELECT it.ItemName AS Item, s.Quantity FROM Stock s inner join Items it on s.ItemID = it.ItemCode ORDER BY it.ItemName");
                TotalUOM = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM UOM WHERE Status = 'Enabled'").FirstOrDefault();
                TotalProducts = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM Items WHERE Status = 'Enabled'").FirstOrDefault();
                TotalVendors = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM Vendor WHERE Status = 'Enabled'").FirstOrDefault();
                TotalEmployees = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM Users WHERE Status = 'Enabled' AND Role != 'Customer'").FirstOrDefault();
                TotalIncome = db.Query<double>(@"SELECT COALESCE(SUM(TotalAmount), 0) FROM SaleInvoice WHERE Status = 'Paid' AND CreationDate >= @FiscalYearStart AND CreationDate < @FiscalYearEnd",
                    new { FiscalYearStart = FiscalYearStart.ToString("yyyy-MM-dd"), FiscalYearEnd = FiscalYearEnd.ToString("yyyy-MM-dd") }).FirstOrDefault();
                TotalSpendings = db.Query<double>(@"SELECT COALESCE(SUM(TotalAmount), 0) FROM PurchaseInvoice WHERE Status = 'Paid' AND CreationDate >= @FiscalYearStart AND CreationDate < @FiscalYearEnd",
                    new { FiscalYearStart = FiscalYearStart.ToString("yyyy-MM-dd"), FiscalYearEnd = FiscalYearEnd.ToString("yyyy-MM-dd") }).FirstOrDefault();
                UnpaidPurchaseInvoice = db.Query<int>(@"SELECT COALESCE(COUNT(*), 0) FROM PurchaseInvoice WHERE Status = 'Unpaid' AND CreationDate >= @FiscalYearStart AND CreationDate < @FiscalYearEnd",
                    new { FiscalYearStart = FiscalYearStart.ToString("yyyy-MM-dd"), FiscalYearEnd = FiscalYearEnd.ToString("yyyy-MM-dd") }).FirstOrDefault();
                PendingPurchaseRequest = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM PurchaseRequest WHERE Status = 'Pending'").FirstOrDefault();
                NewCustomerBom = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM BOM WHERE IsActive = 'true' AND TYPE = 'Customer'").FirstOrDefault();
                PartiallyPaidandOverdueSaleInvoice = db.Query<int>("SELECT COALESCE(COUNT(*), 0) FROM SaleInvoice WHERE Status = 'Partially Paid' OR Status = 'Overdue'").FirstOrDefault();
                var monthlySalesData = await db.QueryAsync<dynamic>(@"SELECT FORMAT(si.CreationDate, 'yyyy-MM') AS Month, COALESCE(SUM(Amount), 0) AS TotalSales FROM SI_Item si
                inner join SaleInvoice s on s.SalesInvoiceID = si.SalesInvoiceID WHERE IsPaid = 1 AND si.CreationDate >= @FiscalYearStart AND si.CreationDate < @FiscalYearEnd GROUP BY FORMAT(si.CreationDate, 'yyyy-MM') ORDER BY Month",
                    new { FiscalYearStart = FiscalYearStart.ToString("yyyy-MM-dd"), FiscalYearEnd = FiscalYearEnd.ToString("yyyy-MM-dd") });

                TotalProfit = TotalIncome - TotalSpendings;

                InventoryDetails = stockData.Select(data => new InventoryData
                    {
                        Item = data.Item,
                        Quantity = (int)data.Quantity
                    }).ToList();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private void SetCurrentFiscalYear()
    {
        var currentYear = DateTime.Now.Year;
        var currentMonth = DateTime.Now.Month;

        if (currentMonth >= 6)
        {
            FiscalYearStart = new DateTime(currentYear, 6, 1);
            FiscalYearEnd = new DateTime(currentYear + 1, 6, 1);
        }
        else
        {
            FiscalYearStart = new DateTime(currentYear - 1, 6, 1);
            FiscalYearEnd = new DateTime(currentYear, 6, 1);
        }
    }

    public async void DownloadReport()
    {
        Snackbar.Add("Generating Report", Severity.Info);
        try
        {
            var PdfByte = await select.GetPdfAsync("Inventory Report");

            if (isMobile)
            {
                HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
                await Select.OpenPdfAsync(PdfByte, "Inventory Report.pdf");
            }
            else
            {
                var base64Pdf = Convert.ToBase64String(PdfByte);
                var pdfDataUrl = $"data:application/pdf;base64,{base64Pdf}";
                await JSRuntime.InvokeVoidAsync("downloadFile", pdfDataUrl, $"Inventory Report {DateTime.Now.ToString("MM/dd/yyyy")}.pdf");
                Snackbar.Add("Report Downloaded", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo("/item/", forceLoad: true);
    }

    public void NavigateCustomer()
    {
        NavigationManager.NavigateTo("/customers/", forceLoad: true);
    }

    public void NavigateVendor()
    {
        NavigationManager.NavigateTo("/vendors/", forceLoad: true);
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/", forceLoad: true);
    }

    public void NavigateEmployees()
    {
        NavigationManager.NavigateTo("/users/", forceLoad: true);
    }

    public void NavigateBOM()
    {
        if (NewCustomerBom > 0)
        {
            NavigationManager.NavigateTo($"/billofmaterials/{"custom-configurations"}", forceLoad: true);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("No New Custom Configurations", Severity.Info);
        }
    }

    public void NavigatePR()
    {
        if (PendingPurchaseRequest > 0)
        {
            NavigationManager.NavigateTo($"/purchaserequisitions/{"pending"}", forceLoad: true);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("No Pending Purchase Requests", Severity.Info);
        }
    }

    public void NavigatePI()
    {
        if (UnpaidPurchaseInvoice > 0)
        {
            NavigationManager.NavigateTo($"/purchaseinvoices/{"unpaid"}", forceLoad: true);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("No Unpaid Purchase Invoices", Severity.Info);
        }
    }

    public void NavigateSI()
    {
        if (PartiallyPaidandOverdueSaleInvoice > 0)
        {
            NavigationManager.NavigateTo($"/saleinvoices/{"unpaid|overdue"}", forceLoad: true);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("No Partially Paid or Overdue Sale Invoices", Severity.Info);
        }
    }

    public class InventoryData
    {
        public string Item { get; set; }
        public int Quantity { get; set; }
    }
}