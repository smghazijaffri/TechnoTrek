@using Syncfusion.Blazor.Charts

@layout AdminLayout;
@inject Connection con;

<MudGrid>
    <MudItem xs="12" lg="4">
        <MudCard>
            <MudCardHeader Class="d-flex justify-content-center">
                <MudText Typo="Typo.h6">Sales Comparison</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (SalesOrderDetails != null && SalesOrderDetails.Any())
                {
                    <SfAccumulationChart>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@SalesOrderDetails" XName="Item" YName="TotalQuantitySold" Name="Item" InnerRadius="40%">
                                <AccumulationDataLabelSettings Visible="true" Name="TotalQuantitySold"></AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>

                        <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    </SfAccumulationChart>
                }
                else
                {
                    <p>Loading data...</p>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>

   @*  <MudItem xs="12" lg="4">
        <MudCard Class="text-center">
            <h6 class="m-2">Top 10 Selling Items</h6>
            <MudSimpleTable Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Name</th>
                        <th>Sold</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, item) in TopSellingItems.Select((value, i) => (i + 1, value)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@item.ItemName</td>
                            <td>@item.TotalQuantitySold</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudCard>
    </MudItem> *@
</MudGrid>

<MudGrid Class="mt-3 shadow-lg border border-secondary-subtle">
    @if (MonthlySalesDetails != null && MonthlySalesDetails.Any())
    {
        <SfChart Title="Monthly Sales">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>

            <ChartPrimaryYAxis LabelFormat="@YAxisFormat"></ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@MonthlySalesDetails" XName="Month" YName="TotalSales" Opacity="0.5" DashArray="5,5" Fill="blue" Type="ChartSeriesType.Bar">
                    <ChartSeriesBorder Width="2" Color="red"></ChartSeriesBorder>
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">No data...</MudText>
    }
</MudGrid>

@code {
    [Parameter]
    public DateTime FiscalYearEnd { get; set; }

    [Parameter]
    public DateTime FiscalYearStart { get; set; }

    string YAxisUnit = "";
    string YAxisFormat => YAxisUnit switch
    {
        "M" => "#,##0,,M",
        "K" => "#,##0,K",
        _ => "#,##0"
    };

    List<dynamic> TopSellingItems = new List<dynamic>();
    List<SalesData> MonthlySalesDetails { get; set; } = new List<SalesData>();
    List<SalesOrderData> SalesOrderDetails { get; set; } = new List<SalesOrderData>();

    protected override async void OnInitialized()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);
        var saleOrderData = await db.QueryAsync<dynamic>("SELECT it.ItemName AS Item, COALESCE(SUM(sot.Quantity), 0) AS TotalQuantitySold FROM SO_Item sot inner join Items it on sot.Item = it.ItemCode GROUP BY it.ItemName ORDER BY TotalQuantitySold DESC");
        var queryResult = await db.QueryAsync<dynamic>("SELECT TOP 10 so.Item, COALESCE(SUM(so.Quantity), 0) AS TotalQuantitySold, it.ItemName FROM SO_Item so inner join Items it on it.ItemCode = so.Item GROUP BY so.Item, it.ItemName ORDER BY TotalQuantitySold DESC");
        var monthlySalesData = await db.QueryAsync<dynamic>(@"SELECT FORMAT(si.CreationDate, 'yyyy-MM') AS Month, COALESCE(SUM(Amount), 0) AS TotalSales FROM SI_Item si
                inner join SaleInvoice s on s.SalesInvoiceID = si.SalesInvoiceID WHERE IsPaid = 1 AND si.CreationDate >= @FiscalYearStart AND si.CreationDate < @FiscalYearEnd GROUP BY FORMAT(si.CreationDate, 'yyyy-MM') ORDER BY Month",
                    new { FiscalYearStart = FiscalYearStart.ToString("yyyy-MM-dd"), FiscalYearEnd = FiscalYearEnd.ToString("yyyy-MM-dd") });

        TopSellingItems = queryResult.ToList();

        SalesOrderDetails = saleOrderData.Select(data => new SalesOrderData
            {
                Item = data.Item,
                TotalQuantitySold = data.TotalQuantitySold
            }).ToList();

        var salesAmounts = monthlySalesData.Select(data => (double)data.TotalSales).ToArray();

        if (salesAmounts.Any())
        {
            double yAxisMax = salesAmounts.Max();
            string yAxisUnit = string.Empty;

            if (yAxisMax >= 1_000_000)
            {
                yAxisUnit = "M";
                yAxisMax /= 1_000_000;
                salesAmounts = salesAmounts.Select(s => s / 1_000_000).ToArray();
            }
            else if (yAxisMax >= 1_000)
            {
                yAxisUnit = "K";
                yAxisMax /= 1_000;
                salesAmounts = salesAmounts.Select(s => s / 1_000).ToArray();
            }

            YAxisUnit = yAxisUnit;
        }
        else
        {
            YAxisUnit = string.Empty;
        }

        MonthlySalesDetails = monthlySalesData.Select(data => new SalesData
            {
                Month = DateTime.Parse($"{data.Month}-01").ToString("MMMM"),
                TotalSales = (double)data.TotalSales
            }).ToList();

        StateHasChanged();
        base.OnInitialized();
    }

    public class SalesOrderData
    {
        public string Item { get; set; }
        public double TotalQuantitySold { get; set; }
    }

    public class SalesData
    {
        public string Month { get; set; }
        public double TotalSales { get; set; }
    }
}
