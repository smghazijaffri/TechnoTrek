@page "/item/new-item"
@page "/item/{ItemID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject ItemUOM itemuom;
@inject ItemClass items;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject Compatibility compatibility;
@inject AlternateItem alternateitem;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsEnabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
            }
            @if (IsDisabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (IsEnabled)
        {
            <div class="dropdown m-1" id="dropdown">
                <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                    <li class="btn ms-2 m-1 text-sm-start" @onclick="CreateSE">Stock Entry</li>
                </ul>
            </div>
        }
        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveUOM">
            Save
        </button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Name and Type</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden>
            <label class="form-label">Item Code</label>
            <input type="text" class="form-control" @bind="items.ItemCode" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Item Name</label>
            <input type="text" @bind="items.ItemName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Item Type</label>
            <select class="form-select" aria-label="Item Type" @bind="items.ItemType">
                <option value=""></option>
                <option value="Accessories">Accessories</option>
                <option value="Cooler">Cooler</option>
                <option value="Gaming Case">Gaming Case</option>
                <option value="Graphics Card">Graphics Card</option>
                <option value="Laptop">Laptop</option>
                <option value="Memory">Memory</option>
                <option value="Motherboard">Motherboard</option>
                <option value="Processor">Processor</option>
                <option value="Power Supply">Power Supply</option>
                <option value="Storage">Storage</option>
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label">Lead Time in Days</label>
            <input type="text" inputmode="numeric" id="num" @bind="items.LeadTime" class="form-control">
            <label class="form-label">Average time taken by the supplier to deliver</label>
        </div>
        <div class="col-md-6">
            <MudCheckBox @bind-Value="@Disabled" Size="Size.Small" Dense="true" Label="Disabled"></MudCheckBox>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Description</h5>
    <form class="" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6 p-3 mb-2">
            <label class="form-label">Brand</label>
            <input type="text" class="form-control" @bind="items.Brand">
        </div>
        <div class="col-md-6 p-3 mb-2">
            <label class="form-label">Product Page Link</label>
            <input type="text" @bind="items.Description" class="form-control"></input>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Units of Measure</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th hidden>
                        RowID
                    </th>
                    <th class="col col-auto">
                        Unit of Measure
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < ItemUOM.Count; index++)
                {
                    var item = ItemUOM[index];
                    var rowindex = index;
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" />
                                @(index + 1)
                            </div>
                        </td>
                        <td hidden>
                            <input type="text" class="me-1" @bind="item.RowID" />
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowindex)">
                                <input type="text" id="Item" @onclick="() => DropDownUOM.ToggleDropdown(rowindex)" @bind="UOMName[rowindex]"
                                       placeholder="Select Unit of Measure" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowindex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownUOM.HandleDropdownFocusOut(rowindex)"
                                    style="max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowindex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowindex)">
                                            @if (DropDownUOM.ListItems[rowindex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowindex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.UOMID" @onclick="() => SelectUOMOption(option, rowindex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow">Delete</button>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light" style="max-height: 300px; overflow-y: auto;">
            <h5>Compatability</h5>
            <label class="form-label">Check Compatible Items</label>
            <form class="" @oninput="HandleFormInput" autocomplete="off">
                @foreach (var item in itemsFromDatabase)
                {
                    @if (item.ItemType != "Accessories" || item.ItemType != "Laptop")
                    {
                        @if (item.ItemCode != items.ItemCode)
                        {
                            @if (item.ItemType == "Memory" || item.ItemType == "Storage")
                            {
                                <div>
                                    <MudCheckBox @bind-Value="@item.Compatible" Color="Color.Info" Label="@item.ItemName"></MudCheckBox>
                                </div>
                            }
                            else
                            {
                                if (item.ItemType != items.ItemType)
                                {
                                    <div>
                                        <MudCheckBox @bind-Value="@item.Compatible" Color="Color.Info" Label="@item.ItemName"></MudCheckBox>
                                    </div>
                                }
                            }
                        }
                    }
                }
            </form>
        </div>
    </div>
    <div class="col">
        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light" style="max-height: 300px; overflow-y: auto;">
            <h5>Alternatives</h5>
            <label class="form-label">Check Alternate Items</label>
            <form class="" @oninput="HandleFormInput" autocomplete="off">
                @foreach (var item in itemsFromDatabase)
                {
                    @if (item.ItemCode != items.ItemCode)
                    {
                        @if (item.ItemType == items.ItemType)
                        {
                            <div>
                                <MudCheckBox @bind-Value="@item.Alternate" Color="Color.Info" Label="@item.ItemName"></MudCheckBox>
                            </div>
                        }
                    }
                }
            </form>
        </div>
    </div>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#num').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#num').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? ItemID { get; set; }

    string? header = "New Item";
    string pattern = @"^(http|https):\/\/[^\s""]+$";

    bool IsSaving = true;
    bool Disabled = false;
    bool IsEnabled = false;
    bool IsDisabled = false;
    bool IsAnyItemSelected => ItemUOM.Any(item => item.Selected);

    DropDown DropDownUOM = new DropDown();

    List<int> IsDelete = new List<int>();
    List<int> ItemDelete = new List<int>();
    List<string> UOMName = new List<string>();
    List<ItemUOM> ItemUOM = new List<ItemUOM>();
    List<string> AlternateID = new List<string>();

    IEnumerable<ItemClass> itemsFromDatabase = new List<ItemClass>();

    protected override async void OnInitialized()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            itemsFromDatabase = await db.QueryAsync<ItemClass>("SELECT * FROM Items WHERE ItemType != 'Accessories' AND ItemType != 'Laptop' ORDER BY ItemCode");
            try
            {
                if (ItemID != null)
                {
                    items = db.QueryFirstOrDefault<ItemClass>("Select * from Items where ItemCode= @ItemID", new { ItemID = ItemID });
                    ItemUOM = db.Query<ItemUOM>("Select iu.* from ItemUOM iu inner join Items it on it.ItemCode = iu.ItemID where iu.ItemID = @ItemID", new { ItemID = ItemID }).ToList();
                    UOMName = db.Query<string>("select UOMName from ItemUOM it inner join UOM iu on it.UOMID = iu.UOMID where ItemID = @ItemID", new { ItemID = ItemID }).ToList();
                    itemsFromDatabase = db.Query<ItemClass>(@"SELECT
                                                it.*,
                                                MAX(CASE WHEN ic.ItemID = @ItemID THEN 1 ELSE 0 END) AS Compatible,
                                                MAX(CASE WHEN ia.ItemID = @ItemID THEN 1 ELSE 0 END) AS Alternate
                                            FROM
                                                Items it
                                            LEFT JOIN
                                                ItemCompability ic ON it.ItemCode = ic.CompatibilityID
                                            LEFT JOIN
                                                ItemAlternate ia ON it.ItemCode = ia.AlternateID
                                            GROUP BY
                                            it.ItemCode,
                                                   it.ItemName,
                                                   it.ItemType,
                                                   it.Description,
                                                   it.LeadTime,
                                                   it.Status,
                                                   it.CreationDate,
                                                   it.Brand", new { ItemID = ItemID });
                    if (items == null)
                        NavigationManager.NavigateTo("/item/");
                    header = items.ItemName;
                    if (items.Status == PurchaseStatuses.Enabled)
                    {
                        IsEnabled = true;
                        IsSaving = false;
                    }
                    else if (items.Status == PurchaseStatuses.Disabled)
                    {
                        Disabled = true;
                        IsDisabled = true;
                        IsSaving = false;
                    }
                }
                else
                {
                    AddRow();
                }
                DropDownUOM.Options = db.Query<Option>("select UOMName as Text, UOMID as Value from UOM").ToList();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Clear();
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

        base.OnInitialized();
    }

    public string createItem()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateItem();
                if (validate != null)
                {
                    return validate;
                }

                header = items.ItemName;

                if (!Disabled)
                {
                    items.Status = PurchaseStatuses.Enabled;
                    IsSaving = false;
                }
                else if (Disabled)
                {
                    items.Status = PurchaseStatuses.Disabled;
                    IsSaving = false;
                }


                var compatibleItems = itemsFromDatabase.Where(item => item.Compatible).Select(item => item.ItemCode).ToList();
                var AlternateItems = itemsFromDatabase.Where(item => item.Alternate).Select(item => item.ItemCode).ToList();

                DataTable dataTable = new DataTable("UOMItem");

                dataTable.Columns.Add("ItemID", typeof(string));
                dataTable.Columns.Add("UOMID", typeof(string));
                dataTable.Columns.Add("RowID", typeof(int));

                foreach (var item in ItemUOM)
                {
                    DataRow row = dataTable.NewRow();
                    row["RowID"] = item.RowID;
                    row["ItemID"] = items.ItemCode;
                    row["UOMID"] = item.UOMID;
                    dataTable.Rows.Add(row);
                }
                DataTable DeleteTable = new DataTable("UOMDelete");
                DeleteTable.Columns.Add("DeleteItemUOM", typeof(int));
                foreach (int deleteItem in ItemDelete)
                {
                    DataRow row = DeleteTable.NewRow();
                    row["DeleteItemUOM"] = deleteItem;
                    DeleteTable.Rows.Add(row);
                }
                DataTable CompTable = Select.ConvertListToDataTable(compatibleItems);
                DataTable AltTable = Select.ConvertListToDataTable(AlternateItems);

                var parameters = new DynamicParameters(items);
                parameters.Add("@ItemUOM", dataTable.AsTableValuedParameter("UOMItem"));
                parameters.Add("@ItemUOMDelete", DeleteTable.AsTableValuedParameter("UOMDelete"));
                parameters.Add("@ItemCompatible", CompTable.AsTableValuedParameter("CompatibleItems"));
                parameters.Add("@AlternateItems", AltTable.AsTableValuedParameter("AlternateItems"));
                OutputClass output = new OutputClass();
                output = crud.CRD3(parameters, "Add_Item", outputMessage: true, errorMessage: true);
                items.ItemCode = output.Output;
                string ErrorMessage = output.ErrorMessage;
                if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    return ErrorMessage;
                }

                ItemDelete.Clear();

                if (!Disabled) { IsEnabled = true; IsDisabled = false; IsSaving = false; }
                if (Disabled) { IsEnabled = false; IsDisabled = true; IsSaving = false; }
                if (ItemID == null)
                {
                    NavigationManager.NavigateTo($"/item/{items.ItemCode}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "Item Created Successfully";
                }
                else if (IsEnabled)
                {
                    return "Item Enabled Successfully";
                }
                else if (IsDisabled)
                {
                    return "Item Disabled Successfully";
                }
                else
                {
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveUOM()
    {
        string notification = createItem();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateItem()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            int countname = 0;
            countname = db.QueryFirstOrDefault<int>("select count(1) from Items where ItemName = @ItemName and ItemCode != @ItemID", new { ItemName = items.ItemName, ItemID = items.ItemCode });
            if (countname > 0)
            {
                return $"Item Already Exists";
            }

            if (string.IsNullOrWhiteSpace(items.ItemName)) { return $"Please enter Item Name"; }
            if (string.IsNullOrWhiteSpace(items.ItemType)) { return $"Please enter Item Type"; }
            if (items.LeadTime <= 0) { return $"Lead Time cannot be less than or equal to 0"; }
            if (string.IsNullOrWhiteSpace(items.Brand)) { return $"Please enter Item Brand"; }
            if (string.IsNullOrWhiteSpace(items.Description)) { return $"Please enter Product Link"; }
            // if (Regex.IsMatch(items.Description, pattern)) { return $"Please enter a valid Product Link"; }
            int count = 0;
            if (ItemUOM.Count > 0)
            {
                foreach (var IT in ItemUOM)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(IT.UOMID)) return $"Please Enter UOM on Row:" + count;
                }
            }
            else
            {
                return $"There are no UOMs";
            }

            return null;
        }
    }

    private void HandleFormInput()
    {
        if (IsEnabled || (IsDisabled && Disabled))
        {
            IsSaving = true;
            Disabled = false;
            IsDisabled = false;
            IsEnabled = false;
            StateHasChanged();
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        ItemUOM.Add(new ItemUOM
            {
                ItemID = "",
            });
        UOMName.Add("");
    }

    private void DeleteRow()
    {
        for (int i = ItemUOM.Count - 1; i >= 0; i--)
        {
            if (ItemUOM[i].Selected)
            {
                if (ItemUOM[i].RowID != 0)
                {
                    IsDelete.Add(ItemUOM[i].RowID);
                }
                ItemUOM.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
                UOMName.RemoveAt(i);
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == ItemUOM[rowIndex].UOMID))
            {
                ItemUOM[rowIndex].UOMID = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        if (!ItemUOM.Any(option => option.UOMID == options.Value) && UOMName[rowIndex] != options.Text)
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                ItemUOM[rowIndex].UOMID = options.Value;
                HandleFormInput();
            }
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    private void CreateSE(MouseEventArgs e)
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from Items where ItemCode = @ItemCode", new { ItemCode = items.ItemCode });

        if (GetStatus == PurchaseStatuses.Disabled)
        {
            Snackbar.Clear();
            Snackbar.Add("Cannot create Stock Entry, Item is " + GetStatus, Severity.Error);
            return;
        }
        else if (GetStatus == null)
        {
            Snackbar.Clear();
            Snackbar.Add("ItemCode does not exist", Severity.Error);
            return;
        }

        _protectedLocalStore.SetLocalAsync("ItemCode", items.ItemCode);
        NavigationManager.NavigateTo("/stock-entry/new-stock-entry");
    }
}
