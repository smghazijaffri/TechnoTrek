@page "/uom/new-uom"
@page "/uom/{UOMID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Connection con;
@inject UnitofMeasure uom;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsEnabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
            }
            @if (IsDisabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveVendor">
            Save
        </button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@IsSaving">
            <label class="form-label">UOM ID</label>
            <input type="text" class="form-control" @bind="uom.UOMID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">UOM Name</label>
            <input type="text" @bind="uom.UOMName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Default Quantity</label>
            <input type="text" id="quantity" inputmode="numeric" @bind="uom.StockQuantity" class="form-control">
        </div>
        <div class="col-md-6">
            <MudCheckBox @bind-Value="@Disabled" Size="Size.Small" Dense="true" Label="Disabled"></MudCheckBox>
        </div>
    </form>
</div>

<script>
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? UOMID { get; set; }

    string header = "New UOM";

    bool IsSaving = true;
    bool Disabled = false;
    bool IsEnabled = false;
    bool IsDisabled = false;

    protected override void OnInitialized()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (UOMID != null)
                {
                    uom = db.QueryFirstOrDefault<UnitofMeasure>("Select * from UOM where UOMID = @UOMID", new { UOMID = UOMID });
                    if (uom == null) NavigationManager.NavigateTo("/uom/");

                    header = uom.UOMName;

                    if (uom.Status == PurchaseStatuses.Enabled)
                    {
                        IsEnabled = true;
                        IsSaving = false;
                    }
                    else if (uom.Status == PurchaseStatuses.Disabled)
                    {
                        Disabled = true;
                        IsDisabled = true;
                        IsSaving = false;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public string createUOM()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateVendor();
                if (validate != null)
                {
                    return validate;
                }

                header = uom.UOMName;

                if (IsEnabled)
                {
                    uom.Status = PurchaseStatuses.Enabled;
                    IsSaving = false;
                }
                else if (IsDisabled)
                {
                    uom.Status = PurchaseStatuses.Disabled;
                    IsSaving = false;
                }
                var parameter = new DynamicParameters(uom);
                OutputClass output = crud.CRD3(parameter, "CreateUOM",errorMessage:true,outputMessage:true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                uom.UOMID = output.Output;

                if (UOMID == null)
                {
                    NavigationManager.NavigateTo($"/uom/{uom.UOMID}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "UOM Created Successfully";
                }
                else if (IsEnabled)
                {
                    return "UOM Enabled Successfully";
                }
                else if (IsDisabled)
                {
                    return "UOM Disabled Successfully";
                }
                else
                {
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveVendor()
    {
        string notification = createUOM();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateVendor()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!Disabled) { IsEnabled = true; IsDisabled = false; IsSaving = false; }
            if (Disabled) { IsEnabled = false; IsDisabled = true; IsSaving = false; }

            if (string.IsNullOrWhiteSpace(uom.UOMName)) { return $"Please enter UOM Name"; }
            if (string.IsNullOrWhiteSpace((uom.StockQuantity).ToString()) || uom.StockQuantity == 0) { return $"Please enter Default Quantity"; }

            return null;
        }
    }

    private void HandleFormInput()
    {
        if (IsEnabled || (IsDisabled && Disabled))
        {
            IsSaving = true;
            Disabled = false;
            IsDisabled = false;
            IsEnabled = false;
            StateHasChanged();
        }
    }
}
