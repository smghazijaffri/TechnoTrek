@page "/customers/new-customer"
@page "/customers/{CustomerID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Connection con;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveCustomer">
            Save
        </button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Name and Type</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden>
            <label class="form-label">Customer ID</label>
            <input type="text" class="form-control" @bind="customer.CustomerID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer Name</label>
            <input type="text" @bind="customer.Name" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer Address</label>
            <input type="text" @bind="customer.Address" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Contact Number</label>
            <input type="text" class="form-control" @bind="customer.Contact">
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer Type</label>
            <select class="form-select" aria-label="Item Type" @bind="customer.CustomerType">
                <option value="">Select Customer</option>
                <option value="Bulk">Bulk</option>
                <option value="Retail">Retail</option>
            </select>
        </div>

    </form>
</div>

@code {
    [Parameter]
    public string? CustomerID { get; set; }
    private string header = "New Customer";

    protected override void OnInitialized()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (CustomerID != null)
                {
                    customer = db.QueryFirstOrDefault<Customer>("Select * from Customer where CustomerID = @CustomerID", new { CustomerID = CustomerID });
                    if (customer == null) NavigationManager.NavigateTo("/customers/");
                    header = customer.Name;
                }
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public string createCustomer()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateCustomer();
                if (validate != null)
                {
                    return validate;
                }

                header = customer.Name;

                OutputClass output = new OutputClass();
                output = crud.CRD2(customer, "CreateCustomer_Admin", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                else
                {
                    customer.CustomerID = output.Output;
                }

                if (CustomerID == null)
                {
                    NavigationManager.NavigateTo($"/customers/{customer.CustomerID}", forceLoad: true);
                }

                return "Customer Created Successfully";
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveCustomer()
    {
        string notification = createCustomer();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateCustomer()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (string.IsNullOrWhiteSpace(customer.Name)) { return $"Please enter Customer Name"; }
            if (string.IsNullOrWhiteSpace(customer.Address)) { return $"Please enter Customer Address"; }
            if (string.IsNullOrWhiteSpace(customer.Contact)) { return $"Please enter Customer Contact"; }
            if (string.IsNullOrWhiteSpace(customer.CustomerType)) { return $"Please select Customer Type"; }

            if (customer.CustomerID != null)
            {
                int countcustomerContact = db.QueryFirstOrDefault<int>("Select Count(1) from Customer where CustomerID != @CustomerID and Contact = @Contact", new { CustomerID = customer.CustomerID, Contact = customer.Contact });
                if (countcustomerContact > 0)
                {
                    return "This Contact is already in use";
                }
            }

            return null;
        }
    }

    private void HandleFormInput()
    {
        StateHasChanged();
    }
}
