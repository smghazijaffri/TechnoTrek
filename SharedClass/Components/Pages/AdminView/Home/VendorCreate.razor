@page "/vendors/new-vendor"
@page "/vendors/{VendorID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Vendor vendor;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsEnabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
            }
            @if (IsDisabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveVendor">
            Save
        </button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Name and Type</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@IsSaving">
            <label class="form-label">Vendor ID</label>
            <input type="text" class="form-control" @bind="vendor.VendorID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Name</label>
            <input type="text" @bind="vendor.VendorName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Group</label>
            <input type="text" @bind="vendor.VendorGroup" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Type</label>
            <select class="form-select" aria-label="Item Type" @bind="vendor.VendorType">
                <option value=""></option>
                <option value="Company">Company</option>
                <option value="Individual">Individual</option>
            </select>
        </div>
        <div class="col-md-6">
            <MudCheckBox @bind-Value="@Disabled" Size="Size.Small" Dense="true" Label="Disabled"></MudCheckBox>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Address</label>
            <input type="text" class="form-control" @bind="vendor.Address">
        </div>
        <div class="col-md-6">
            <label class="form-label">Contact Number</label>
            <input type="text" class="form-control" @bind="vendor.Contact">
        </div>
        <div class="col-md-6">
            <label class="form-label">Email</label>
            <input type="email" class="form-control" @bind="vendor.Email">
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string? VendorID { get; set; }

    string header = "New Vendor";

    bool IsSaving = true;
    bool Disabled = false;
    bool IsEnabled = false;
    bool IsDisabled = false;
    bool ReadonlyHidden { get { return IsEnabled || IsDisabled; } }

    protected override void OnInitialized()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (VendorID != null)
                {
                    vendor = db.QueryFirstOrDefault<Vendor>("Select * from Vendor where VendorID = @VendorID", new { VendorID = VendorID });
                    if (vendor == null)
                        NavigationManager.NavigateTo("/vendors/");
                    header = vendor.VendorName;
                    if (vendor.Status == PurchaseStatuses.Enabled)
                    {
                        IsEnabled = true;
                        IsSaving = false;
                    }
                    else if (vendor.Status == PurchaseStatuses.Disabled)
                    {
                        Disabled = true;
                        IsDisabled = true;
                        IsSaving = false;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public string createVendor()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateVendor();
                if (validate != null)
                {
                    return validate;
                }

                header = vendor.VendorName;

                if (IsEnabled)
                {
                    vendor.Status = PurchaseStatuses.Enabled;
                    IsSaving = false;
                }
                else if (IsDisabled)
                {
                    vendor.Status = PurchaseStatuses.Disabled;
                    IsSaving = false;
                }

                var paramter = new DynamicParameters(vendor);
                OutputClass output = crud.CRD3(paramter, "CreateVendor", errorMessage:true,outputMessage:true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                vendor.VendorID = output.Output;
                if (VendorID == null)
                {
                    NavigationManager.NavigateTo($"/vendors/{vendor.VendorID}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "Vendor Created Successfully";
                }
                else if (IsEnabled)
                {
                    return "Vendor Enabled Successfully";
                }
                else if (IsDisabled)
                {
                    return "Vendor Disabled Successfully";
                }
                else
                {
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveVendor()
    {
        string notification = createVendor();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateVendor()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!Disabled) { IsEnabled = true; IsDisabled = false; IsSaving = false; }
            if (Disabled) { IsEnabled = false; IsDisabled = true; IsSaving = false; }

            if (string.IsNullOrWhiteSpace(vendor.VendorName)) { return $"Please enter Vendor Name"; }
            if (string.IsNullOrWhiteSpace(vendor.VendorGroup)) { return $"Please enter Vendor Group"; }
            if (string.IsNullOrWhiteSpace(vendor.VendorType)) { return $"Please enter Vendor Type"; }
            if (string.IsNullOrWhiteSpace(vendor.Address)) { return $"Please enter Vendor Address"; }
            if (string.IsNullOrWhiteSpace(vendor.Contact)) { return $"Please enter Vendor Contact"; }
            if (string.IsNullOrWhiteSpace(vendor.Email)) { return $"Please enter Vendor Email"; }
            if (vendor.VendorID != null)
            {
                int countvendorEmail = db.QueryFirstOrDefault<int>("Select Count(1) from Vendor where VendorID != @VendorID and Email = @Email", new { VendorID = vendor.VendorID, Email = vendor.Email });
                if (countvendorEmail == 0)
                {
                    return "This Email is already in use";
                }
                int countvendorContact = db.QueryFirstOrDefault<int>("Select Count(1) from Vendor where VendorID != @VendorID and Contact = @Contact", new { VendorID = vendor.VendorID, Contact = vendor.Contact });
                if (countvendorEmail == 0)
                {
                    return "This Contact is already in use";
                }
            }
            if (string.IsNullOrWhiteSpace(vendor.Email)) { return $"Please enter Vendor Email"; }

            return null;
        }
    }

    private void HandleFormInput()
    {
        if (IsEnabled || (IsDisabled && Disabled))
        {
            IsSaving = true;
            Disabled = false;
            IsDisabled = false;
            IsEnabled = false;
            StateHasChanged();
        }
    }
}