@page "/users/createuser";
@page "/users/{UserID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Users users;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsEnabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
            }
            @if (IsDisabled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SaveUser">
            Save
        </button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Basic Information</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="!@IsSaving">
            <label class="form-label">User ID</label>
            <input type="text" @bind="users.UserID" class="form-control" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Username</label>
            <input type="text" @bind="users.UserName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">First Name</label>
            <input type="text" @bind="users.FirstName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Last Name</label>
            <input type="text" @bind="users.LastName" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Password</label>
            <input type="text" @bind="users.UserPassword" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Role</label>
            <select class="form-select" aria-label="Role" @bind="users.Role">
                <option value=""></option>
                <option value="Administrator">Administrator</option>
                <option value="Purchase">Purchase</option>
                <option value="Sale">Sale</option>
                <option value="Production">Production</option>
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label"></label>
            <MudCheckBox @bind-Value="@Disabled" Size="Size.Small" Dense="true" Label="Disabled"></MudCheckBox>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>More Information</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Email</label>
            <input type="email" class="form-control" @bind="users.UserEmail">
        </div>
        <div class="col-md-6">
            <label class="form-label">Contact</label>
            <input type="text" class="form-control" @bind="users.UserPhone">
        </div>
        <div class="col-md-6">
            <label class="form-label">Birthday</label>
            <input type="date" class="form-control" @bind="users.Birthday">
        </div>
        <div class="col-md-6">
            <label class="form-label">Address</label>
            <input type="text" class="form-control" @bind="users.Address">
        </div>
        <div class="col-md-6">
            <label class="form-label">Identity #</label>
            <input type="text" placeholder="42310-1234567-8" class="form-control" @oninput="@(e => FormatIdentityNumber(e))" maxlength="15" @bind="users.UserIdentity">
        </div>
        <div class="col-md-6">
            <label class="form-label">Gender</label>
            <select class="form-select" aria-label="Gender" @bind="users.Gender">
                <option value=""></option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string? UserID { get; set; }

    string header = "New User";
    string? ValidationMessage { get; set; }
    string pattern = @"^\d{5}-\d{7}-\d{1}$";
    string passwordPattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$";

    bool IsSaving = true;
    bool Disabled = false;
    bool notAdmin = false;
    bool IsEnabled = false;
    bool IsDisabled = false;

    protected override void OnInitialized()
    {
        try
        {
            users.Birthday = DateTime.Today;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (UserID != null)
                {
                    users = db.QueryFirstOrDefault<Users>("Select * from Users where UserID = @UserID", new { UserID = UserID });
                    if (users == null) NavigationManager.NavigateTo("/users/");

                    if (users.Role != "Administrator") notAdmin = true;
                    header = users.FirstName + ' ' + users.LastName;

                    if (users.Status == PurchaseStatuses.Enabled)
                    {
                        IsEnabled = true;
                        IsSaving = false;
                    }
                    else if (users.Status == PurchaseStatuses.Disabled)
                    {
                        Disabled = true;
                        IsDisabled = true;
                        IsSaving = false;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public string createUser()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateUser();
                if (validate != null)
                {
                    return validate;
                }

                header = users.UserName;

                if (!Disabled)
                {
                    users.Status = PurchaseStatuses.Enabled;
                }
                else if (Disabled)
                {
                    users.Status = PurchaseStatuses.Disabled;
                }

                OutputClass output = new OutputClass();
                output = crud.CRD2(users, "CreateUpdateDeleteUser", outputMessage: true, errorMessage: true);

                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                else
                {
                    users.UserID = output.Output;
                }

                if (UserID == null)
                {
                    NavigationManager.NavigateTo($"/users/{users.UserID}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "User Created Successfully";
                }
                else if (!Disabled)
                {
                    return "User Enabled Successfully";
                }
                else if (Disabled)
                {
                    return "User Disabled Successfully";
                }
                else
                {
                    return "Error in saving request";
                }

                return "SignUp Successful";
            }
        }
        catch (Exception ex)
        {
            IsSaving = true;
            IsEnabled = false;
            IsDisabled = false;
            Disabled = false;
            return ex.Message;
        }
    }

    public void SaveUser()
    {
        string notification = createUser();
        if (notification.Contains("Successful"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateUser()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        if (string.IsNullOrWhiteSpace(users.UserName)) { return $"Please enter Username"; }
        if (string.IsNullOrWhiteSpace(users.FirstName)) { return $"Please enter First Name"; }
        if (string.IsNullOrWhiteSpace(users.LastName)) { return $"Please enter Last Name"; }
        if (string.IsNullOrWhiteSpace(users.UserPassword)) { return $"Please enter User Password"; }
        if (string.IsNullOrWhiteSpace(users.UserEmail)) { return $"Please enter User Email"; }
        if (string.IsNullOrWhiteSpace(users.UserPhone)) { return $"Please enter User Phone"; }
        if (string.IsNullOrWhiteSpace(users.Address)) { return $"Please enter User Address"; }
        if (string.IsNullOrWhiteSpace(users.UserIdentity)) { return $"Please enter User Identity"; }
        if (string.IsNullOrWhiteSpace((users.Birthday).ToString())) { return $"Please enter User Birthday"; }
        if (string.IsNullOrWhiteSpace(users.Gender)) { return $"Please enter User Gender"; }
        if (!Regex.IsMatch(users.UserPassword, passwordPattern))
        { return "Password must be at least 8 characters long, and include at least one uppercase letter, one lowercase letter, one digit, and one special character."; }
        if (!Regex.IsMatch(users.UserIdentity, pattern))
        { return "Invalid Identity Number format. Correct format is 42310-1234567-8."; }
        if (!IsAtLeast18YearsOld(users.Birthday)) { return "User must be at least 18 years old."; }

        if (db.ExecuteScalar<int>("SELECT COUNT(1) FROM Users WHERE UserName = @UserName", new { UserName = users.UserName }) > 0)
        {
            return "Username already exists.";
        }
        if (db.ExecuteScalar<int>("SELECT COUNT(1) FROM Users WHERE UserEmail = @UserEmail", new { UserEmail = users.UserEmail }) > 0)
        {
            return "User email already exists.";
        }
        if (db.ExecuteScalar<int>("SELECT COUNT(1) FROM Users WHERE UserPhone = @UserPhone", new { UserPhone = users.UserPhone }) > 0)
        {
            return "User phone already exists.";
        }
        if (db.ExecuteScalar<int>("SELECT COUNT(1) FROM Users WHERE UserIdentity = @UserIdentity", new { UserIdentity = users.UserIdentity }) > 0)
        {
            return "User identity already exists.";
        }

        return null;
    }

    private void HandleFormInput()
    {
        if (IsEnabled || (IsDisabled && Disabled))
        {
            IsSaving = true;
            Disabled = false;
            IsDisabled = false;
            IsEnabled = false;
            StateHasChanged();
        }
    }

    private void FormatIdentityNumber(ChangeEventArgs e)
    {
        var input = new string(e.Value.ToString().Where(char.IsDigit).ToArray());
        if (input.Length > 5)
        {
            input = input.Insert(5, "-");
        }
        if (input.Length > 13)
        {
            input = input.Insert(13, "-");
        }
        users.UserIdentity = input;
    }

    private bool IsAtLeast18YearsOld(DateTime birthday)
    {
        DateTime today = DateTime.Today;
        int age = today.Year - birthday.Year;

        if (birthday.Date > today.AddYears(-age)) age--;

        return age >= 18;
    }
}