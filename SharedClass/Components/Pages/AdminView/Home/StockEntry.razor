@page "/stock-entry/new-stock-entry"
@page "/stock-entry/{EntryID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject Stock_Entry stock;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (IsSubmitted)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Submitted</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsSubmitted)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePR">
                @GetSubmitButtonText()
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPR">
            <label class="form-label">Stock Entry ID</label>
            <input type="text" class="form-control" @bind="stock.StockID" readonly="@IsSubmitted">
        </div>
        <div class="col-md-6">
            <label class="form-label">Stock Entry Type</label>
            <select class="form-select" aria-label="Stock Entry Type" disabled="@IsSubmitted" @bind="SelectedEntryType">
                <option value="">Select Entry Type</option>
                <option value="Goods Receipt">Goods Receipt</option>
                <option value="Goods Issue">Goods Issue</option>
            </select>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px; min-width: 70px;">
                        Quantity
                    </th>
                    @if (!IsIssue)
                    {
                        <th class="col col-auto" style="width: 150px; min-width: 150px;" hidden="@Hiderate">
                            Basic Rate
                        </th>
                    }
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });

                    var rowIndex = index;
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                <b>@(index + 1)</b>
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" id="quantity" min="1" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        @if (!IsIssue)
                        {
                            <td hidden="@Hiderate"><input type="text" inputmode="numeric" class="form-control" id="quantity" @bind="item.BasicRate" readonly="@ReadonlyHidden" /></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? EntryID { get; set; }

    string? DeviceType { get; set; }
    string header = "Create Stock Entry";

    bool IsIssue = false;
    bool IsDraft = false;
    bool IsSaving = true;
    bool DisplayPR = true;
    bool isMobile = false;
    bool Hiderate = false;
    bool IsSubmitted = false;
    bool ReadonlyHidden { get { return IsSubmitted; } }
    bool IsAnyItemSelected => Items.Any(item => item.Selected);

    DropDown DropDownItem = new DropDown();

    List<int> IsDelete = new List<int>();
    List<string> ItemName = new List<string>();
    List<StockEntry_Items> Items = new List<StockEntry_Items>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        var ItemCode = string.Empty;
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "ItemCode"))
        {
            ItemCode = await _protectedLocalStore.GetLocalAsync<string>("ItemCode");
        }
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (EntryID != null)
            {
                stock = db.QueryFirstOrDefault<Stock_Entry>("select * from Stock_Entry where StockID = @StockID", new { StockID = EntryID });
                Items = db.Query<StockEntry_Items>("Select RowID, StockID, Item as Item, Quantity, BasicRate, CreationDate from StockEntry_Items where StockID = @StockID ", new { StockID = EntryID }).ToList();
                ItemName = db.Query<string>("SELECT I1.ItemName FROM StockEntry_Items SE INNER JOIN Items I1 ON SE.Item = I1.ItemCode WHERE SE.StockID = @StockID", new { StockID = EntryID }).ToList();
                if (stock == null || Items.Count == 0) NavigationManager.NavigateTo("/stock-entry/");
                if (stock.StockEntryType == "Goods Issue") IsIssue = true;
                DisplayPR = false;
                header = stock.StockEntryType;
                if (stock.Status == PurchaseStatuses.Submitted)
                {
                    IsSubmitted = true;
                    IsSaving = false;
                }
                else if (stock.Status == PurchaseStatuses.Draft)
                {
                    IsDraft = true;
                    IsSaving = false;
                }
            }
            else if (!string.IsNullOrWhiteSpace(ItemCode))
            {
                Items = db.Query<StockEntry_Items>("select ItemCode as Item, 1 as Quantity, 0 as BasicRate from Items where ItemCode = @ItemCode", new { ItemCode = ItemCode }).ToList();
                ItemName = db.Query<string>("Select ItemName from Items where ItemCode = @ItemCode", new { ItemCode = ItemCode }).ToList();
                stock.StockEntryType = "Goods Receipt";
                await _protectedLocalStore.SetLocalAsync("ItemCode", "");
            }
            else
            {
                AddRow();
            }

            DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items WHERE Status = 'Enabled'").ToList();
        }
        StateHasChanged();

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                stock.StockEntryType = SelectedEntryType;
                string validate = ValidateSE();
                if (validate != null)
                {
                    return validate;
                }

                header = stock.StockEntryType;

                if (IsSaving)
                {
                    stock.Status = ProductionStatus.Draft;
                }
                else if (IsDraft)
                {
                    stock.Status = ProductionStatus.Submitted;
                }
                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                DataTable ItemTable = Select.ItemTable();
                foreach (var PO in Items)
                {
                    ItemTable.Rows.Add(PO.RowID, PO.Item, PO.Quantity, null, PO.BasicRate, null, null);
                }
                var parameters = new DynamicParameters(stock);
                parameters.Add("@StockEntryItem", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteSTItems", Delete.AsTableValuedParameter("DeleteType"));


                OutputClass output = crud.CRD3(parameters, "Create_StockEntry", outputMessage: true, errorMessage: true);

                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                else
                {
                    stock.StockID = output.Output;
                }

                ToggleApproval();

                if (EntryID == null)
                {
                    NavigationManager.NavigateTo($"/stock-entry/{stock.StockID}", forceLoad: true);
                }

                if (IsDraft)
                {
                    return "Entry Saved Successfully";
                }

                else if (IsSubmitted)
                {
                    return "Stock Entry Submitted Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    private string SelectedEntryType
    {
        get => stock.StockEntryType;
        set
        {
            if (stock.StockEntryType != value)
            {
                stock.StockEntryType = value;

                changeEntryType();
            }
        }
    }

    public string ValidateSE()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (stock.StockID != null)
            {
                string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from Stock_Entry where StockID = @StockID", new { StockID = stock.StockID });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Submitted && IsSubmitted) return "Stock Entry has already been submitted changes cannot be done";
                }
                else
                {
                    return "Stock Entry ID does not exist";
                }
            }
            if (string.IsNullOrEmpty(stock.StockEntryType)) return $"Please Select Entry Type";
            int count = 0;
            foreach (var PR in Items)
            {
                count++;
                if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                if (PR.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";
                if (stock.StockEntryType == "Goods Receipt")
                {
                    if (PR.BasicRate <= 0 || string.IsNullOrWhiteSpace((PR.BasicRate).ToString())) return $"Row {count}: Rate cannot be less than or equal to 0";

                }

                if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
            }

            return null;
        }
    }

    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsSubmitted = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsSubmitted)
        {
            IsSaving = false;
            IsSubmitted = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new StockEntry_Items
            {
                BasicRate = 0,
                Quantity = 1
            });
        ItemName.Add("");
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {
            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    public void changeEntryType()
    {
        if (stock.StockEntryType == "Goods Issue")
        {
            Hiderate = true;
        }
        else
        {
            Hiderate = false;
        }
        StateHasChanged();

    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}