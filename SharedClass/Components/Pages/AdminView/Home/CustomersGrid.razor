@page "/customers"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-end">
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info"
                           Style="text-transform:none; margin-bottom: 20px;" OnClick="Create" Size="Size.Large">
                    Create
                </MudButton>
                @if (selectedItems.Any())
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteOutline"
                               Style="text-transform:none; margin-bottom: 20px;" Color="Color.Error" OnClick="DeleteSelectedItems"
                               Size="Size.Large">Delete</MudButton>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <MudTable @ref="_table" T="Customer" Items="@Elements" MultiSelection="true"
                      @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px" OnRowClick="@OnRowClick" Virtualize="true"
                      Filter="new Func<Customer,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Customers</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Address</MudTh>
                    <MudTh>Contact</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Supplier Name">@context.CustomerID</MudTd>
                    <MudTd DataLabel="Status">@context.Name</MudTd>
                    <MudTd DataLabel="Supplier Group">@context.Address</MudTd>
                    <MudTd DataLabel="Supplier Type">@context.Contact</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </div>
    </div>
</div>

@code {
    private MudTable<Customer> _table;
    private string searchString1 = "";
    private bool _selectOnRowClick = true;
    private IEnumerable<Customer> Elements = new List<Customer>();
    private HashSet<Customer> selectedItems = new HashSet<Customer>();

    protected override async Task OnInitializedAsync()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);
        Elements = await db.QueryAsync<Customer>("SELECT * FROM Customer ORDER BY CustomerID");
    }

    void OnRowClick(TableRowClickEventArgs<Customer> args)
    {
        customer.CustomerID = args.Item.CustomerID;
        NavigationManager.NavigateTo($"/customers/{customer.CustomerID}");
    }

    private bool FilterFunc1(Customer element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Customer element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.CustomerID.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Contact.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }

    private void Create()
    {
        NavigationManager.NavigateTo($"/customers/new-customer", forceLoad: true);
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems == null || !selectedItems.Any())
        {
            Snackbar.Add("No items selected to delete", Severity.Info);
            return;
        }

        try
        {
            var items = selectedItems.ToList();
            foreach (var item in items)
            {
                OutputClass output = new OutputClass();
                output = crud.CRD2(item, "CreateCustomer_Admin", IsDelete: true, errorMessage: true, outputMessage: true);
                if (output.ErrorMessage != null)
                {
                    Snackbar.Add(output.ErrorMessage, Severity.Error);
                    return;
                }
            }

            Elements = Elements.Where(e => !items.Any(d => d.CustomerID == e.CustomerID)).ToList();
            Snackbar.Add($"{items.Count} items deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deleting items: " + ex.Message, Severity.Error);
        }

        selectedItems.Clear();
        StateHasChanged();
    }
}