@page "/goodsreceipt/new-goods-receipt"
@page "/goodsreceipt/{ReceiptNumber?}"

@using SharedClass.Components.Pages.Modals
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Vendor vendor;
@inject Connection con;
@inject GR_Items ReItem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject GoodReceipt purchase;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                        <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                        <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (ToBill)
            {
                        <MudChip Variant="Variant.Text" Color="Color.Warning">To Bill</MudChip>
            }
            @if (IsCancelled)
            {
                        <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (IsCompleted)
            {
                        <MudChip Variant="Variant.Text" Color="Color.Success">Completed</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!ToBill && !IsCancelled && !IsCompleted)
        {
                    <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                @GetSubmitButtonText()
                    </button>
        }
        @if (ToBill && !IsCancelled && !IsCompleted)
        {
                    <div class="dropdown m-1" id="dropdown">
                        <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                        <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                            <li><a href="#" class="btn ms-2 m-1 text-sm-start">Purchase Return</a></li>
                            <hr class="m-1 border-primary" />
                            <li><a @onclick="CreatePI" class="btn ms-2 m-1 text-sm-start">Purchase Invoice</a></li>
                        </ul>
                    </div>
                    <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                        Cancel
                    </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPO">
            <label class="form-label">Purchase Receipt Number</label>
            <input type="text" class="form-control" @bind="purchase.GoodReceiptID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownVendor.CloseDropdown(e)">
                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownVendor.ToggleDropdown()" @bind="vendor.VendorName"
                       placeholder="Select a Vendor" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterVendorOptions(e)" />
                <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownVendor.ListItems[0].IsDropdownOpen ? "block" : "none");"
                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                    <li>
                        @if (DropDownVendor.ListItems[0].FilteredOptions != null)
                        {
                            @foreach (var option in DropDownVendor.ListItems[0].FilteredOptions)
                            {
                                                <a class="dropdown-item" @onclick="() => SelectVendorOption(option)">@option.Text</a>
                                                <hr class="m-1 border-primary" />
                            }
                        }
                        <button @onclick="NavigateVendor" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create new Vendor</button>
                    </li>
                </ul>
            </div>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Address and Contact</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Vendor Address</label>
            <input type="text" class="form-control" @bind="vendor.Address" readonly>
        </div>
        @* <div class="col-md-6">
        <label class="form-label">company shipping address</label>
        <input type="text" class="form-control" @bind="purchase.companyshippingaddress" readonly>
        </div> *@
        <div class="col-md-6">
            <label class="form-label">Vendor Contact</label>
            <input type="text" class="form-control" @bind="vendor.Contact" readonly>
        </div>
        @*  <div class="col-md-6">
        <label class="form-label">company billing address</label>
        <input type="text" class="form-control" @bind="purchase.companybillingaddress" readonly>
        </div>  *@
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 160px;">
                        Accepted Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    item.RowID = index + 1;
                    var rowIndex = item.RowID - 1;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * item.AcceptedQuantity);
                            <tr>
                                <td>
                                    <div style="display: flex; align-items: center;">
                                        <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                @(index + 1)
                                        <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@ReadonlyHidden">Delete</button>
                                    </div>
                                </td>
                                <td>
                                    <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                        <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                               placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                        <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                            aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                            <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                                        <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text</a>
                                                                        <hr class="m-1 border-primary" />
                                            }
                                        }
                                                <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                            </li>
                                        </ul>
                                    </div>
                                </td>

                                <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.AcceptedQuantity" readonly="@ReadonlyHidden" /></td>
                                <td><input type="text" inputmode="numeric" id="rate" class="form-control" @bind="item.Rate" readonly="@ReadonlyHidden" /></td>
                                <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Amount" readonly /></td>
                            </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12">
        <button class="btn btn-primary rounded-pill" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumQuantity" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumAmounts" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    }); $('#rate').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#rate').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });

</script>

@code {
    [Parameter]
    public string? ReceiptNumber { get; set; }
    private string header = "New Goods Receipt";

    bool isMobile = false;
    string DeviceType { get; set; }

    private bool ToBill = false;
    private bool IsDraft = false;
    private bool IsSaving = true;
    private bool DisplayPO = true;
    private bool IsCancelled = false;
    private bool IsCompleted = false;
    public bool ReadonlyHidden { get { return IsCancelled || ToBill || IsCompleted; } }

    public DropDown DropDownItem = new DropDown();
    public SingleDropDown DropDownVendor = new SingleDropDown();

    List<int> IsDelete = new List<int>();
    private List<string> UOMList { get; set; }
    public List<string> ItemName = new List<string>();
    private List<GR_Items> Items = new List<GR_Items>();

    public int SumAmounts
    {
        // Using LINQ to sum the Amount property of each PO_Items object in the list
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        // Using LINQ to sum the Amount property of each PO_Items object in the list
        get { return Items.Sum(item => item.AcceptedQuantity); }
    }

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                var PurchaseOrderID = string.Empty;
                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "PurchaseOrderID"))
                {
                    PurchaseOrderID = await _protectedLocalStore.GetLocalAsync<string>("PurchaseOrderID");
                }

                if (ReceiptNumber != null)
                {
                    purchase = db.QueryFirstOrDefault<GoodReceipt>("Select * from GoodReceipt where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = ReceiptNumber });
                    Items = db.Query<GR_Items>("select * from GR_Items where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = ReceiptNumber }).ToList();
                    ItemName = db.Query<string>("select ItemName from GR_Items inner join Items on Item = ItemCode  where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = ReceiptNumber }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join GoodReceipt gr on gr.VendorID = v.VendorID where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = ReceiptNumber });
                    if (purchase == null || Items.Count == 0)
                        NavigationManager.NavigateTo("/goodsreceipt/");

                    DisplayPO = false;
                    header = purchase.GoodReceiptName;
                    if (purchase.Status == PurchaseStatuses.ToBill)
                    {
                        ToBill = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Draft)
                    {
                        IsDraft = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Cancelled)
                    {
                        IsCancelled = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Completed)
                    {
                        IsCompleted = true;
                        IsSaving = false;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(PurchaseOrderID))
                {
                    purchase.VendorID = db.QueryFirstOrDefault<string>("select VendorID from PurchaseOrder where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID });
                    Items = db.Query<GR_Items>("select Quantity as AcceptedQuantity ,* from PO_Items where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from PO_Items inner join Items on Item = ItemCode  where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join PurchaseOrder po on po.VendorID = v.VendorID where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID });
                    purchase.RefrenceDocument = PurchaseOrderID;
                    await _protectedLocalStore.SetLocalAsync("PurchaseOrderID", "");
                }
                else
                {
                    AddRow();
                }
                DropDownVendor.Options = db.Query<option>("Select VendorID as Value, VendorName as Text from Vendor").ToList();
                DropDownItem.Options = db.Query<option>("select ItemCode as Value, ItemName as Text from Items").ToList();

            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateGR();
                if (validate != null)
                {
                    return validate;
                }
                StringBuilder titleBuilder = new StringBuilder("Goods Receipt for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append(".");
                }

                purchase.GoodReceiptName = titleBuilder.ToString();
                header = titleBuilder.ToString();
                purchase.TotalAmount = SumAmounts;
                purchase.TotalQuantity = SumQuantity;
                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurchaseStatuses.ToBill;
                }

                purchase.GoodReceiptID = crud.CRD(purchase, "CreateGoodReceipt");

                foreach (var PO in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PO.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PO.GoodReceiptID = purchase.GoodReceiptID;
                    DisplayPO = false;
                    crud.CRD(PO, "GoodReceiptItems");
                }

                foreach (var del in IsDelete)
                {
                    ReItem.RowID = del;
                    ReItem.GoodReceiptID = purchase.GoodReceiptID;
                    crud.CRD(ReItem, "GoodReceiptItems", IsDelete: true);
                }

                IsDelete.Clear();
                ToggleApproval();

                if (ReceiptNumber == null)
                {
                    NavigationManager.NavigateTo($"/goodsreceipt/{purchase.GoodReceiptID}", forceLoad: true);
                }

                if (IsDraft)
                {
                    return "Receipt Saved Successfully";
                }

                else if (ToBill)
                {
                    return "Goods Receipt Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Goods Receipt Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving Receipt";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidateGR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.GoodReceiptID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from GoodReceipt where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = purchase.GoodReceiptID });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.ToBill && !ToBill) { return "Good Receipt has already been submitted changes cannot be done"; }
                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) { return "This Good Receipt has already been Cancelled"; }
                }
                else
                {
                    return "Good Receipt ID does not exist";
                }
            }

            if (purchase.DocumentDate == null) { return "Please Enter Document Date"; }
            if (string.IsNullOrWhiteSpace(purchase.VendorID)) return $"Please select Vendor";
            if (string.IsNullOrWhiteSpace(vendor.VendorName)) { return "Please select Vendor"; }
            if (!DropDownVendor.Options.Any(option => option.Text == vendor.VendorName)) { return "Please Enter Valid Vendor"; }
            if (Items.Count > 0)
            {
                foreach (var PO in Items)
                {
                    if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please select Item on Row: {PO.RowID}";

                    if (string.IsNullOrWhiteSpace(ItemName[PO.RowID - 1])) return $"Please Enter Item on Row: {PO.RowID}";

                    if (PO.Rate <= 0) return $"Row {PO.RowID}: Rate cannot be less than or equal to 0";

                    if (PO.AcceptedQuantity <= 0) return $"Row {PO.RowID}: Quantity cannot be less than or equal to 0";

                    if (PO.Amount <= 0) return $"Row {PO.RowID}: Amount cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[PO.RowID - 1])) return $"Item on Row: {PO.RowID} does not exist";

                }
            }
            return null;
        }
    }

    public void SavePO()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (ToBill)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            ToBill = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (ToBill)
        {
            IsCancelled = true;
            IsSaving = false;
            ToBill = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new GR_Items
            {
                AcceptedQuantity = 0,
                Rate = 0,
                Amount = 0
            });
        ItemName.Add("");
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterVendorOptions(ChangeEventArgs e)
    {
        bool result = DropDownVendor.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownVendor.ListItems[0].FilteredOptions.Any(option => option.Text == purchase.VendorID))
            {
                purchase.VendorID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectVendorOption(option options)
    {
        bool result = DropDownVendor.SelectOption(options);
        if (result == false)
        {
            vendor.VendorName = options.Text;
            purchase.VendorID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                vendor = db.QueryFirstOrDefault<Vendor>("Select * from Vendor where VendorID = @VendorID", new { VendorID = options.Value });
            }
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {
            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from GoodReceipt where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = purchase.GoodReceiptID });
            if (GetStatus == PurchaseStatuses.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Good Receipt has already been Cancelled", Severity.Error);
                return;
            }
        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Goods Receipt", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.GoodReceiptID;
            cancelall.type = "Good Receipt";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {

        }
    }

    public void CreatePI()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from GoodReceipt where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = purchase.GoodReceiptID });

            if (GetStatus != PurchaseStatuses.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Invoice, Good Receipt has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Good Receipt ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("GoodReceiptID", purchase.GoodReceiptID);
            NavigationManager.NavigateTo("/purchaseinvoice/new-purchase-invoice");
        }
    }

    public void NavigateVendor()
    {
        NavigationManager.NavigateTo($"/vendors/new-vendor", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}
