@page "/purchaserequisition/new-purchase-request"
@page "/purchaserequisition/{PRNumber?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject PR_Items pritem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject PurchaseRequisition purchase;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <nav class="ps-3 pt-3" style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/buying">Buying</a></li>
            <li class="breadcrumb-item"><a href="/purchaserequisition">Purchase Requisition</a></li>
            <li class="breadcrumb-item active" aria-current="page">@header</li>
        </ol>
    </nav> *@

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (IsApproved)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Pending</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (IsOrdered)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Ordered</MudChip>
            }
            @if (IsReceived)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Received</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsApproved && !IsCancelled && !IsOrdered && !IsReceived)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePR">
                @GetSubmitButtonText()
            </button>
        }
        @if (IsApproved && !IsCancelled)
        {
            <div class="dropdown m-1" id="dropdown">
                <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                    <li class="btn ms-2 m-1 text-sm-start" @onclick="CreatePO">Purchase Order</li>
                    <hr class="m-1 border-primary" />
                    <li @onclick="CreateRFQ" class="btn ms-2 m-1 text-sm-start">Request For Quotation</li>
                </ul>
            </div>
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
        @if (!IsReceived && IsOrdered && !IsCancelled)
        {
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPR">
            <label class="form-label">Purchase Requisition ID</label>
            <input type="text" class="form-control" @bind="purchase.PRNumber" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th hidden>
                        RowID
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        UOM
                    </th>
                    <th class="col col-auto" style="width: 150px;">
                        Required By
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    var rowIndex = index;

                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                <b>@(index + 1)</b>
                            </div>
                        </td>
                        <td hidden>
                            <input type="text" class="me-1" @bind="item.RowID" />
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" id="quantity" min="1" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex,true)" @bind="UOMName[rowIndex]"
                                       placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                    style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td>
                            <input type="date" class="form-control" @bind="item.RequiredBy" readonly="@ReadonlyHidden" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? PRNumber { get; set; }

    string? DeviceType { get; set; }
    string header = "Create Purchase Request";

    bool IsDraft = false;
    bool IsSaving = true;
    bool isMobile = false;
    bool DisplayPR = true;
    bool IsOrdered = false;
    bool IsApproved = false;
    bool IsReceived = false;
    bool IsCancelled = false;
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool ReadonlyHidden { get { return IsCancelled || IsApproved || IsOrdered || IsReceived; } }

    DropDown DropDownUOM = new DropDown();
    DropDown DropDownItem = new DropDown();

    List<int> IsDelete = new List<int>();
    List<string> UOMName = new List<string>();
    List<string> ItemName = new List<string>();
    List<PR_Items> Items = new List<PR_Items>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;

        var BulkOrderID = string.Empty;
        var SaleOrderID = string.Empty;
        var GoodsIssueID = string.Empty;
        var ProductionOrderID = string.Empty;
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "GoodsIssueID"))
        {
            GoodsIssueID = await _protectedLocalStore.GetLocalAsync<string>("GoodsIssueID");
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "ProductionOrderID"))
        {
            ProductionOrderID = await _protectedLocalStore.GetLocalAsync<string>("ProductionOrderID");
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "BulkOrderID"))
        {
            BulkOrderID = await _protectedLocalStore.GetLocalAsync<string>("BulkOrderID");
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "SaleOrderID"))
        {
            SaleOrderID = await _protectedLocalStore.GetLocalAsync<string>("SaleOrderID");
        }

        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                if (PRNumber != null)
                {
                    purchase = db.QueryFirstOrDefault<PurchaseRequisition>("select * from PurchaseRequest where PRnumber = @PRnumber", new { PRNumber = PRNumber });
                    Items = db.Query<PR_Items>("Select * from PR_Items where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                    UOMName = db.Query<string>("select UOMName from PR_Items pr inner join UOM u on pr.UOM = u.UOMID where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                    ItemName = db.Query<string>("select ItemName from PR_Items inner join Items on Item = ItemCode  where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                    getUOM(Items);
                    if (purchase == null || Items.Count == 0)
                    {
                        NavigationManager.NavigateTo("/purchaserequisition/");
                        return;
                    }

                    DisplayPR = false;
                    header = purchase.PRname;
                    if (purchase.Status == PurchaseStatuses.Pending)
                    {
                        IsApproved = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Draft)
                    {
                        IsDraft = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Cancelled)
                    {
                        IsCancelled = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Ordered)
                    {
                        IsOrdered = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Received)
                    {
                        IsReceived = true;
                        IsSaving = false;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(GoodsIssueID))
                {
                    Items = db.Query<PR_Items>("select Item,UOM,Quantity,Rate,Amount from GI_Items where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                    ItemName = db.Query<string>("select ItemName from GI_Items inner join Items on Item = ItemCode where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                    UOMName = db.Query<string>("select UOMName from GI_Items pr inner join UOM u on pr.UOM = u.UOMID where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                    getUOM(Items);
                    foreach (var item in Items)
                    {
                        item.RequiredBy = DateTime.Today;
                    }
                    await _protectedLocalStore.SetLocalAsync("GoodsIssueID", "");
                }
                else if (!string.IsNullOrWhiteSpace(ProductionOrderID))
                {
                    Items = db.Query<PR_Items>("select Quantity,ItemID as Item,UOMID as UOM,Rate from PRO_Items where ProductionOrderID = @ProductionOrderID", new { ProductionOrderID = ProductionOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from PRO_Items inner join Items on ItemID = ItemCode where ProductionOrderID = @ProductionOrderID", new { ProductionOrderID = ProductionOrderID }).ToList();
                    UOMName = db.Query<string>("select UOMName from PRO_Items pr inner join UOM u on pr.UOMID = u.UOMID where ProductionOrderID = @ProductionOrderID", new { ProductionOrderID = ProductionOrderID }).ToList();
                    getUOM(Items);
                    foreach (var item in Items)
                    {
                        item.RequiredBy = DateTime.Today;
                    }
                    await _protectedLocalStore.SetLocalAsync("ProductionOrderID", "");
                }
                else if (!string.IsNullOrWhiteSpace(BulkOrderID))
                {
                    Items = db.Query<PR_Items>("select Item,UOM,Quantity,Rate,Amount from BO_Items where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from BO_Items inner join Items on Item = ItemCode where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                    UOMName = db.Query<string>("select UOMName from BO_Items pr inner join UOM u on pr.UOM = u.UOMID where BulkOrderID = @BulkOrderID", new { BulkOrderID = BulkOrderID }).ToList();
                    getUOM(Items);
                    foreach (var item in Items)
                    {
                        item.RequiredBy = DateTime.Today;
                    }
                    await _protectedLocalStore.SetLocalAsync("BulkOrderID", "");
                }
                else if (!string.IsNullOrWhiteSpace(SaleOrderID))
                {
                    Items = db.Query<PR_Items>("select Item,UOM,Quantity,Rate,Amount from SO_Item where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from SO_Item inner join Items on Item = ItemCode where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    UOMName = db.Query<string>("select UOMName from SO_Item pr inner join UOM u on pr.UOM = u.UOMID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    getUOM(Items);
                    foreach (var item in Items)
                    {
                        item.RequiredBy = DateTime.Today;
                    }
                    await _protectedLocalStore.SetLocalAsync("SaleOrderID", "");
                }
                else
                {
                    AddRow();
                }

                DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items WHERE Status = 'Enabled'").ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            StateHasChanged();
            base.OnInitialized();
        }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Request for ");

                if (Items.Count > 2)
                {
                    for (int i = 0; i < 2; i++)
                    {
                        titleBuilder.Append(ItemName[i]);
                        titleBuilder.Append(", ");
                    }
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }
                else
                {
                    foreach (string data in ItemName)
                    {
                        titleBuilder.Append(data);
                        titleBuilder.Append(", ");
                    }

                    if (Items.Count > 0)
                    {
                        titleBuilder.Length -= 2;
                        titleBuilder.Append(".");
                    }
                }

                purchase.PRname = titleBuilder.ToString();
                header = titleBuilder.ToString();

                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurchaseStatuses.Pending;
                }
                else if (IsApproved || IsOrdered || IsReceived)
                {
                    purchase.Status = PurchaseStatuses.Cancelled;
                }

                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                DataTable ItemTable = Select.PRItemTable();
                foreach (var PR in Items)
                {
                    ItemTable.Rows.Add(PR.RowID, PR.Item, PR.Quantity, PR.UOM, PR.RequiredBy);
                }
                var parameters = new DynamicParameters(purchase);
                parameters.Add("@PRItems", ItemTable.AsTableValuedParameter("PRType"));
                parameters.Add("@DeletePRItem", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass output = new OutputClass();
                output = crud.CRD3(parameters, "CreatePurchaseRequest", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                purchase.PRNumber = output.Output;

                IsDelete.Clear();
                ToggleApproval();
                if (PRNumber == null)
                {
                    NavigationManager.NavigateTo($"/PurchaseRequisition/{purchase.PRNumber}", forceLoad: true);
                }
                else
                {
                    Items = db.Query<PR_Items>("Select * from PR_Items where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                }
                if (IsDraft)
                {
                    return "Resquest Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Purchase Request Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Purchase Request Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }
    public void getUOM(List<PR_Items> Items)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            int count = 0;
            foreach (var item in Items)
            {
                DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                DropDownUOM.ListItems[count].FilteredOptions = db.Query<Option>("select UOMName as Text, UOMID as Value from UOM WHERE Status = 'Enabled'", new { ItemID = item.Item }).ToList();
                count++;
            }

        }
    }
    public string ValidatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.PRNumber != null)
            {
                string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Pending && !IsApproved) return "Purchase Request has already been submitted changes cannot be done";

                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) return "This Purchase Request has already been Cancelled";
                }
                else
                {
                    return "Purchase Request ID does not exist";
                }
            }

            if (purchase.DocumentDate == null) return "Please Enter Document Date";
            int count = 0;
            if (Items.Count > 0)
            {
                foreach (var PR in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(PR.UOM)) return $"Please Enter UOM on Row: {count}";

                    if (PR.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";

                    if (PR.RequiredBy == null) return $"Please Enter Required By date on Row: {count}";

                    // if (PR.RequiredBy < purchase.DocumentDate) return $"Required By date cannot be same or before the Document Date on Row: {count}";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }

            return null;
        }
    }

    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsApproved || IsOrdered || IsReceived)
        {
            IsCancelled = true;
            IsSaving = false;
            IsApproved = false;
            IsOrdered = false;
            IsReceived = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new PR_Items
            {
                RequiredBy = DateTime.Now,
                Quantity = 1
            });
        ItemName.Add("");
        UOMName.Add("");
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                UOMName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                if (Items[rowIndex].Item != options.Value)
                {
                    UOMName[rowIndex] = "";
                }
                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                DropDownUOM.ListItems[rowIndex].FilteredOptions = db.Query<Option>("select UOMName as Text, UOMID as Value from UOM WHERE Status = 'Enabled'", new { ItemID = options.Value }).ToList();
                HandleFormInput();
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                Items[rowIndex].UOM = options.Value;
                HandleFormInput();
            }
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });
            if (GetStatus != null)
            {
                if (GetStatus == PurchaseStatuses.Cancelled)
                {
                    Snackbar.Clear();
                    Snackbar.Add("This Purchase Request has already been Cancelled", Severity.Error);
                    return;
                }
            }
            var options = new DialogOptions { ClassBackground = "dialog" };
            var result = await DialogService.Show<Dialog>("Cancel Purchase Request", options).Result;

            if (result.Data is bool && (bool)result.Data)
            {
                Cancel();
            }
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.PRNumber;
            cancelall.type = "Purhcase Request";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void CreatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });

            if (GetStatus != PurchaseStatuses.Pending)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Purchase request has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Purchase Request ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("PRNumber", purchase.PRNumber);

            NavigationManager.NavigateTo("/purchaseorder/new-purchase-order");
        }
    }

    public void CreateRFQ()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });

            if (GetStatus != PurchaseStatuses.Pending)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Purchase request has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Purchase Request ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("PRNumber", purchase.PRNumber);
            NavigationManager.NavigateTo("/requestforquotation/new-request-for-quotation");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo($"/uom/new-uom", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}