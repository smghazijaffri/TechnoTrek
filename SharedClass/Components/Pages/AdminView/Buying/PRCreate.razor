@page "/purchaserequisition/new-purchase-request"
@page "/purchaserequisition/{PRNumber?}"

@using SharedClass.Components.Pages.Modals
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject PR_Items pritem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject PurchaseRequisition purchase;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <nav class="ps-3 pt-3" style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/buying">Buying</a></li>
            <li class="breadcrumb-item"><a href="/purchaserequisition">Purchase Requisition</a></li>
            <li class="breadcrumb-item active" aria-current="page">@header</li>
        </ol>
    </nav> *@

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (IsApproved)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Pending</MudChip>
            }
            @if (IsCancelled)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (IsOrdered)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Ordered</MudChip>
            }
            @if (IsReceived)
            {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Received</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsApproved && !IsCancelled && !IsOrdered && !IsReceived)
        {
                <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePR">
                @GetSubmitButtonText()
                </button>
        }
        @if (IsApproved && !IsCancelled)
        {
                <div class="dropdown m-1" id="dropdown">
                    <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                    <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                        <li class="btn ms-2 m-1 text-sm-start" @onclick="CreatePO">Purchase Order</li>
                        <hr class="m-1 border-primary" />
                        <li @onclick="CreateRFQ" class="btn ms-2 m-1 text-sm-start">Request For Quotation</li>
                    </ul>
                </div>
                <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                    Cancel
                </button>
        }
        @if (!IsReceived && IsOrdered && !IsCancelled)
        {
                <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                    Cancel
                </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPR">
            <label class="form-label">Purchase Requisition Number</label>
            <input type="text" class="form-control" @bind="purchase.PRNumber" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        UOM
                    </th>
                    <th class="col col-auto" style="width: 150px;">
                        Required By
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    item.RowID = index + 1;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });

                    var rowIndex = item.RowID - 1;
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                    <b>@(index + 1)</b>
                                    <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@ReadonlyHidden">Delete</button>
                                </div>
                            </td>
                            <td>
                                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                           placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                        <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                            <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text</a>
                                                            <hr class="m-1 border-primary" />
                                            }
                                        }
                                            <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                            <td><input type="text" inputmode="numeric" id="quantity" min="1" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                            <td>
                                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex)" @bind="item.UOM"
                                           placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                        style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                        <li>
                                            <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                                <hr class="m-1 border-primary" />
                                                }
                                            }
                                                <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                            <td>
                                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="item.RequiredBy" readonly="@ReadonlyHidden" />
                            </td>
                        </tr>
                }
            </tbody>
        </table>

    </form>
    <div class="col-12">
        <button class="btn btn-primary rounded-pill" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
    </div>
</div>
<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
        }
    });
</script>

@code {
    [Parameter]
    public string? PRNumber { get; set; }
    private string header = "Create Purchase Request";

    bool isMobile = false;
    string DeviceType { get; set; }

    private bool IsDraft = false;
    private bool IsSaving = true;
    private bool DisplayPR = true;
    private bool IsOrdered = false;
    private bool IsApproved = false;
    private bool IsReceived = false;
    private bool IsSubmitted = false;
    private bool IsCancelled = false;

    public bool ReadonlyHidden { get { return IsCancelled || IsApproved || IsOrdered || IsReceived; } }

    public DropDown DropDownUOM = new DropDown();
    public DropDown DropDownItem = new DropDown();

    List<int> IsDelete = new List<int>();
    private List<string> UOMList { get; set; }
    public List<string> ItemName = new List<string>();
    private List<PR_Items> Items = new List<PR_Items>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            purchase.DocumentDate = DateTime.Now;
            if (PRNumber != null)
            {
                purchase = db.QueryFirstOrDefault<PurchaseRequisition>("select * from PurchaseRequest where PRnumber = @PRnumber", new { PRNumber = PRNumber });
                Items = db.Query<PR_Items>("Select * from PR_Items where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                ItemName = db.Query<string>("select ItemName from PR_Items inner join Items on Item = ItemCode  where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                if (purchase == null || Items.Count == 0)
                    NavigationManager.NavigateTo("/purchaserequisition/");

                DisplayPR = false;
                header = purchase.PRname;
                if (purchase.Status == PurchaseStatuses.Pending)
                {
                    IsApproved = true;
                    IsSaving = false;
                }
                else if (purchase.Status == PurchaseStatuses.Draft)
                {
                    IsDraft = true;
                    IsSaving = false;
                }
                else if (purchase.Status == PurchaseStatuses.Cancelled)
                {
                    IsCancelled = true;
                    IsSaving = false;
                }
                else if (purchase.Status == PurchaseStatuses.Ordered)
                {
                    IsOrdered = true;
                    IsSaving = false;
                }
                else if (purchase.Status == PurchaseStatuses.Received)
                {
                    IsReceived = true;
                    IsSaving = false;
                }
            }
            else
            {
                AddRow();
            }

            DropDownItem.Options = db.Query<option>("select ItemCode as Value, ItemName as Text from Items").ToList();
            DropDownUOM.Options = db.Query<option>("select UOMName as Text , UOMName as Value from UOM").ToList();
        }
        StateHasChanged();

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Request for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }

                purchase.PRname = titleBuilder.ToString();
                header = titleBuilder.ToString();

                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurchaseStatuses.Pending;
                }
                else if (IsApproved || IsOrdered || IsReceived)
                {
                    purchase.Status = PurchaseStatuses.Cancelled;
                }

                purchase.PRNumber = crud.CRD(purchase, "CreatePurchaseRequest");

                foreach (var PR in Items)
                {
                    if (IsDelete.Any(Del => Del == PR.RowID))
                    {
                        IsDelete.Remove(PR.RowID);
                    }
                    PR.PRNumber = purchase.PRNumber;
                    DisplayPR = false;
                    crud.CRD(PR, "PurhcaseRequestItems");
                }

                foreach (var del in IsDelete)
                {
                    pritem.RowID = del;
                    pritem.PRNumber = purchase.PRNumber;
                    crud.CRD(pritem, "PurhcaseRequestItems", System.Data.CommandType.StoredProcedure, true);
                }
                IsDelete.Clear();
                ToggleApproval();
                if (PRNumber == null)
                {
                    NavigationManager.NavigateTo($"/PurchaseRequisition/{purchase.PRNumber}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Resquest Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Purchase Request Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Purchase Request Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.PRNumber != null)
            {
                string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Pending && !IsApproved) return "Purchase Request has already been submitted changes cannot be done";

                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) return "This Purchase Request has already been Cancelled";
                }
                else
                {
                    return "Purchase Request ID does not exist";
                }
            }

            if (purchase.DocumentDate == null) return "Please Enter Document Date";

            foreach (var PR in Items)
            {
                if (string.IsNullOrWhiteSpace(ItemName[PR.RowID - 1])) return $"Please Enter Item on Row: {PR.RowID}";

                if (string.IsNullOrWhiteSpace(PR.UOM)) return $"Please Enter UOM on Row: {PR.RowID}";

                if (PR.Quantity <= 0) return $"Row {PR.RowID}: Quantity cannot be less than or equal to 0";

                if (PR.RequiredBy == null) return $"Please Enter Required By date on Row: {PR.RowID}";

                if (!DropDownItem.Options.Any(option => option.Text == ItemName[PR.RowID - 1])) return $"Item on Row: {PR.RowID} does not exist";
            }

            return null;
        }
    }

    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsApproved || IsOrdered || IsReceived)
        {
            IsCancelled = true;
            IsSaving = false;
            IsApproved = false;
            IsOrdered = false;
            IsReceived = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new PR_Items
            {
                RequiredBy = DateTime.Now,
                Quantity = 1
            });
        ItemName.Add("");
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {

            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(option options, int rowIndex)
    {
        bool result = DropDownUOM.SelectOption(options, rowIndex);
        if (result == false)
        {
            Items[rowIndex].UOM = options.Value;
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });
            if (GetStatus != null)
            {
                if (GetStatus == PurchaseStatuses.Cancelled)
                {
                    Snackbar.Clear();
                    Snackbar.Add("This Purchase Request has already been Cancelled", Severity.Error);
                    return;
                }
            }
            var options = new DialogOptions { ClassBackground = "dialog" };
            var result = await DialogService.Show<Dialog>("Cancel Purchase Request", options).Result;

            if (result.Data is bool && (bool)result.Data)
            {
                Cancel();
            }
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.PRNumber;
            cancelall.type = "Purhcase Request";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {

        }
    }
    public void CreatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });

            if (GetStatus != PurchaseStatuses.Pending)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Purchase request has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Purchase Request ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("PRNumber", purchase.PRNumber);

            NavigationManager.NavigateTo("/purchaseorder/new-purchase-order");
        }
    }
    public void CreateRFQ()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });

            if (GetStatus != PurchaseStatuses.Pending)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Purchase request has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Purchase Request ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("PRNumber", purchase.PRNumber);
            NavigationManager.NavigateTo("/requestforquotation/new-request-for-quotation");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo($"/uom/new-uom", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}