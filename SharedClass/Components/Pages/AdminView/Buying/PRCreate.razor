        @page "/purchaserequisition/{PRNumber?}"
        @page "/purchaserequisition/new-purchase-request"
        @using System.Reflection;
        @using Blazored.SessionStorage
        @using Dapper
        @using SharedClass.Components.Data
        @using SharedClass.Components.Layout
        @using System.Globalization
        @using SharedClass.Components.Model
        @using Microsoft.Data.SqlClient
        @using System.Text
        @inject Insert insert;
        @inject Select select;
        @inject IJSRuntime JSRuntime;
        @inject IJSRuntime JSRuntime;
        @inject ISnackbar Snackbar;
        @inject NavigationManager NavigationManager;
        @inject ISessionStorageService sessionStorage;
        @inject CRUD crud;
        @inject PurchaseRequisition purchase;
        @inject PR_Items pritem;
        @inject Connection con;
        @layout AdminLayout;


@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @header
                @if (status == "Save" && !IsDraft)
                {
                    <MudChip Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                    <MudChip Color="Color.Error">Draft</MudChip>
                }
                @if (IsApproved)
                {
                    <MudChip Color="Color.Success">Submitted</MudChip>
                }
            </h3>

        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!IsApproved)
            {
                <button type="submit" class="btn btn-primary rounded-3 text-sm-center rz-ripple" @onclick="SavePR">
                    @GetSubmitButtonText()
                </button>
            }
        </div>
    </div>


    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6" hidden="@DisplayPR">

                <label class="form-label">Purchase Requisition Number</label>
                <input type="text" class="form-control" @bind="purchase.PRNumber" readonly>
            </div>
            @*   <div class="col-md-6">
        <label class="form-label">Title</label>
        <input type="text" class="form-control" @bind="purchase.PRname" readonly="@IsApproved">
        </div> *@
            <div class="col-md-6">
                <label class="form-label">Creation Date</label>
                <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Items</h5>
        <form class="row g-3" @oninput="HandleFormInput">
            <table class="table table-bordered border-primary">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Item
                        </th>
                        <th class="col col-auto" style="width: 70px;">
                            Quantity
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            UOM
                        </th>
                        <th class="col col-auto" style="width: 150px;">
                            Required By
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        item.RowID = index + 1;
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@IsApproved" />
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger rz-ripple" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@IsApproved">Delete</button>
                                </div>
                            </td>
                            <td><input type="text" class="form-control" id="Item" @bind="item.Item" readonly="@IsApproved" /></td>
                            <td><input type="text" class="form-control" @bind="item.Quantity" readonly="@IsApproved" /></td>
                            <td>
                                <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" readonly="@IsApproved" />
                                <datalist id="uomOptions">
                                    <option value="Piece"></option>
                                    <option value="Each"></option>
                                    <option value="Box"></option>
                                </datalist>
                            </td>
                            <td>
                                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="item.RequiredBy" readonly="@IsApproved" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill rz-ripple" @onclick="AddRow" hidden="@IsApproved">Add Row</button>
        </div>
    </div>
}

@code {
    bool isLoading = false;

    public bool isAuthorized { get; set; }

    protected override async void OnInitialized()
    {

        var cookieContent = await sessionStorage.GetItemAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {

            isLoading = true;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                if (PRNumber != null)
                {
                    purchase = db.QueryFirstOrDefault<PurchaseRequisition>("select * from PurchaseRequest where PRnumber = @PRnumber", new { PRNumber = PRNumber });
                    Items = db.Query<PR_Items>("Select * from PR_Items where PRNumber = @PRNumber", new { PRNumber = PRNumber }).ToList();
                    if (purchase == null || Items.Count == 0)
                        NavigationManager.NavigateTo("/PurchaseRequisition/");

                    DisplayPR = false;
                    header = purchase.PRname;
                    if (purchase.Status == "Approved")
                    {
                        IsApproved = true;
                    }
                    else if (purchase.Status == "Draft")
                    {
                        IsDraft = true;
                    }

                }
            }

            // Items = select.PurhcaseRequest(purchase.PRNumber);
            // if (Items.Count > 0)
            // {
            //     PurchaseRequisitionNumber = Items[0].PRNumber;
            //     DocumentDate = Items[0].CreationDate;
            //     if (purchase.Status == "Approved")
            //     {
            //         IsApproved = true;
            //         DisplayPR = false;
            //     }
            // }
            // else
            // {
            //     PurchaseRequisitionNumber = 1;
            // }
            StateHasChanged();

        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }

    [Parameter]
    public string PRNumber { get; set; }

    private bool DisplayPR = true;
    private string header = "Create Purchase Request";
    public string PurchaseRequisitionNumber { get; set; }
    private DateTime DocumentDate { get; set; } = DateTime.Now;
    private string Vendor { get; set; }
    private bool IsApproved { get; set; } = false;
    private string status;
    private bool IsDraft { get; set; } = false;
    private bool IsSaving { get; set; } = false;
    private List<PR_Items> Items = new List<PR_Items>();

    List<int> IsDelete = new List<int>();


    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }
                int CountPR = db.QueryFirstOrDefault<int>("select count(1) from PurchaseRequest where PRnumber = @PRnumber", new { PRnumber = purchase.PRNumber });
                if (CountPR == 0)
                {
                    purchase.PRNumber = "PR";
                    var CountNo = "";
                    int data = select.CountPRnumber();
                    if (data != 0)
                    {
                        data += 1;
                        var itr = data.ToString();
                        var itNum = itr.Length;
                        if (itNum == 1)
                        {
                            CountNo += "00" + itr;
                            purchase.PRNumber = purchase.PRNumber + "-" + CountNo;
                        }
                        else if (itNum == 2)
                        {
                            CountNo += "0" + itr;
                            purchase.PRNumber = purchase.PRNumber + "-" + CountNo;
                        }
                        else
                        {
                            purchase.PRNumber = purchase.PRNumber + "-" + itr;
                        }

                    }
                    else
                    {
                        purchase.PRNumber = purchase.PRNumber + "-" + "001";
                    }
                }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Request for ");

                foreach (var data in Items)
                {
                    titleBuilder.Append(data.Item);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    // Remove the trailing comma and add a period
                    titleBuilder.Length -= 2; // Subtract 2 to remove the last comma and space
                    titleBuilder.Append(".");
                }

                purchase.PRname = titleBuilder.ToString();
                header = titleBuilder.ToString();
                if (status == "Save")
                {
                    purchase.Status = "Draft";
                }
                else if (status == "Submit")
                {
                    purchase.Status = "Submitted";
                }
                crud.CRD(purchase, "CreatePurchaseRequest");
                foreach (var PR in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PR.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PR.PRNumber = purchase.PRNumber;

                    // if (IsDraft)
                    // {
                    //     PR.Status = "Draft";
                    // }
                    // if (IsApproved)
                    // {
                    //     PR.Status = "Approved";
                    // }
                    DisplayPR = false;
                    crud.CRD(PR, "PurhcaseRequestItems");
                    NavigationManager.NavigateTo($"/PurchaseRequisition/{purchase.PRNumber}", forceLoad: true);
                }
                foreach (var del in IsDelete)
                {
                    pritem.PRNumber = PurchaseRequisitionNumber;
                    pritem.RowID = del;
                    pritem.RequiredBy = DateTime.Now.Date;
                    crud.CRD(purchase, "CreatePurchaseRequest", System.Data.CommandType.StoredProcedure, true);
                }
                ToggleApproval();
                if (IsDraft)
                {
                    return "Purchase Request Saved Successfully";
                }
                else if (IsApproved)
                {
                    return "Purchase Request Submitted Successfully";
                }
                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }

        catch (Exception ex)
        {

            return ex.Message;
        }
    }
    public string ValidatePR()
    {
        // if (string.IsNullOrWhiteSpace(purchase.PRNumber))
        // { return "Please Enter Purchase Request Number"; }
        if (purchase.DocumentDate == null)
        { return "Please Enter Document Date"; }
        else if (Items.Count > 0)
        {
            foreach (var PR in Items)
            {
                if (string.IsNullOrWhiteSpace(PR.Item))
                { return "Please Enter Item on No:" + PR.RowID + ""; }
                else if (string.IsNullOrWhiteSpace(PR.UOM))
                { return "Please Enter UOM on No:" + PR.RowID + ""; }
                else if (PR.Quantity == 0)
                { return "Please Enter Quantity on No:" + PR.RowID + ""; }
                else if (PR.RequiredBy == null)
                { return "Please Enter Required By date on No:" + PR.RowID + ""; }
            }
            return null;
        }
        else
        { return null; }
    }
    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add(notification, Severity.Error);
        }


    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            status = "Submitted";
            return "Submitted";
        }
        else if (IsDraft)
        {
            status = "Submit";
            return "Submit";
        }
        else
        {
            status = "Save";
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (!IsSaving)
        {
            IsDraft = true;
        }
    }

    private void Save()
    {
        IsDraft = true;
        IsSaving = true;
        IsSaving = false;
    }

    private void AddRow()
    {
        Items.Add(new PR_Items
            {
                RequiredBy = DateTime.Now,
                Quantity = 1
            });
    }

    private void DeleteRow(int index)
    {

        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            status = "Not Saved";
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }
}