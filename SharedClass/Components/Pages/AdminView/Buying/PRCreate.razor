@page "/purchaserequisition/create"
@using System.Reflection;
@using Blazored.SessionStorage
@using SharedClass.Components.Data
@using SharedClass.Components.Layout
@using System.Globalization
@using SharedClass.Components.Model
@inject Insert insert;
@inject IJSRuntime JSRuntime;
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject ISessionStorageService sessionStorage;
@inject CRUD crud;
@inject Purchase purchase;
@layout AdminLayout;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                Create Purchase Requisition
                @if(status == "Save" && !IsDraft)
                {
                    <MudChip Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                    <MudChip Color="Color.Error">Draft</MudChip>
                }
                @if (IsApproved)
                {
                    <MudChip Color="Color.Success">Submitted</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!IsApproved)
            {
                <button type="submit" class="btn btn-primary rounded-3 text-sm-center rz-ripple" @onclick="ToggleApproval">
                    @GetSubmitButtonText()
                </button>
            }
        </div>
    </div>


    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        @* <!-- Purchase Requisition Form -->
    <form class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Purchase Requisition Number</label>
            <input type="text" class="form-control" @bind="PurchaseRequisitionNumber"> 
        </div>
        <div class="col-md-6">
            <label class="form-label">Creation Date</label>
            <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="CreationDate">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <input type="text" class="form-control" @bind="Vendor">
        </div>
    </form> *@
        <!-- Purchase Requisition Form -->
        <form class="row g-3">
            
            <div class="col-md-6">
                <label class="form-label">Purchase Requisition Number</label>
                <input type="text" class="form-control" @bind="PurchaseRequisitionNumber" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Creation Date</label>
                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" @bind="CreationDate" class="form-control" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor</label>
                <input type="text" class="form-control" @bind="Vendor" readonly="@IsApproved">
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Items</h5>
        <form class="row g-3">
            <table class="table table-bordered border-primary">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Item
                        </th>
                        <th class="col col-auto" style="width: 70px;">
                            Quantity
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            UOM
                        </th>
                        <th class="col col-auto" style="width: 150px;">
                            Required By
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    <!-- Rows will be added here dynamically -->
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" readonly="@IsApproved"/>
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger rz-ripple" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" readonly="@IsApproved">Delete</button>
                                </div>
                            </td>
                            <td><input type="text" class="form-control" id="Item" @bind="item.Item" readonly="@IsApproved" /></td>
                            <td><input type="text" class="form-control" @bind="item.Quantity" readonly="@IsApproved" /></td>
                            <td>
                                <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" readonly="@IsApproved" />
                                <datalist id="uomOptions">
                                    <option value="Piece"></option>
                                    <option value="Each"></option>
                                    <option value="Box"></option>
                                    <!-- Add more UOM options as needed -->
                                </datalist>
                            </td>
                            <td>
                                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="item.RequiredBy" readonly="@IsApproved" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill rz-ripple" @onclick="AddRow" disabled="@IsApproved">Add Row</button>
        </div>
    </div>
}
<script defer>
    function storeAndCallCSharpMethod() {
        var dataArray = [];

        @* Loop through each dynamically added row *@
        var tableBody = document.getElementById('table-body');
        var rows = tableBody.getElementsByTagName('tr');

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var inputs = row.getElementsByTagName('input');

            @* Get values from input fields *@
            var name = inputs[1].value;
            var quantity = inputs[2].value;
            var uom = inputs[3].value;
            var requiredBy = inputs[4].value;

            @* Store values in an object *@
            var rowData = {
                Name: name,
                Quantity: quantity,
                UOM: uom,
                RequiredBy: requiredBy
            };

            @* Add the object to the array *@
            dataArray.push(rowData);
        }

        return dataArray;
    }
</script>

@code {
    bool isLoading = false;
    public bool isAuthorized { get; set; }
    protected override async void OnInitialized()
    {

        var cookieContent = await sessionStorage.GetItemAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }

    private int PurchaseRequisitionNumber { get; set; }
    private DateTime CreationDate { get; set; } = DateTime.Now;
    private string Vendor { get; set; }
    private bool IsApproved { get; set; } = false;
    private string status;
    private bool IsDraft { get; set; } = false;
    private bool IsSaving { get; set; } = false;
    private List<Purchase> Items  = new List<Purchase>();

    List<Item> dataArray = new List<Item>();
    List<string> IsDelete = new List<string>();


    public void StoreAndCallCSharpMethod()
    {
        // var dataArray = await JSRuntime.InvokeAsync<List<Item>>("storeAndCallCSharpMethod");

        if (PurchaseRequisitionNumber != 0 && !string.IsNullOrEmpty(Vendor))
        {
            foreach (var data in Items)
            {
                // if (!string.IsNullOrEmpty(data.Name) && !string.IsNullOrEmpty(data.Quantity) && !string.IsNullOrEmpty(data.UOM))
                // {
                foreach (string del in IsDelete)
                {
                    if (data.Item ==  del)
                    {
                        IsDelete.Remove(del);
                    }   
                }
                data.PRNumber = PurchaseRequisitionNumber;
                data.Vendor = Vendor;

                crud.CRD(data, "CreatePurchaseRequest");
                // }
            }
            foreach (var del in IsDelete)
            {
                purchase.PRNumber = PurchaseRequisitionNumber;
                purchase.Item = del;
                purchase.RequiredBy = DateTime.Now;
                crud.CRD(purchase, "CreatePurchaseRequest",System.Data.CommandType.StoredProcedure,true);
            }
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            status = "Submitted";
            return "Submitted";
        }
        else if (IsDraft)
        {
            status = "Submit";
            return "Submit";
        }
        else
        {
            status = "Save";
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        StoreAndCallCSharpMethod();
    //     if (IsDraft)
    //     {
    //         IsDraft = false;
    //         IsApproved = true;
    //         IsSaving = false;
    //         StoreAndCallCSharpMethod();
    //     }
    //     else if (!IsSaving)
    //     {
    //         IsDraft = true;
    //         StoreAndCallCSharpMethod();
    //     }
    }

    // You can update the IsDraft and IsSaving flags accordingly.
    private void Save()
    {
        IsDraft = true;
        IsSaving = true;
        IsSaving = false;
    }

    private void AddRow()
    {
        Items.Add(new Purchase
            {
                RequiredBy = DateTime.Now, // Set the default date to the current date
            });
    }

    private void DeleteRow(int index)
    {

        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].Item);
                Items.RemoveAt(i);
            }
        }
    }

    // private void ToggleAllRowsSelection()
    // {
    //     bool selectAll = Items.All(item => item.Selected);
    //     foreach (var item in Items)
    //     {
    //         item.Selected = !selectAll;
    //     }
    // }

    private class Item
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string UOM { get; set; }
        public DateTime RequiredBy { get; set; } = DateTime.Now;
        public bool Selected { get; set; }
    }
}