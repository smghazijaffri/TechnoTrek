@page "/purchaserequisition"
@using SharedClass.Components.Layout
@using System.Globalization
@using SharedClass.Components.Data
@using System.Net.Http.Json
@using static MudBlazor.CategoryTypes
@inject Select select;
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject ISessionStorageService sessionStorage;
@layout AdminLayout;

@if (isLoading)
{
    <MudTable @ref="_table" T="PurchaseRequisition" Items="@Elements" Filter="new Func<PurchaseRequisition, bool>(FilterFunc1)" MultiSelection="true"
              @bind-SelectedItem="selectedItem1" @bind-SelectedItems="selectedItems" Hover="true" OnRowClick="@OnRowClick"
              @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="1" Style="border-radius:10px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Purchase Requisition</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>PR Number</MudTh>
            <MudTh>Vendor</MudTh>
            <MudTh>Item</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>UOM</MudTh>
            <MudTh>Creation Date</MudTh>
            <MudTh>Required By</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="PR Number">@context.PRNumber</MudTd>
                <MudTd DataLabel="Vendor">@context.Vendor</MudTd>
                <MudTd DataLabel="Item">@context.Item</MudTd>
                <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="UOM">@context.UOM</MudTd>
                <MudTd DataLabel="Creation Date">@context.CreationDate</MudTd>
                <MudTd DataLabel="Required By">@context.Reqdate</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Inline="true" Class="align-self-center">Selected: @selectedItem1?.Item</MudText>
            </div>
        </div>
}

@code {
    //authorization
    bool isLoading = false;
    public bool isAuthorized { get; set; }
    protected override async void OnInitialized()
    {
        var cookieContent = await sessionStorage.GetItemAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }
    //authorization

    private bool hover = true;
    private string searchString1;
    private HashSet<PurchaseRequisition> selectedItems = new HashSet<PurchaseRequisition>();
    private bool _selectOnRowClick = true;
    private MudTable<PurchaseRequisition> _table;
    private PurchaseRequisition selectedItem1 = null;
    private IEnumerable<PurchaseRequisition> Elements = new List<PurchaseRequisition>();
    private string _selectedItemText = "No row clicked";

    protected override async Task OnInitializedAsync()
    {
        Elements = await select.GetPR1DataAsync();
    }

    void OnRowClick(TableRowClickEventArgs<PurchaseRequisition> args)
    {
        _selectedItemText = $"{args.Item.Item} ({args.Item.Vendor})";
    }

    private bool FilterFunc1(PurchaseRequisition element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PurchaseRequisition element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if ($"{element.Item} {element.Vendor} {element.UOM}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        string prNumberString = element.PRNumber.ToString();
        string quantityString = element.Quantity.ToString();

        if (IsNumeric(prNumberString) && IsNumeric(quantityString) && $"{prNumberString} {quantityString}".ToString().Contains(searchString))
        {
            return true;
        }

        string creationDateString = element.CreationDate.ToString("dd/MM/yyyy");
        string reqDateString = element.Reqdate.ToString("dd/MM/yyyy");

        if (IsDate(creationDateString) && IsDate(reqDateString) && $"{creationDateString} {reqDateString}".Contains(searchString))
        {
            return true;
        }

        return false;
    }

    private bool IsNumeric(string value)
    {
        return double.TryParse(value, out _);
    }

    private bool IsDate(string value)
    {
        return DateTime.TryParse(value, out _);
    }
}