@page "/purchaseorder"

@using static MudBlazor.CategoryTypes
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using System.Globalization
@using System.Net.Http.Json

@layout AdminLayout;
@inject Select select;
@inject Delete delete;
@inject ISnackbar Snackbar;
@inject PurchaseOrders purchaseorder;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@if (isLoading)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex justify-content-end">
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Style="text-transform:none; margin-bottom: 20px;"
                               Href="/purchaseorder/new-purchase-order" Size="Size.Large">Create</MudButton>
                    @if (selectedItems.Any())
                    {
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteOutline" Style="text-transform:none; margin-bottom: 20px;"
                                   Color="Color.Error" OnClick="DeleteSelectedItems" Size="Size.Large">Delete</MudButton>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <MudTable @ref="_table" T="PurchaseOrders" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px"
                          OnRowClick="@OnRowClick" Filter="new Func<PurchaseOrders,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">

                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Purchase Orders</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>Order Number</MudTh>
                        <MudTh>Title</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Grand Total</MudTh>
                        <MudTh>Document Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Purchase Order Number">@context.PurchaseOrderID</MudTd>
                        <MudTd DataLabel="Title">@context.PurchaseOrderName</MudTd>
                        <MudTd DataLabel="Status">@context.Status</MudTd>
                        <MudTd DataLabel="Total Amount">@context.TotalAmount</MudTd>
                        <MudTd DataLabel="Document Date">@context.DocumentDate</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudTable>
            </div>
        </div>
    </div>
}

@code {
    //authorization
    bool isLoading = false;
    public bool isAuthorized { get; set; }
    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }
    //authorization

    private string searchString1 = "";
    private bool _selectOnRowClick = true;
    private MudTable<PurchaseOrders> _table;
    private IEnumerable<PurchaseOrders> Elements = new List<PurchaseOrders>();
    private HashSet<PurchaseOrders> selectedItems = new HashSet<PurchaseOrders>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await select.GetPODataAsync();
    }

    void OnRowClick(TableRowClickEventArgs<PurchaseOrders> args)
    {
        purchaseorder.PurchaseOrderID = args.Item.PurchaseOrderID;
        NavigationManager.NavigateTo($"/purchaseorder/{purchaseorder.PurchaseOrderID}");
    }

    private bool FilterFunc1(PurchaseOrders element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PurchaseOrders element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.PurchaseOrderName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.PurchaseOrderID} {element.TotalAmount} {element.DocumentDate}".Contains(searchString)) return true;

        return false;
    }

    private async void DeleteSelectedItems()
    {
        if (selectedItems == null || !selectedItems.Any())
        {
            Snackbar.Add("No items selected to delete", Severity.Info);
            return;
        }

        var itemsToDelete = selectedItems.Where(item => item.Status == "Draft" || item.Status == "Cancelled").ToList();
        if (itemsToDelete.Count == 0)
        {
            Snackbar.Add("No items with status 'Draft' or 'Cancelled' to delete", Severity.Info);
            return;
        }

        try
        {
            foreach (var item in itemsToDelete)
            {
                await delete.DeleteFromTable("PurchaseOrder", "PurchaseOrderID", item.PurchaseOrderID, "PO_Items");
            }

            Elements = Elements.Where(e => !itemsToDelete.Any(d => d.PurchaseOrderID == e.PurchaseOrderID)).ToList();
            Snackbar.Add($"{itemsToDelete.Count} items deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deleting items: " + ex.Message, Severity.Error);
        }

        selectedItems.Clear();
        StateHasChanged();
    }

    private void OnSelectedItemsChanged(HashSet<PurchaseOrders> items)
    {
        selectedItems = items;
    }
}
