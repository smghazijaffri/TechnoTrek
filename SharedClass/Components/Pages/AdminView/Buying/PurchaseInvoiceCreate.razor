@page "/purchaseinvoice/new-purchase-invoice"
@page "/purchaseinvoice/{PurchaseInvoiceID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Vendor vendor;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject PI_Items invoiceitem;
@inject IJSRuntime JSRuntime;
@inject PurchaseInvoice purchase;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <nav class="ps-3 pt-3" style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/buying">Buying</a></li>
            <li class="breadcrumb-item"><a href="/PurchaseInvoice">Purchase Requisition</a></li>
            <li class="breadcrumb-item active" aria-current="page">@header</li>
        </ol>
    </nav> *@

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (Unpaid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Unpaid</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (IsPaid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Paid</MudChip>
            }
            @if (Overdue)
            {
                <MudChip Variant="Variant.Text" Color="Color.Dark">Overdue</MudChip>
            }
            @if (UnpaidtoPaid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!Unpaid && !IsCancelled && !IsPaid && !Overdue && (UnpaidtoPaid || IsSaving || IsDraft))
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePR">
                @GetSubmitButtonText()
            </button>
        }
        @if (Unpaid || IsPaid || Overdue && !IsCancelled)
        {
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPR">
            <label class="form-label">Purchase Invoice ID</label>
            <input type="text" class="form-control" @bind="purchase.PurchaseInvoiceID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownVendor.CloseDropdown(e)">
                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownVendor.ToggleDropdown()" @bind="vendor.VendorName"
                       placeholder="Select a Vendor" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterVendorOptions(e)" />
                <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownVendor.ListItems[0].IsDropdownOpen ? "block" : "none");"
                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                    <li>
                        @if (DropDownVendor.ListItems[0].FilteredOptions != null)
                        {
                            @foreach (var option in DropDownVendor.ListItems[0].FilteredOptions)
                            {
                                <a class="dropdown-item" @onclick="() => SelectVendorOption(option)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                <hr class="m-1 border-primary" />
                            }
                        }
                        <button @onclick="NavigateVendor" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new Vendor</button>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Due Date</label>
            <input type="date" @bind="purchase.DueDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label"></label>
            <MudCheckBox @bind-Value="@purchase.IsPaid" Size="Size.Small" Dense="true" Label="Paid" readonly="@Readonly"></MudCheckBox>
            <MudCheckBox @bind-Value="@purchase.IsReturn" Size="Size.Small" Dense="true" Label="Return" readonly="@ReadonlyHidden"></MudCheckBox>

        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Vendor Invoice Details</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Vendor Invoice No</label>
            <input type="text" class="form-control" @bind="purchase.VendorInvoiceNumber">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Invoice Date</label>
            <input type="date" class="form-control" @bind="purchase.VendorInvoiceDate" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Address and Contact</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Vendor Address</label>
            <input type="text" class="form-control" @bind="vendor.Address" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Contact</label>
            <input type="text" class="form-control" @bind="vendor.Contact" readonly>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 160px;">
                        Accepted Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    item.RowID = index + 1;
                    var rowIndex = item.RowID - 1;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * item.AcceptedQuantity);
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>

                        <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.AcceptedQuantity" readonly="@ReadonlyHidden" /></td>
                        <td><input type="text" inputmode="numeric" id="rate" class="form-control" @bind="item.Rate" readonly /></td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumQuantity" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumAmounts" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>
<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#rate').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#rate').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? PurchaseInvoiceID { get; set; }

    string? DeviceType { get; set; }
    string header = "Create Purchase Invoice";

    bool Unpaid = false;
    bool IsDraft = false;
    bool IsSaving = true;
    bool Overdue = false;
    bool isMobile = false;
    bool DisplayPR = true;
    bool IsCancelled = false;
    bool UnpaidtoPaid = false;
    bool IsPaid { get; set; } = false;
    bool Readonly { get { return IsCancelled || IsPaid; } }
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool ReadonlyHidden { get { return IsCancelled || Unpaid || IsPaid || Overdue || UnpaidtoPaid; } }

    DropDown DropDownItem = new DropDown();
    SingleDropDown DropDownVendor = new SingleDropDown();

    List<int> IsDelete = new List<int>();
    List<string> ItemName = new List<string>();
    List<PI_Items> Items = new List<PI_Items>();

    protected override async void OnInitialized()
    {
        try
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                purchase.DueDate = DateTime.Now;
                var PurchaseOrderID = string.Empty;
                var GoodReceiptID = string.Empty;

                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "PurchaseOrderID"))
                {
                    PurchaseOrderID = await _protectedLocalStore.GetLocalAsync<string>("PurchaseOrderID");
                }

                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "GoodReceiptID"))
                {
                    GoodReceiptID = await _protectedLocalStore.GetLocalAsync<string>("GoodReceiptID");
                }

                if (PurchaseInvoiceID != null)
                {
                    purchase = db.QueryFirstOrDefault<PurchaseInvoice>("select * from PurchaseInvoice where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = PurchaseInvoiceID });
                    Items = db.Query<PI_Items>("Select * from PI_Items where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = PurchaseInvoiceID }).ToList();
                    ItemName = db.Query<string>("select ItemName from PI_Items inner join Items on Item = ItemCode  where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = PurchaseInvoiceID }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join PurchaseInvoice pi on pi.VendorID = v.VendorID where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = PurchaseInvoiceID });

                    if (purchase == null || Items.Count == 0)
                    {
                        NavigationManager.NavigateTo("/PurchaseInvoice/");
                        return;
                    }

                    DisplayPR = false;
                    header = purchase.PurchaseInvoiceName;
                    if (purchase.Status == PurchaseStatuses.Unpaid)
                    {
                        Unpaid = true;
                        purchase.IsPaid = false;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Draft)
                    {
                        IsDraft = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Cancelled)
                    {
                        IsCancelled = true;
                        IsSaving = false;
                        UnpaidtoPaid = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Paid)
                    {
                        IsPaid = true;
                        IsSaving = false;
                        UnpaidtoPaid = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Overdue)
                    {
                        Overdue = true;
                        IsSaving = false;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(PurchaseOrderID))
                {
                    purchase.VendorID = db.QueryFirstOrDefault<string>("select VendorID from PurchaseOrder where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID });
                    Items = db.Query<PI_Items>("select Quantity as AcceptedQuantity ,* from PO_Items where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from PO_Items inner join Items on Item = ItemCode  where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join PurchaseOrder po on po.VendorID = v.VendorID where PurchaseOrderID = @PurchaseOrderID", new { PurchaseOrderID = PurchaseOrderID });
                    purchase.RefrenceDocument = PurchaseOrderID;
                    purchase.DueDate = DateTime.Now;
                    purchase.VendorInvoiceDate = DateTime.Now;
                    await _protectedLocalStore.SetLocalAsync("PurchaseOrderID", "");
                }
                else if (!string.IsNullOrWhiteSpace(GoodReceiptID))
                {
                    purchase = db.QueryFirstOrDefault<PurchaseInvoice>("Select * from GoodReceipt where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = GoodReceiptID });
                    Items = db.Query<PI_Items>("select * from GR_Items where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = GoodReceiptID }).ToList();
                    ItemName = db.Query<string>("select ItemName from GR_Items inner join Items on Item = ItemCode  where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = GoodReceiptID }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join GoodReceipt gr on gr.VendorID = v.VendorID where GoodReceiptID = @GoodReceiptID", new { GoodReceiptID = GoodReceiptID });
                    purchase.RefrenceDocument = GoodReceiptID;
                    purchase.DueDate = DateTime.Now;
                    purchase.VendorInvoiceDate = DateTime.Now;
                    await _protectedLocalStore.SetLocalAsync("GoodReceiptID", "");
                }
                else
                {
                    AddRow();
                }
                DropDownVendor.Options = db.Query<Option>("Select VendorID as Value, VendorName as Text, VendorType as Type from Vendor").ToList();
                DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items").ToList();
            }
            StateHasChanged();

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.AcceptedQuantity); }
    }

    public int SumTotal
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Invoice for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append(".");
                }

                purchase.PurchaseInvoiceName = titleBuilder.ToString();
                header = titleBuilder.ToString();

                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    if (purchase.IsPaid == true)
                    {
                        purchase.Status = PurchaseStatuses.Paid;
                    }
                    else
                    {
                        if (purchase.DueDate < DateTime.Today)
                        {
                            purchase.Status = PurchaseStatuses.Overdue;
                        }
                        else
                        {
                            purchase.Status = PurchaseStatuses.Unpaid;
                        }
                    }
                }
                else if (UnpaidtoPaid)
                {
                    purchase.Status = PurchaseStatuses.Paid;
                }
                else if (Unpaid || IsPaid || Overdue)
                {
                    purchase.Status = PurchaseStatuses.Cancelled;
                }
                if (string.IsNullOrWhiteSpace(purchase.VendorInvoiceNumber))
                {
                    purchase.VendorInvoiceDate = null;
                }
                purchase.PurchaseInvoiceID = crud.CRD(purchase, "CreatePurchaseInvoice");

                foreach (var PR in Items)
                {
                    if (IsDelete.Any(Del => Del == PR.RowID))
                    {
                        IsDelete.Remove(PR.RowID);
                    }
                    PR.PurchaseInvoiceID = purchase.PurchaseInvoiceID;
                    DisplayPR = false;
                    crud.CRD(PR, "PIItems");
                }

                foreach (var del in IsDelete)
                {
                    invoiceitem.RowID = del;
                    invoiceitem.PurchaseInvoiceID = purchase.PurchaseInvoiceID;
                    crud.CRD(invoiceitem, "PIItems", System.Data.CommandType.StoredProcedure, true);
                }
                IsDelete.Clear();
                ToggleApproval();
                if (PurchaseInvoiceID == null)
                {
                    NavigationManager.NavigateTo($"/purchaseinvoice/{purchase.PurchaseInvoiceID}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Invoice Saved Successfully";
                }

                else if (Unpaid || IsPaid || Overdue || UnpaidtoPaid)
                {
                    UnpaidtoPaid = false;
                    return "Purchase Invoice Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Purchase Invoice Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving Invoice";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.PurchaseInvoiceID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from PurchaseInvoice where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = purchase.PurchaseInvoiceID });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Pending && !Unpaid) return "Purchase Invoice has already been submitted changes cannot be done";

                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) return "This Purchase Invoice has already been Cancelled";

                }
                else
                {
                    return "Purchase Invoice ID does not exist";
                }
            }

            if (purchase.DocumentDate == null) return "Please Enter Document Date";

            if (purchase.VendorID == null) return "Please Select a Vendor";

            if (purchase.DueDate < purchase.DocumentDate) return "DueDate cannot be before DocumentDate";

            if (purchase.IsPaid && purchase.IsReturn) return "Document cannot be set to PAID and RETURN at the same time";

            if (Items.Count > 0)
            {
                foreach (var PI in Items)
                {
                    if (string.IsNullOrWhiteSpace(ItemName[PI.RowID - 1])) return $"Please Enter Item on Row: {PI.RowID}";

                    if (PI.Rate <= 0) return $"Row {PI.RowID}: Rate cannot be less than or equal to 0";

                    if (PI.AcceptedQuantity <= 0) return $"Row {PI.RowID}: Quantity cannot be less than or equal to 0";

                    if (PI.Amount <= 0) return $"Row {PI.RowID}: Amount cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[PI.RowID - 1])) return $"Item on Row: {PI.RowID} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }

            return null;
        }
    }

    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
        StateHasChanged();
    }

    private string GetSubmitButtonText()
    {
        if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsSaving = false;
            if (purchase.Status == PurchaseStatuses.Paid)
            {
                IsPaid = true;
            }
            else
            {
                if (purchase.DueDate < DateTime.Today)
                {
                    Overdue = true;
                }
                else
                {
                    Unpaid = true;
                }
            }
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (UnpaidtoPaid)
        {
            IsPaid = true;
            IsSaving = false;
            UnpaidtoPaid = false;
        }

        else if (Unpaid || IsPaid || Overdue)
        {
            IsCancelled = true;
            IsSaving = false;
            Unpaid = false;
            IsPaid = false;
            Overdue = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new PI_Items
            {
                AcceptedQuantity = 1
            });
        ItemName.Add("");
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
        if (Unpaid)
        {
            Unpaid = false;
            UnpaidtoPaid = true;
            IsSaving = false;
        }
    }

    public void FilterVendorOptions(ChangeEventArgs e)
    {
        bool result = DropDownVendor.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownVendor.ListItems[0].FilteredOptions.Any(option => option.Text == purchase.VendorID))
            {
                purchase.VendorID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectVendorOption(Option options)
    {
        bool result = DropDownVendor.SelectOption(options);
        if (result == false)
        {
            vendor.VendorName = options.Text;
            purchase.VendorID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                vendor = db.QueryFirstOrDefault<Vendor>("Select * from Vendor where VendorID = @VendorID", new { VendorID = options.Value });
            }
            HandleFormInput();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("Select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                HandleFormInput();
            }
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {

            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from PurchaseInvoice where PurchaseInvoiceID = @PurchaseInvoiceID", new { PurchaseInvoiceID = purchase.PurchaseInvoiceID });

            if (GetStatus == PurchaseStatuses.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Purhcase Invoice has already been Cancelled", Severity.Error);
                return;
            }

        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Purchase Invoice", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.PurchaseInvoiceID;
            cancelall.type = "Purchase Invoice";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void NavigateVendor()
    {
        NavigationManager.NavigateTo($"/vendors/new-vendor", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}