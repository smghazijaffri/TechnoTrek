@page "/goodsreceipt"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject GoodReceipt goodsreceipt;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between">
                <MudChip Variant="Variant.Text" Icon="@Icons.Material.Outlined.ArrowBackIos" Color="Color.Info" Href="/buying">Buying</MudChip>
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Style="text-transform:none; margin-bottom: 20px;"
                           OnClick="Create" Size="Size.Large">Create</MudButton>
                @if (selectedItems.Any())
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteOutline" Style="text-transform:none; margin-bottom: 20px;"
                               Color="Color.Error" OnClick="DeleteSelectedItems" Size="Size.Large">Delete</MudButton>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <MudTable @ref="_table" T="GoodReceipt" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px"
                      OnRowClick="@OnRowClick" Virtualize="true" Filter="new Func<GoodReceipt,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Good Receipts</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Goods Receipt ID</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Grand Total</MudTh>
                    <MudTh>Document Date</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Goods Receipt Number">@context.GoodReceiptID</MudTd>
                    <MudTd DataLabel="Title">@context.GoodReceiptName</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd DataLabel="Total Amount">@context.TotalAmount</MudTd>
                    <MudTd DataLabel="Document Date">@context.DocumentDate.ToString("MM/dd/yyyy")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </div>
    </div>
</div>

@code {
    private string searchString1 = "";
    private MudTable<GoodReceipt> _table;
    private bool _selectOnRowClick = true;
    private IEnumerable<GoodReceipt> Elements = new List<GoodReceipt>();
    private HashSet<GoodReceipt> selectedItems = new HashSet<GoodReceipt>();

    protected override async Task OnInitializedAsync()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        Elements = await db.QueryAsync<GoodReceipt>("SELECT * FROM GoodReceipt");
    }

    void OnRowClick(TableRowClickEventArgs<GoodReceipt> args)
    {
        goodsreceipt.GoodReceiptID = args.Item.GoodReceiptID;
        NavigationManager.NavigateTo($"/goodsreceipt/{goodsreceipt.GoodReceiptID}");
    }

    private bool FilterFunc1(GoodReceipt element) => FilterFunc(element, searchString1);

    private bool FilterFunc(GoodReceipt element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.GoodReceiptName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.GoodReceiptID} {element.TotalAmount} {element.CreationDate}".Contains(searchString)) return true;

        return false;
    }

    private void Create()
    {
        NavigationManager.NavigateTo($"/goodsreceipt/new-goods-receipt", forceLoad: true);
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems == null || !selectedItems.Any())
        {
            Snackbar.Add("No items selected to delete", Severity.Info);
            return;
        }

        var itemsToDelete = selectedItems.Where(item => item.Status == "Draft" || item.Status == "Cancelled").ToList();
        if (itemsToDelete.Count == 0)
        {
            Snackbar.Add("No items with status 'Draft' or 'Cancelled' to delete", Severity.Info);
            return;
        }

        try
        {
            foreach (var item in itemsToDelete)
            {
                OutputClass output = new OutputClass();
                output = crud.CRD2(item, "CreateGoodReceipt", IsDelete: true, outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    Snackbar.Add(output.ErrorMessage, Severity.Error);
                    return;
                }
            }

            Elements = Elements.Where(e => !itemsToDelete.Any(d => d.GoodReceiptID == e.GoodReceiptID)).ToList();
            Snackbar.Add($"{itemsToDelete.Count} items deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error deleting items: " + ex.Message, Severity.Error);
        }

        selectedItems.Clear();
        StateHasChanged();
    }
}