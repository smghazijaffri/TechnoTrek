@page "/vendorquotation/new-vendor-quotation"
@page "/vendorquotation/{VQNumber?}"

@using SharedClass.Components.Pages.Modals
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Vendor vendor;
@inject Connection con;
@inject QU_Items QUItem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject Quotation purchase;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @header
                @if (IsSaving)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
                }
                @if (IsApproved)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Submitted</MudChip>
                }
                @if (IsCancelled)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
                }
                @if (IsExpired)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Expired</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!IsApproved && !IsCancelled)
            {
                <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                    @GetSubmitButtonText()
                </button>
            }
            @if (IsApproved && !IsCancelled)
            {
                <div class="dropdown m-1" id="dropdown">
                    <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                    <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                        <li class="btn ms-2 m-1 text-sm-start" @onclick="CreatePO">Purchase Order</li>
                    </ul>
                </div>
                <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                    Cancel
                </button>
            }
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-md-6" hidden="@DisplayPO">
                <label class="form-label">Vendor Quotation Number</label>
                <input type="text" class="form-control" @bind="purchase.QuotationID" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor</label>
                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownVendor.CloseDropdown(e)">
                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownVendor.ToggleDropdown()" @bind="vendor.VendorName"
                           placeholder="Select a Vendor" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterVendorOptions(e)" />
                    <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownVendor.ListItems[0].IsDropdownOpen ? "block" : "none");"
                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                        <li>
                            @if (DropDownVendor.ListItems[0].FilteredOptions != null)
                            {
                                @foreach (var option in DropDownVendor.ListItems[0].FilteredOptions)
                                {
                                    <a class="dropdown-item" @onclick="() => SelectVendorOption(option)">@option.Text</a>
                                    <hr class="m-1 border-primary" />
                                }
                            }
                            <button @onclick="NavigateVendor" class="text-info" hidden="@IsApproved"><i class="bi bi-plus h5 ms-2 m-1" />Create new Vendor</button>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Date</label>
                <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
            </div>
            @* <div class="col-md-6">
        <label class="form-label">Valid Till</label>
        <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
        </div> *@
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Address and Contact</h5>
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-md-6">
                <label class="form-label">Vendor Address</label>
                <input type="text" class="form-control" @bind="vendor.Address" readonly>
            </div>
            @* <div class="col-md-6">
        <label class="form-label">company shipping address</label>
        <input type="text" class="form-control" @bind="purchase.companyshippingaddress" readonly>
        </div> *@
            <div class="col-md-6">
                <label class="form-label">Vendor Contact</label>
                <input type="text" class="form-control" @bind="vendor.Contact" readonly>
            </div>
            @*  <div class="col-md-6">
        <label class="form-label">company billing address</label>
        <input type="text" class="form-control" @bind="purchase.companybillingaddress" readonly>
        </div>  *@
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Items</h5>
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <table class="table size table-hover">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Item
                        </th>
                        <th class="col col-auto" style="width: 70px;">
                            Quantity
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            UOM
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Rate
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Amount
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        item.RowID = index + 1;
                        var rowIndex = item.RowID - 1;
                        DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                        DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                        item.Amount = (item.Rate * item.Quantity);
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@IsApproved" />
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@IsApproved">Delete</button>
                                </div>
                            </td>
                            <td>
                                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                           placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                        <li>
                                            @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button href="#" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                        </li>
                                    </ul>
                                </div>
                            </td>

                            <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                            <td>
                                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex)" @bind="item.UOM"
                                           placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                        style="max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                        <li>
                                            <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                                @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                                {
                                                    @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                    {
                                                        <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                        <hr class="m-1 border-primary" />
                                                    }
                                                }
                                                <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                            <td><input type="text" inputmode="numeric" id="rate" class="form-control" @bind="item.Rate" readonly="@ReadonlyHidden" /></td>
                            <td><input type="text" class="form-control" @bind="item.Amount" readonly /></td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill" @onclick="AddRow" hidden="@IsApproved">Add Row</button>
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-md-6">
                <label class="form-label">Total Quantity</label>
                <input type="text" class="form-control" value="@SumQuantity" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Total Amount</label>
                <input type="text" class="form-control" value="@SumAmounts" readonly="@IsApproved">
            </div>
        </form>
    </div>
    <script>
        function toggleDropdown() {
            var dropdownMenu = document.getElementById("dropdownMenu");
            dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
        }
        $('#quantity').on('input', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
        });
        $('#quantity').on('paste', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
        }); $('#rate').on('input', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
        });
        $('#rate').on('paste', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
        });
    </script>
}

@code {
    [Parameter]
    public string? VQNumber { get; set; }
    private string header = "New Vendor Quotation";

    bool isLoading = false;
    private bool IsDraft = false;
    private bool IsSaving = true;
    private bool DisplayPO = true;
    private bool IsApproved = false;
    private bool IsRejected = false;
    private bool IsSubmitted = false;
    private bool IsCancelled = false;
    private bool IsExpired = false;
    public bool isAuthorized { get; set; }
    public bool ReadonlyHidden { get { return IsCancelled || IsApproved; } }

    public DropDown DropDownUOM = new DropDown();
    public DropDown DropDownItem = new DropDown();
    public SingleDropDown DropDownVendor = new SingleDropDown();

    List<int> IsDelete = new List<int>();
    private List<string> UOMList { get; set; }
    public List<string> ItemName = new List<string>();
    private List<QU_Items> Items = new List<QU_Items>();

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            try
            {
                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    purchase.DocumentDate = DateTime.Now;
                    var RFQNumber = string.Empty;
                    var VendorID = string.Empty;

                    if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "RFQNumber"))
                    {
                        RFQNumber = await _protectedLocalStore.GetLocalAsync<string>("RFQNumber");
                    }
                    if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "VendorID"))
                    {
                        VendorID = await _protectedLocalStore.GetLocalAsync<string>("VendorID");
                    }

                    if (VQNumber != null)
                    {
                        purchase = db.QueryFirstOrDefault<Quotation>("Select * from Quotation where QuotationID = @QuotationID", new { QuotationID = VQNumber });
                        if (purchase == null)
                            NavigationManager.NavigateTo("/vendorquotation/");
                        Items = db.Query<QU_Items>("select * from QU_Items where QuotationID = @QuotationID", new { QuotationID = VQNumber }).ToList();
                        ItemName = db.Query<string>("select ItemName from QU_Items inner join Items on Item = ItemCode  where QuotationID = @QuotationID", new { QuotationID = VQNumber }).ToList();
                        vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join Quotation po on po.VendorID = v.VendorID where QuotationID = @QuotationID", new { QuotationID = VQNumber });


                        DisplayPO = false;
                        header = purchase.QuotationName;
                        if (purchase.Status == PurchaseStatuses.Submitted)
                        {
                            IsApproved = true;
                            IsSaving = false;
                        }
                        else if (purchase.Status == PurchaseStatuses.Draft)
                        {
                            IsDraft = true;
                            IsSaving = false;
                        }
                        else if (purchase.Status == PurchaseStatuses.Cancelled)
                        {
                            IsCancelled = true;
                            IsSaving = false;
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(RFQNumber))
                    {

                        purchase.VendorID = VendorID;
                        Items = db.Query<QU_Items>("select * from RFQ_Items where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                        ItemName = db.Query<string>("select ItemName from RFQ_Items inner join Items on Item = ItemCode  where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                        vendor = db.QueryFirstOrDefault<Vendor>("select * from Vendor where VendorID  = @VendorID", new { VendorID = VendorID });
                        purchase.RefrenceDocument = RFQNumber;
                        await _protectedLocalStore.SetLocalAsync("RFQNumber", "");
                        await _protectedLocalStore.SetLocalAsync("VendorID", "");
                    }
                    else
                    {
                        AddRow();
                    }
                    DropDownVendor.Options = db.Query<option>("Select VendorID as Value, VendorName as Text from Vendor").ToList();
                    DropDownItem.Options = db.Query<option>("select ItemCode as Value, ItemName as Text from Items").ToList();
                    DropDownUOM.Options = db.Query<option>("select UOMName as Text , UOMName as Value from UOM").ToList();
                }
                StateHasChanged();
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePO();
                if (validate != null)
                {
                    return validate;
                }
                StringBuilder titleBuilder = new StringBuilder("Quotation for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append(".");
                }

                purchase.QuotationName = titleBuilder.ToString();
                header = titleBuilder.ToString();
                purchase.TotalAmount = SumAmounts;
                purchase.TotalQuantity = SumQuantity;
                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurchaseStatuses.Submitted;
                }
                // else if (IsApproved)
                // {
                //     purchase.Status = PurchaseStatuses.Cancelled;
                // }
                else if (IsExpired)
                {
                    purchase.Status = PurchaseStatuses.Expired;
                }

                purchase.QuotationID = crud.CRD(purchase, "CreateQuotation");

                foreach (var PO in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PO.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PO.QuotationID = purchase.QuotationID;
                    DisplayPO = false;
                    crud.CRD(PO, "QUItems");
                }

                foreach (var del in IsDelete)
                {
                    QUItem.RowID = del;
                    QUItem.QuotationID = purchase.QuotationID;
                    crud.CRD(QUItem, "QUItems", IsDelete: true);
                }
                IsDelete.Clear();
                ToggleApproval();
                if (VQNumber == null)
                {
                    NavigationManager.NavigateTo($"/vendorquotation/{purchase.QuotationID}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Quotation Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Vendor Quotation Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Vendor Quotation Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.QuotationID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Pending && !IsApproved) { return "Quotation has already been submitted changes cannot be done"; }
                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) { return "This Quotation has already been Cancelled"; }
                }
                else
                {
                    return "Quotation ID does not exist";
                }
            }
            if (purchase.DocumentDate == null) return "Please Enter Document Date";

            if (string.IsNullOrWhiteSpace(purchase.VendorID)) return $"Please select Vendor";
            if (string.IsNullOrWhiteSpace(vendor.VendorName)) { return "Please select Vendor"; }

            if (!DropDownVendor.Options.Any(option => option.Text == vendor.VendorName)) return "Please Enter Valid Vendor";

            foreach (var PO in Items)
            {
                if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please select Item on Row: {PO.RowID}";

                if (string.IsNullOrWhiteSpace(ItemName[PO.RowID - 1])) return $"Please Enter Item on Row: {PO.RowID}";

                if (string.IsNullOrWhiteSpace(PO.UOM)) return $"Please Enter UOM on Row: {PO.RowID}";

                if (PO.Quantity <= 0) return $"Row {PO.RowID}: Quantity cannot be less than or equal to 0";

                if (PO.Rate <= 0) return $"Row {PO.RowID}: Rate cannot be less than or equal to 0";

                if (!DropDownItem.Options.Any(option => option.Text == ItemName[PO.RowID - 1])) return $"Item on Row: {PO.RowID} does not exist";
            }

            return null;
        }
    }

    public void SavePO()
    {

        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsApproved)
        {
            IsCancelled = true;
            IsSaving = false;
            IsApproved = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new QU_Items
            {
                Quantity = 1
            });
        ItemName.Add("");
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterVendorOptions(ChangeEventArgs e)
    {
        bool result = DropDownVendor.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownVendor.ListItems[0].FilteredOptions.Any(option => option.Text == purchase.VendorID))
            {
                purchase.VendorID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectVendorOption(option options)
    {
        bool result = DropDownVendor.SelectOption(options);
        if (result == false)
        {
            vendor.VendorName = options.Text;
            purchase.VendorID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                vendor = db.QueryFirstOrDefault<Vendor>("Select * from Vendor where VendorID = @VendorID", new { VendorID = options.Value });
            }
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {
            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(option options, int rowIndex)
    {
        bool result = DropDownUOM.SelectOption(options, rowIndex);
        if (result == false)
        {
            Items[rowIndex].UOM = options.Value;
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });
            if (GetStatus == PurchaseStatuses.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Quotation has already been Cancelled", Severity.Error);
                return;
            }
        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Vendor Quotation", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.QuotationID;
            cancelall.type = "Quotation";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    public void CreatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });

            if (GetStatus != PurchaseStatuses.Submitted)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Quotation has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Quotation ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("QuotationID", purchase.QuotationID);
            NavigationManager.NavigateTo("/purchaseorder/new-purchase-order");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateVendor()
    {
        NavigationManager.NavigateTo($"/vendors/new-vendor", forceLoad: true);
    }
}