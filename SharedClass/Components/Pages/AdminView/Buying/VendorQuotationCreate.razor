@page "/vendorquotation/new-vendor-quotation"
@page "/vendorquotation/{QuotationID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Vendor vendor;
@inject Connection con;
@inject QU_Items QUItem;
@inject ISnackbar Snackbar;
@inject Quotation purchase;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (IsApproved)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Submitted</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (IsExpired)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Expired</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsApproved && !IsCancelled)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                @GetSubmitButtonText()
            </button>
        }
        @if (IsApproved && !IsCancelled)
        {
            <div class="dropdown m-1" id="dropdown">
                <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                    <li class="btn ms-2 m-1 text-sm-start" @onclick="CreatePO">Purchase Order</li>
                </ul>
            </div>
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplayPO">
            <label class="form-label">Vendor Quotation ID</label>
            <input type="text" class="form-control" @bind="purchase.QuotationID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownVendor.CloseDropdown(e)">
                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownVendor.ToggleDropdown()" @bind="vendor.VendorName"
                       placeholder="Select a Vendor" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterVendorOptions(e)" />
                <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownVendor.ListItems[0].IsDropdownOpen ? "block" : "none");"
                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                    <li>
                        @if (DropDownVendor.ListItems[0].FilteredOptions != null)
                        {
                            @foreach (var option in DropDownVendor.ListItems[0].FilteredOptions)
                            {
                                <a class="dropdown-item" @onclick="() => SelectVendorOption(option)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                <hr class="m-1 border-primary" />
                            }
                        }
                        <button @onclick="NavigateVendor" class="text-info" hidden="@IsApproved"><i class="bi bi-plus h5 ms-2 m-1" />Create new Vendor</button>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Address and Contact</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Vendor Address</label>
            <input type="text" class="form-control" @bind="vendor.Address" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor Contact</label>
            <input type="text" class="form-control" @bind="vendor.Contact" readonly>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        UOM
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    var rowIndex = index;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * (item.Quantity * quantity[index]));
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@IsApproved" />
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>

                        <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex,true)" @bind="UOMName[rowIndex]"
                                       placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                    style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" id="rate" class="form-control" @bind="item.Rate" /></td>
                        <td><input type="text" class="form-control" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" class="form-control" value="@SumQuantity" readonly="@IsApproved">
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" class="form-control" value="@SumAmounts" readonly="@IsApproved">
        </div>
    </form>
</div>
<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
    $('#quantity').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#quantity').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    }); $('#rate').on('input', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
    $('#rate').on('paste', function () {
        debugger;
        var inputValue = $(this).val();
        var nonNumberRegex = /[^0-9]|[-]{2,}/g;

        if (nonNumberRegex.test(inputValue)) {
            $(this).val(inputValue.replace(nonNumberRegex, ''));
        }
    });
</script>

@code {
    [Parameter]
    public string? QuotationID { get; set; }

    string? DeviceType { get; set; }
    string header = "New Vendor Quotation";

    bool IsDraft = false;
    bool IsSaving = true;
    bool isMobile = false;
    bool DisplayPO = true;
    bool IsExpired = false;
    bool IsApproved = false;
    bool IsCancelled = false;
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool ReadonlyHidden { get { return IsCancelled || IsApproved; } }

    DropDown DropDownUOM = new DropDown();
    DropDown DropDownItem = new DropDown();
    SingleDropDown DropDownVendor = new SingleDropDown();

    List<int> quantity = new List<int>();
    List<int> IsDelete = new List<int>();
    List<string> UOMName = new List<string>();
    List<string> ItemName = new List<string>();
    List<QU_Items> Items = new List<QU_Items>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;

        if (!crud.CheckPermission(7))
        {
            Snackbar.Clear();
            Snackbar.Add("Access Denied", Severity.Error);
            NavigationManager.NavigateTo("/dashboard/", forceLoad: true);
        }

        var RFQNumber = string.Empty;
        var VendorID = string.Empty;

        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "RFQNumber"))
        {
            RFQNumber = await _protectedLocalStore.GetLocalAsync<string>("RFQNumber");
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "VendorID"))
        {
            VendorID = await _protectedLocalStore.GetLocalAsync<string>("VendorID");
        }

        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;

                if (QuotationID != null)
                {
                    purchase = db.QueryFirstOrDefault<Quotation>("Select * from Quotation where QuotationID = @QuotationID", new { QuotationID = QuotationID });
                    if (purchase == null)
                        NavigationManager.NavigateTo("/vendorquotation/");
                    Items = db.Query<QU_Items>("select * from QU_Items where QuotationID = @QuotationID", new { QuotationID = QuotationID }).ToList();
                    ItemName = db.Query<string>("select ItemName from QU_Items inner join Items on Item = ItemCode  where QuotationID = @QuotationID", new { QuotationID = QuotationID }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select v.* from Vendor v inner join Quotation po on po.VendorID = v.VendorID where QuotationID = @QuotationID", new { QuotationID = QuotationID });
                    UOMName = db.Query<string>("select UOMName from QU_Items pr inner join UOM u on pr.UOM = u.UOMID where QuotationID = @QuotationID", new { QuotationID = QuotationID }).ToList();
                    quantity = db.Query<int>("select StockQuantity from UOM Inner Join QU_Items on UOM = UOMID  where QuotationID = @QuotationID", new { QuotationID = QuotationID }).ToList();

                    DisplayPO = false;
                    header = purchase.QuotationName;
                    if (purchase.Status == PurchaseStatuses.Submitted)
                    {
                        IsApproved = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Draft)
                    {
                        IsDraft = true;
                        IsSaving = false;
                    }
                    else if (purchase.Status == PurchaseStatuses.Cancelled)
                    {
                        IsCancelled = true;
                        IsSaving = false;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(RFQNumber))
                {
                    purchase.VendorID = VendorID;
                    Items = db.Query<QU_Items>("select Item,UOM,RequiredBy,Quantity from RFQ_Items where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                    ItemName = db.Query<string>("select ItemName from RFQ_Items inner join Items on Item = ItemCode where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                    vendor = db.QueryFirstOrDefault<Vendor>("select * from Vendor where VendorID  = @VendorID", new { VendorID = VendorID });
                    quantity = db.Query<int>("select StockQuantity from UOM Inner Join RFQ_Items on UOM = UOMID  where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                    UOMName = db.Query<string>("select UOMName from RFQ_Items pr inner join UOM u on pr.UOM = u.UOMID where RFQNumber = @RFQNumber", new { RFQNumber = RFQNumber }).ToList();
                    purchase.RefrenceDocument = RFQNumber;
                    await _protectedLocalStore.SetLocalAsync("RFQNumber", "");
                    await _protectedLocalStore.SetLocalAsync("VendorID", "");
                }
                else
                {
                    AddRow();
                }
                DropDownVendor.Options = db.Query<Option>("Select VendorID as Value, VendorName as Text, VendorType as Type from Vendor WHERE Status = 'Enabled'").ToList();
                DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items WHERE Status = 'Enabled'").ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            StateHasChanged();
            base.OnInitialized();
        }
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePO();
                if (validate != null)
                {
                    return validate;
                }
                StringBuilder titleBuilder = new StringBuilder("Quotation for ");

                if (Items.Count > 2)
                {
                    for (int i = 0; i < 2; i++)
                    {
                        titleBuilder.Append(ItemName[i]);
                        titleBuilder.Append(", ");
                    }
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }
                else
                {
                    foreach (string data in ItemName)
                    {
                        titleBuilder.Append(data);
                        titleBuilder.Append(", ");
                    }

                    if (Items.Count > 0)
                    {
                        titleBuilder.Length -= 2;
                        titleBuilder.Append(".");
                    }
                }

                purchase.QuotationName = titleBuilder.ToString();
                header = titleBuilder.ToString();
                purchase.TotalAmount = SumAmounts;
                purchase.TotalQuantity = SumQuantity;
                if (IsSaving)
                {
                    purchase.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurchaseStatuses.Submitted;
                }
                else if (IsExpired)
                {
                    purchase.Status = PurchaseStatuses.Expired;
                }
                DataTable ItemTable = Select.ItemTable();
                foreach (var item in Items)
                {
                    ItemTable.Rows.Add(item.RowID, item.Item, item.Quantity, item.UOM, item.Rate, item.Amount, null);
                }
                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                var parameters = new DynamicParameters(purchase);
                parameters.Add("@QUItems", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteQUItems", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass outputClass = crud.CRD3(parameters, "CreateQuotation", outputMessage: true, errorMessage: true);
                if (outputClass.ErrorMessage != null)
                {
                    return outputClass.ErrorMessage;
                }
                purchase.QuotationID = outputClass.Output;
                // purchase.QuotationID = crud.CRD(purchase, "CreateQuotation");

                // foreach (var PO in Items)
                // {
                //     foreach (int del in IsDelete)
                //     {
                //         if (PO.RowID == del)
                //         {
                //             IsDelete.Remove(del);
                //         }
                //     }
                //     PO.QuotationID = purchase.QuotationID;
                //     DisplayPO = false;
                //     crud.CRD(PO, "QUItems");
                // }

                // foreach (var del in IsDelete)
                // {
                //     QUItem.RowID = del;
                //     QUItem.QuotationID = purchase.QuotationID;
                //     crud.CRD(QUItem, "QUItems", IsDelete: true);
                // }
                IsDelete.Clear();
                ToggleApproval();
                if (QuotationID == null)
                {
                    NavigationManager.NavigateTo($"/vendorquotation/{purchase.QuotationID}", forceLoad: true);
                }
                else
                {
                    Items = db.Query<QU_Items>("select * from QU_Items where QuotationID = @QuotationID", new { QuotationID = QuotationID }).ToList();
                }
                if (IsDraft)
                {
                    return "Quotation Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Vendor Quotation Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Vendor Quotation Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (purchase.QuotationID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });
                if (GetStatus != null)
                {
                    if (GetStatus == PurchaseStatuses.Pending && !IsApproved) { return "Quotation has already been submitted changes cannot be done"; }
                    if (GetStatus == PurchaseStatuses.Cancelled && !IsCancelled) { return "This Quotation has already been Cancelled"; }
                }
                else
                {
                    return "Quotation ID does not exist";
                }
            }
            if (purchase.DocumentDate == null) return "Please Enter Document Date";

            if (string.IsNullOrWhiteSpace(purchase.VendorID)) return $"Please select Vendor";
            if (string.IsNullOrWhiteSpace(vendor.VendorName)) { return "Please select Vendor"; }

            if (!DropDownVendor.Options.Any(option => option.Text == vendor.VendorName)) return "Please Enter Valid Vendor";
            int count = 0;
            if (Items.Count > 0)
            {
                foreach (var PO in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please select Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(PO.UOM)) return $"Please Enter UOM on Row: {count}";

                    if (PO.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";

                    if (PO.Rate <= 0) return $"Row {count}: Rate cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }

            return null;
        }
    }

    public void SavePO()
    {

        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsApproved)
        {
            IsCancelled = true;
            IsSaving = false;
            IsApproved = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new QU_Items
            {
                Quantity = 1
            });
        ItemName.Add("");
        UOMName.Add("");
        quantity.Add(0);
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                UOMName.RemoveAt(i);
                quantity.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterVendorOptions(ChangeEventArgs e)
    {
        bool result = DropDownVendor.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownVendor.ListItems[0].FilteredOptions.Any(option => option.Text == purchase.VendorID))
            {
                purchase.VendorID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectVendorOption(Option options)
    {
        bool result = DropDownVendor.SelectOption(options);
        if (result == false)
        {
            vendor.VendorName = options.Text;
            purchase.VendorID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                vendor = db.QueryFirstOrDefault<Vendor>("Select * from Vendor where VendorID = @VendorID", new { VendorID = options.Value });
            }
            HandleFormInput();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                if (Items[rowIndex].Item != options.Value)
                {
                    UOMName[rowIndex] = "";
                }
                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                // Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                DropDownUOM.ListItems[rowIndex].FilteredOptions = db.Query<Option>("select UOMName as Text, UOMID as Value from UOM WHERE Status = 'Enabled'", new { ItemID = options.Value }).ToList();
                HandleFormInput();
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                Items[rowIndex].UOM = options.Value;
                quantity[rowIndex] = db.QueryFirstOrDefault<int>("select StockQuantity from UOM where UOMID = @UOMID", new { UOMID = options.Value });
                HandleFormInput();
            }
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });
            if (GetStatus == PurchaseStatuses.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Quotation has already been Cancelled", Severity.Error);
                return;
            }
        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Vendor Quotation", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = purchase.QuotationID;
            cancelall.type = "Quotation";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    public void CreatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from Quotation where QuotationID = @QuotationID", new { QuotationID = purchase.QuotationID });

            if (GetStatus != PurchaseStatuses.Submitted)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Order Quotation has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Quotation ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("QuotationID", purchase.QuotationID);
            NavigationManager.NavigateTo("/purchaseorder/new-purchase-order");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateVendor()
    {
        NavigationManager.NavigateTo($"/vendors/new-vendor", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}