@page "/item/new-item"
@page "/item/{ItemID?}"

@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject ItemUOM itemuom;
@inject ItemClass items;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject Compatibility compatibility;
@inject AlternateItem alternateitem;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;
@inject NavigationManager NavigationManager;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @header
                @if (IsSaving)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsEnabled)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Enabled</MudChip>
                }
                @if (IsDisabled)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Disabled</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            <button type="submit" class="btn btn-primary rounded-3 text-sm-center" @onclick="SaveUOM">
                Save
            </button>
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Name and Type</h5>
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-md-6" hidden>
                <label class="form-label">Item ID</label>
                <input type="text" class="form-control" @bind="items.ItemID" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Item Name</label>
                <input type="text" @bind="items.ItemName" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label">Item Type</label>
                <input type="text" @bind="items.ItemType" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label">Standard Selling Rate</label>
                <input type="text" inputmode="numeric" id="num" @bind="items.Sellingrate" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label">Lead Time in Days</label>
                <input type="text" inputmode="numeric" id="num" @bind="items.LeadTime" class="form-control">
                <label class="form-label">Average time taken by the supplier to deliver</label>
            </div>
            <div class="col-md-6">
                <MudCheckBox @bind-Value="@Disabled" Size="Size.Small" Dense="true" Label="Disabled"></MudCheckBox>
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light" style="max-height: 400px; overflow-y: auto;">
        <h5>Description</h5>
        <form class="" @oninput="HandleFormInput" autocomplete="off">
            <div class="col-3 p-3 mb-2">
                <label class="form-label">Brand</label>
                <input type="text" class="form-control" @bind="items.Brand">
            </div>
            <div class="col-sm-9 p-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" id="exampleFormControlTextarea1" @bind="items.Description" rows="5"></textarea>
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Units of Measure</h5>
        <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
            <table class="table size table-hover">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Unit of Measure
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @for (int index = 0; index < ItemUOM.Count; index++)
                    {
                        var item = ItemUOM[index];
                        item.RowID = index + 1;
                        var rowIndex = item.RowID - 1;
                        DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@ReadonlyHidden">Delete</button>
                                </div>
                            </td>
                            <td>
                                <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                    <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex)" @bind="item.UOMID"
                                           placeholder="Select Unit of Measure" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)"
                                        style="max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                        <li>
                                            <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                                @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                                {
                                                    @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                    {
                                                        <a class="dropdown-item" bind="@item.UOMID" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                        <hr class="m-1 border-primary" />
                                                    }
                                                }
                                                <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="row m-3 p-3 rounded-3 shadow-sm bg-light" style="max-height: 300px; overflow-y: auto;">
                <h5>Compatability</h5>
                <label class="form-label">Check Compatible Items</label>
                <form class="" @oninput="HandleFormInput" autocomplete="off">
                    @foreach (var item in itemsFromDatabase)
                    {
                        <div>
                            <MudCheckBox @bind-Value="@item.Compatible" Color="Color.Info" Label="@item.ItemName"></MudCheckBox>
                        </div>
                    }
                </form>
            </div>
        </div>
        <div class="col">
            <div class="row m-3 p-3 rounded-3 shadow-sm bg-light" style="max-height: 300px; overflow-y: auto;">
                <h5>Alternatives</h5>
                <label class="form-label">Check Alternate Items</label>
                <form class="" @oninput="HandleFormInput" autocomplete="off">
                    @foreach (var item in itemsFromDatabase)
                    {
                        <div>
                            <MudCheckBox @bind-Value="@item.Alternate" Color="Color.Info" Label="@item.ItemName"></MudCheckBox>
                        </div>
                    }
                </form>
            </div>
        </div>
    </div>

    <script>
        function toggleDropdown() {
            var dropdownMenu = document.getElementById("dropdownMenu");
            dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
        }
        $('#num').on('input', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
        });
        $('#num').on('paste', function () {
            debugger;
            var inputValue = $(this).val();
            var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

            if (nonNumberRegex.test(inputValue)) {
                $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
            }
    </script>
}

@code {
    [Parameter]
    public string? ItemID { get; set; }
    private string header = "New Item";

    bool isLoading = false;
    private bool IsSaving = true;
    private bool Disabled = false;
    private bool IsEnabled = false;
    private bool IsDisabled = false;
    public bool isAuthorized { get; set; }
    public bool ReadonlyHidden { get { return IsEnabled || IsDisabled; } }

    List<int> IsDelete = new List<int>();
    public DropDown DropDownUOM = new DropDown();
    private List<ItemUOM> ItemUOM = new List<ItemUOM>();
    private IEnumerable<ItemClass> itemsFromDatabase = new List<ItemClass>();

    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            itemsFromDatabase = await select.GetItemsAsync();
            try
            {
                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    if (ItemID != null)
                    {
                        items = db.QueryFirstOrDefault<ItemClass>("Select * from Items where ItemID = @ItemID", new { ItemID = ItemID });
                        if (items == null)
                            NavigationManager.NavigateTo("/vendors/");
                        header = items.ItemName;
                        if (items.Status == PurchaseStatuses.Enabled)
                        {
                            IsEnabled = true;
                            IsSaving = false;
                        }
                        else if (items.Status == PurchaseStatuses.Disabled)
                        {
                            Disabled = true;
                            IsDisabled = true;
                            IsSaving = false;
                        }
                    }
                    else
                    {
                        AddRow();
                    }
                    DropDownUOM.Options = db.Query<option>("select UOMName as Text , UOMName as Value from UOM").ToList();
                }
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }

        base.OnInitialized();
    }

    public string createUOM()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateUOM();
                if (validate != null)
                {
                    return validate;
                }

                header = items.ItemName;

                if (IsEnabled)
                {
                    items.Status = PurchaseStatuses.Enabled;
                    IsSaving = false;
                }
                else if (IsDisabled)
                {
                    items.Status = PurchaseStatuses.Disabled;
                    IsSaving = false;
                }

                // foreach (var item in itemsFromDatabase)
                // {
                //     if (item.Compatible)
                //     {
                //         // Save the compatibility record to the database
                //     }
                //     if (item.Alternate)
                //     {
                //         // Save the compatibility record to the database
                //     }
                // }

                items.ItemID = crud.CRD(items, "CreateVendor");

                if (ItemID == null)
                {
                    NavigationManager.NavigateTo($"/item/{items.ItemID}", forceLoad: true);
                }
                if (IsSaving)
                {
                    return "Item Created Successfully";
                }
                else if (IsEnabled)
                {
                    return "Item Enabled Successfully";
                }
                else if (IsDisabled)
                {
                    return "Item Disabled Successfully";
                }
                else
                {
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void SaveUOM()
    {
        string notification = createUOM();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    public string ValidateUOM()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!Disabled) { IsEnabled = true; IsDisabled = false; IsSaving = false; }
            if (Disabled) { IsEnabled = false; IsDisabled = true; IsSaving = false; }
            // if (vendor.VendorID == null)
            // {
            // string GetStatus = db.QueryFirstOrDefault<string>("Select Status from Vendor where VendorID = @VendorID", new { VendorID = vendor.VendorID });
            // if (GetStatus != null)
            // {
            //     if (GetStatus == PurchaseStatuses.Enabled && !IsEnabled) { return "Vendor has already been Enabled changes cannot be done"; }

            //     if (GetStatus == PurchaseStatuses.Disabled && !IsDisabled) { return "Vendor has already been Disabled changes cannot be done"; }
            // }
            // else
            // {
            // return "Vendor does not exist";
            // }
            // }

            if (string.IsNullOrWhiteSpace(items.ItemName)) { return $"Please enter Item Name"; }
            if (string.IsNullOrWhiteSpace(items.ItemType)) { return $"Please enter Item Type"; }
            if (items.Sellingrate <= 0) { return $"Selling Rate cannot be less than or equal to 0"; }
            if (items.LeadTime <= 0) { return $"Lead Time cannot be less than or equal to 0"; }
            if (string.IsNullOrWhiteSpace(items.Brand)) { return $"Please enter Item Brand"; }
            if (string.IsNullOrWhiteSpace(items.Brand)) { return $"Please enter Item Description"; }
            if (string.IsNullOrWhiteSpace(itemuom.UOMID)) return $"Please Enter UOM on Row: {itemuom.RowID}";
            if (!items.Compatible) { return $"Please select atleast one Compatible Item"; }

            return null;
        }
    }

    private void HandleFormInput()
    {
        if (IsEnabled || (IsDisabled && Disabled))
        {
            IsSaving = true;
            Disabled = false;
            IsDisabled = false;
            IsEnabled = false;
            StateHasChanged();
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        ItemUOM.Add(new ItemUOM
            {
                ItemID = "",
            });
    }

    private void DeleteRow(int index)
    {
        for (int i = ItemUOM.Count - 1; i >= 0; i--)
        {
            if (ItemUOM[i].Selected)
            {
                IsDelete.Add(ItemUOM[i].RowID);
                ItemUOM.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == ItemUOM[rowIndex].UOMID))
            {
                ItemUOM[rowIndex].UOMID = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(option options, int rowIndex)
    {
        bool result = DropDownUOM.SelectOption(options, rowIndex);
        if (result == false)
        {
            ItemUOM[rowIndex].UOMID = options.Value;
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }
}
