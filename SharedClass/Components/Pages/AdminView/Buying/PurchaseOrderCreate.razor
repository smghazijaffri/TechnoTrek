@page "/purchaseorder/new-purchase-order"
@page "/purchaseorder/{PONumber?}"

@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@* @inject DropDown dropdown; *@
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject PurchaseOrders purchase;
@inject PurchaseOrderItems POItem;
@inject ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @Header
                @if (status == "Save" && !IsDraft)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
                }
                @if (IsApproved)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Submitted</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!IsApproved)
            {
                <button type="submit" class="btn btn-primary rounded-3 text-sm-center rz-ripple" @onclick="SavePO">@GetSubmitButtonText()</button>
            }
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6" hidden="@DisplayPO">
                <label class="form-label">PurchaseORequisition Number</label>
                <input type="text" class="form-control" @bind="purchase.PONumber" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Date</label>
                <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor</label>
                <input type="text" @bind="purchase.Vendor" class="form-control" readonly="@IsApproved">
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6">
                <label class="form-label">Vendor Address</label>
                <input type="text" class="form-control" @bind="purchase.VendorAddress" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Company Shipping Address</label>
                <input type="text" class="form-control" @bind="purchase.CompanyShippingAddress" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor Contact</label>
                <input type="text" class="form-control" @bind="purchase.VendorContact" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Company Billing Address</label>
                <input type="text" class="form-control" @bind="purchase.CompanyBillingAddress" readonly>
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Items</h5>
        <form class="row g-3" @oninput="HandleFormInput">
            <table class="table size table-hover">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Item
                        </th>
                        <th class="col col-auto" style="width: 70px;">
                            Quantity
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            UOM
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Rate
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Amount
                        </th>
                        <th class="col col-auto" style="width: 150px;">
                            Required By
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        item.RowID = index + 1;
                        var rowIndex = item.RowID - 1;
                        @* dropdown.ListItems.Add(new BindDropdown { RowIndex = index + 1, IsDropdownOpen = false, FilteredOptions = null }); *@
                        POItem.Amount = (item.Rate * item.Quantity);
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@IsApproved" />
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger rz-ripple" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@IsApproved">Delete</button>
                                </div>
                            </td>
                            <td>
                                @* <div class="dropdown" id="dropdown" @onkeydown="e => dropdown.CloseDropdown(e, rowIndex)">

                                    <input type="text" id="Item" readonly="@IsApproved" @onclick="() => dropdown.ToggleDropdown(rowIndex)" @bind="item.Item"
                                           placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterOptions(e, rowIndex)" />
                                    <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(dropdown.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                        aria-labelledby="dropdownMenuButton" hidden="@IsApproved">
                                        @if (dropdown.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in dropdown.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <li><a class="dropdown-item" bind="@item.Item" @onclick="() => SelectOption(option, rowIndex)">@option</a></li>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <li hidden="@IsApproved"><button href="#" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button></li>
                                    </ul>
                                </div>
 *@                            </td>
                            <td><input type="text" class="form-control" @bind="item.Quantity" readonly="@IsApproved" /></td>
                            <td>
                                <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" readonly="@IsApproved" />
                                <datalist id="uomOptions">
                                    <option value="Piece"></option>
                                    <option value="Each"></option>
                                    <option value="Box"></option>
                                </datalist>
                            </td>
                            <td><input type="text" list="uomOptions" class="form-control" @bind="item.Rate" readonly/></td>
                            <td><input type="text" list="uomOptions" class="form-control" @bind="POItem.Amount" readonly/></td>
                            <td>
                                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="item.RequiredBy" readonly="@IsApproved" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill rz-ripple" @onclick="AddRow" hidden="@IsApproved">Add Row</button>
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6">
                <label class="form-label">Total Quantity</label>
                <input type="text" class="form-control" @bind="purchase.TotalQuantity" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Total Amount</label>
                <input type="text" class="form-control" @bind="purchase.TotalPrice" readonly="@IsApproved">
            </div>
        </form>
    </div>
}

@code {
    private string? status;
    bool isLoading = false;
    private bool DisplayPO = true;
    [Parameter]
    public string? PONumber { get; set; }
    List<int> IsDelete = new List<int>();
    public bool isAuthorized { get; set; }
    private bool IsDraft { get; set; } = false;
    private bool IsSaving { get; set; } = false;
    private string Header = "New Purchase Order";
    private bool IsApproved { get; set; } = false;
    private bool IsRejected { get; set; } = false;
    private bool IsSubmitted { get; set; } = false;
    private List<PurchaseOrderItems> Items = new List<PurchaseOrderItems>();

    protected override async void OnInitialized()
    {
        var cookieContent = await localStorage.GetItemAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                if (PONumber != null)
                {

                }
                else
                {
                    AddRow();
                }
            }
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePO();
                if (validate != null)
                {
                    return validate;
                }
                // int CountPO = db.QueryFirstOrDefault<int>("select count(1) from PurchaseOrder where PONumber = @POnumber", new { PONumber = purchase.PONumber });
                // if (CountPO == 0)
                // {
                purchase.PONumber = "PO-001";
                // var CountNo = "";
                // int data = select.CountPOnumber();
                // if (data != 0)
                // {
                //     data += 1;
                //     var itr = data.ToString();
                //     var itNum = itr.Length;
                //     if (itNum == 1)
                //     {
                //         CountNo += "00" + itr;
                //         purchase.PONumber = purchase.PONumber + "-" + CountNo;
                //     }
                //     else if (itNum == 2)
                //     {
                //         CountNo += "0" + itr;
                //         purchase.PONumber = purchase.PONumber + "-" + CountNo;
                //     }
                //     else
                //     {
                //         purchase.PONumber = purchase.PONumber + "-" + itr;
                //     }
                // }
                // else
                // {
                //     purchase.PONumber = purchase.PONumber + "-" + "001";
                // }
                // }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Order for ");

                foreach (var data in Items)
                {
                    titleBuilder.Append(data.Item);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }

                purchase.POName = titleBuilder.ToString();
                Header = titleBuilder.ToString();

                if (status == "Save")
                {
                    purchase.Status = "Draft";
                }

                else if (status == "Submit")
                {
                    purchase.Status = "Submitted";
                }

                // crud.CRD(purchase, "CreatePurchaseRequest");

                foreach (var PO in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PO.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PO.PONumber = purchase.PONumber;
                    DisplayPO = false;
                    // crud.CRD(PO, "PurhcaseRequestItems");
                    // NavigationManager.NavigateTo($"/PurchaseRequisition/{purchase.PONumber}", forceLoad: true);
                }

                foreach (var del in IsDelete)
                {
                    // pritem.PRNumber = PurchaseRequisitionNumber;
                    POItem.RowID = del;
                    POItem.RequiredBy = DateTime.Now;
                    // crud.CRD(purchase, "CreatePurchaseOrder", System.Data.CommandType.StoredProcedure, true);
                }

                ToggleApproval();

                if (IsDraft)
                {
                    return "Purchase Request Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Purchase Request Submitted Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }

                return null;
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePO()
    {
        if (purchase.DocumentDate == null) return $"Please Enter Document Date";

        else if (purchase.Vendor == null) return $"Please Select a Vendor";

        else if (Items.Count > 0)
        {
            foreach (var PO in Items)
            {
                if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please Enter Item on No. {PO.RowID}";

                else if (string.IsNullOrWhiteSpace(PO.UOM)) return $"Please Enter UOM on No. {PO.RowID}";

                else if (PO.Quantity == 0) return $"Please Enter Quantity on No. {PO.RowID}";

                else if (PO.RequiredBy == null) return $"Please Enter Required By date on Row No. {PO.RowID}";
            }
            return null;
        }

        else return null;
    }

    public void SavePO()
    {
        string notification = createPurchase();

        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }

        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            status = "Submitted";
            return "Submitted";
        }

        else if (IsDraft)
        {
            status = "Submit";
            return "Submit";
        }

        else
        {
            status = "Save";
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }

        else if (!IsSaving)
        {
            IsDraft = true;
        }
    }

    private void Save()
    {
        IsDraft = true;
        IsSaving = true;
        IsSaving = false;
    }

    private void AddRow()
    {
        Items.Add(new PurchaseOrderItems
            {
                RequiredBy = DateTime.Now,
                Quantity = 1
            });
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            status = "Not Saved";
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }
    // public async Task FilterOptions(ChangeEventArgs e, int rowIndex)
    // {
    //     bool result = dropdown.FilterOptions(e, rowIndex);
    //     if (result == true)
    //     {
    //         if (!dropdown.ListItems[rowIndex].FilteredOptions.Contains(Items[rowIndex].Item))
    //         {
    //             Items[rowIndex].Item = "";
    //         }
    //     }
    //     await InvokeAsync(StateHasChanged);
    // }
    // private void SelectOption(string option, int rowIndex)
    // {
    //     bool result = dropdown.SelectOption(option, rowIndex);
    //     if (result == false)
    //     {
    //         Items[rowIndex].Item = option;
    //     }
    // }
}
