@page "/purchaseorder/new-purchase-order"
@page "/purchaseorder/{PONumber?}"

@using SharedClass.Components.Pages.Modals
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@* @inject DropDown dropdown; *@
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject PurchaseOrders purchase;
@inject PurchaseOrderItems POItem;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;

@if (isLoading)
{
    <div class="row p-3 align-items-center">
        <div class="col-6">
            <h3>
                @header
                @if (IsSaving)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
                }
                @if (IsApproved)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Success">Pending</MudChip>
                }
                @if (IsCancelled)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
                }
            </h3>
        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!IsApproved && !IsCancelled)
            {
                <button type="submit" class="btn btn-primary rounded-3 text-sm-center rz-ripple" @onclick="SavePO">
                    @GetSubmitButtonText()
                </button>
            }
            @if (IsApproved && !IsCancelled)
            {
                <div class="dropdown m-1" id="dropdown">
                    <button type="reset" class="btn btn-primary rounded-3 text-sm-center rz-ripple" @onclick="singledropdown.ToggleDropdown">Create</button>
                    <ul class="dropdown-menu w-100 list-group mt-1" style="display: @(singledropdown.IsDropdownOpen ? "block" : "none");">
                        <li><button href="/purchaseorder/new-purchase-order" class="ms-2 m-1 text-sm-start">Create Purchase Order</button></li>
                        <hr class="m-1 border-primary" />
                        <li><button href="#" class="ms-2 m-1 text-sm-start">Create Request For Quotation</button></li>
                    </ul>
                </div>
                <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center rz-ripple" @onclick="OpenDialog">
                    Cancel
                </button>
            }
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6" hidden="@DisplayPO">
                <label class="form-label">PurchaseORequisition Number</label>
                <input type="text" class="form-control" @bind="purchase.PurchaseOrderID" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Date</label>
                <input type="date" @bind="purchase.DocumentDate" class="form-control" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor</label>
                <input type="text" @bind="purchase.Vendor" class="form-control" readonly="@IsApproved">

               @*  <div class="dropdown" id="dropdown" @onkeydown="e => singledropdown.CloseDropdown(e)">
                    <input type="text" id="Item" readonly="@IsApproved" @onclick="() => singledropdown.ToggleDropdown()" @bind="purchase.Vendor"
                           placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e)" />
                    <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(singledropdown.IsDropdownOpen ? "block" : "none");"
                        aria-labelledby="dropdownMenuButton" hidden="@IsApproved">
                        <li>
                            @if (singledropdown.FilteredOptions != null)
                            {
                                @foreach (var option in singledropdown.FilteredOptions)
                                {
                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option)">@option.Text</a>
                                    <hr class="m-1 border-primary" />
                                }
                            }
                            <button href="#" class="text-info" hidden="@IsApproved"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                        </li>
                    </ul>
                </div> *@
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6">
                <label class="form-label">Vendor Address</label>
                <input type="text" class="form-control" @bind="purchase.VendorAddress" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Company Shipping Address</label>
                <input type="text" class="form-control" @bind="purchase.CompanyShippingAddress" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Vendor Contact</label>
                <input type="text" class="form-control" @bind="purchase.VendorContact" readonly>
            </div>
            <div class="col-md-6">
                <label class="form-label">Company Billing Address</label>
                <input type="text" class="form-control" @bind="purchase.CompanyBillingAddress" readonly>
            </div>
        </form>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <h5>Items</h5>
        <form class="row g-3" @oninput="HandleFormInput">
            <table class="table size table-hover">
                <thead>
                    <tr>
                        <th class="col col-auto" style="width: 50px;">
                            No.
                        </th>
                        <th class="col col-auto">
                            Item
                        </th>
                        <th class="col col-auto" style="width: 70px;">
                            Quantity
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            UOM
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Rate
                        </th>
                        <th class="col col-auto text-center" style="width: 150px;">
                            Amount
                        </th>
                        <th class="col col-auto" style="width: 150px;">
                            Required By
                        </th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        item.RowID = index + 1;
                        var rowIndex = item.RowID - 1;
                        @* dropdown.ListItems.Add(new BindDropdown { RowIndex = index + 1, IsDropdownOpen = false, FilteredOptions = null });
                        POItem.Amount = (item.Rate * item.Quantity);
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center;">
                                    <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@IsApproved" />
                                    @(index + 1)
                                    <button class="ms-2 btn btn-sm btn-danger rz-ripple" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" hidden="@IsApproved">Delete</button>
                                </div>
                            </td>
                            <td>
                                @* <div class="dropdown" id="dropdown" @onkeydown="e => dropdown.CloseDropdown(e, rowIndex)">

                        <input type="text" id="Item" readonly="@IsApproved" @onclick="() => dropdown.ToggleDropdown(rowIndex)" @bind="item.Item"
                        placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterOptions(e, rowIndex)" />
                        <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(dropdown.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                        aria-labelledby="dropdownMenuButton" hidden="@IsApproved">
                        @if (dropdown.ListItems[rowIndex].FilteredOptions != null)
                        {
                        @foreach (var option in dropdown.ListItems[rowIndex].FilteredOptions)
                        {
                        <li><a class="dropdown-item" bind="@item.Item" @onclick="() => SelectOption(option, rowIndex)">@option</a></li>
                        <hr class="m-1 border-primary" />
                        }
                        }
                        <li hidden="@IsApproved"><button href="#" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button></li>
                        </ul>
                        </div>
                        </td>
                        *@
                           @*  <td><input type="text" class="form-control" @bind="item.Quantity" readonly="@IsApproved" /></td>
                            <td>
                                <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" readonly="@IsApproved" />
                                <datalist id="uomOptions">
                                    <option value="Piece"></option>
                                    <option value="Each"></option>
                                    <option value="Box"></option>
                                </datalist>
                            </td>
                            <td><input type="text" list="uomOptions" class="form-control" @bind="item.Rate" readonly /></td>
                            <td><input type="text" list="uomOptions" class="form-control" @bind="POItem.Amount" readonly /></td>
                            <td>
                                <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="item.RequiredBy" readonly="@IsApproved" />
                            </td>
                        </tr> *@
                    }
                </tbody>
            </table>
        </form>
        <div class="col-12">
            <button class="btn btn-primary rounded-pill rz-ripple" @onclick="AddRow" hidden="@IsApproved">Add Row</button>
        </div>
    </div>

    <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
        <form class="row g-3" @oninput="HandleFormInput">
            <div class="col-md-6">
                <label class="form-label">Total Quantity</label>
                <input type="text" class="form-control" @bind="purchase.TotalQuantity" readonly="@IsApproved">
            </div>
            <div class="col-md-6">
                <label class="form-label">Total Amount</label>
                <input type="text" class="form-control" @bind="purchase.TotalPrice" readonly="@IsApproved">
            </div>
        </form>
    </div>
}

@code {
    private string? status;
    [Parameter]
    public string? PONumber { get; set; }
    private string header = "New Purchase Order";

    bool isLoading = false;
    private bool IsDraft = false;
    private bool IsSaving = true;
    private bool DisplayPO = true;
    private bool IsApproved = false;
    private bool IsRejected = false;
    private bool IsSubmitted = false;
    private bool IsCancelled = false;
    public bool isAuthorized { get; set; }

    public DropDown DropDownUOM = new DropDown();
    public DropDown DropDownItem = new DropDown();

    List<int> IsDelete = new List<int>();
    private List<string> UOMList { get; set; }
    public List<string> ItemName = new List<string>();
    private List<PurchaseOrderItems> Items = new List<PurchaseOrderItems>();

    protected override async void OnInitialized()
    {
        var cookieContent = await localStorage.GetItemAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                purchase.DocumentDate = DateTime.Now;
                if (PONumber != null)
                {
                    // singledropdown.IsDropdownOpen = false;
                    // purchase = db.QueryFirstOrDefault<PurchaseOrders>("select * from PurchaseOrder where POnumber = @POnumber", new { PONumber = PONumber });
                    // Items = db.Query<PurchaseOrderItems>("Select * from PR_Items where PRNumber = @PRNumber", new { PONumber = PONumber }).ToList();
                    // ItemName = db.Query<string>("select ItemName from PR_Items inner join Items on Item = ItemCode  where PRNumber = @PRNumber", new { PRNumber = PONumber }).ToList();
                    // if (purchase == null || Items.Count == 0)
                    // { NavigationManager.NavigateTo("/purchaserequisition/"); }

                    // DisplayPO = false;
                    // header = purchase.PurchaseOrderName;
                    // if (purchase.Status == PurhcaseStatuses.Pending)
                    // {
                    //     IsApproved = true;
                    //     IsSaving = false;
                    // }
                    // else if (purchase.Status == PurhcaseStatuses.Draft)
                    // {
                    //     IsDraft = true;
                    //     IsSaving = false;
                    // }
                    // else if (purchase.Status == PurhcaseStatuses.Cancelled)
                    // {
                    //     IsCancelled = true;
                    //     IsSaving = false;
                    // }
                }
                else
                {
                    AddRow();
                }
                singledropdown.Options = db.Query<string>("select Unit from UOM").ToList();
                DropDownItem.Options = db.Query<option>("select ItemCode as Value, ItemName as Text from Items").ToList();
                DropDownUOM.Options = db.Query<option>("select unit as Text , unit as Value from UOM").ToList();
            }
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }
                int CountPR = db.QueryFirstOrDefault<int>("select count(1) from PurchaseRequest where PurchaseOrderID = @PRnumber", new { PRnumber = purchase.PurchaseOrderID });

                if (CountPR == 0)
                {
                    purchase.PurchaseOrderID = "PO";
                    var CountNo = "";
                    int data = select.CountPRnumber();
                    if (data != 0)
                    {
                        data += 1;
                        var itr = data.ToString();
                        var itNum = itr.Length;
                        if (itNum == 1)
                        {
                            CountNo += "00" + itr;
                            purchase.PurchaseOrderID = purchase.PurchaseOrderID + "-" + CountNo;
                        }
                        else if (itNum == 2)
                        {
                            CountNo += "0" + itr;
                            purchase.PurchaseOrderID = purchase.PurchaseOrderID + "-" + CountNo;
                        }
                        else
                        {
                            purchase.PurchaseOrderID = purchase.PurchaseOrderID + "-" + itr;
                        }
                    }
                    else
                    {
                        purchase.PurchaseOrderID = purchase.PurchaseOrderID + "-" + "001";
                    }
                }

                StringBuilder titleBuilder = new StringBuilder("Purhcase Order for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }

                purchase.PurchaseOrderName = titleBuilder.ToString();
                header = titleBuilder.ToString();

                if (IsSaving)
                {
                    purchase.Status = PurhcaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    purchase.Status = PurhcaseStatuses.Pending;
                }
                else if (IsApproved)
                {
                    purchase.Status = PurhcaseStatuses.Cancelled;
                }

                crud.CRD(purchase, "CreatePurchaseRequest");

                foreach (var PO in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PO.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PO.PurchaseOrderID = purchase.PurchaseOrderID;
                    DisplayPO = false;
                    crud.CRD(PO, "PurhcaseOrderItems");
                }

                foreach (var del in IsDelete)
                {
                    POItem.RowID = del;
                    POItem.PurchaseOrderID = purchase.PurchaseOrderID;
                    crud.CRD(POItem, "PurhcaseRequestItems", System.Data.CommandType.StoredProcedure, true);
                }
                IsDelete.Clear();
                ToggleApproval();
                if (PONumber == null)
                {
                    NavigationManager.NavigateTo($"/PurchaseRequisition/{purchase.PurchaseOrderID}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Order Saved Successfully";
                }

                else if (IsApproved)
                {
                    return "Purchase Order Submitted Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePR()
    {
        if (purchase.DocumentDate == null) { return "Please Enter Document Date"; }
        if (Items.Count > 0)
        {
            foreach (var PO in Items)
            {
                if (string.IsNullOrWhiteSpace(ItemName[PO.RowID - 1]))
                { return "Please Enter Item on Row: " + PO.RowID + ""; }
                else if (string.IsNullOrWhiteSpace(PO.UOM))
                { return "Please Enter UOM on Row: " + PO.RowID + ""; }
                else if (PO.Quantity == 0)
                { return "Please Enter Quantity on Row: " + PO.RowID + ""; }
                else if (PO.RequiredBy == null)
                { return "Please Enter Required By date on Row: " + PO.RowID + ""; }
                else if (!DropDownItem.Options.Any(option => option.Text == ItemName[PO.RowID - 1]))
                { return "Item on Row: " + PO.RowID + " does not exists"; }
            }
        }
        return null;
    }

    public void SavePO()
    {

        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (IsApproved)
        {
            IsCancelled = true;
            IsSaving = false;
            IsApproved = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new PurchaseOrderItems
            {
                RequiredBy = DateTime.Now,
                Quantity = 1
            });
        ItemName.Add("");
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public async Task FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SelectItemOption(option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {

            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    public void SelectUOMOption(option options, int rowIndex)
    {
        bool result = DropDownUOM.SelectOption(options, rowIndex);
        if (result == false)
        {

            Items[rowIndex].UOM = options.Value;
        }
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Purchase Request", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            createPurchase();
            ToggleApproval();
        }
    }
}
