@page "/goodissue/new-goods-issue"
@page "/goodissue/{GoodsIssueID?}"

@using SharedClass.Components.Pages.Modals
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using Microsoft.Data.SqlClient
@using System.Globalization
@using System.Reflection
@using System.Text
@using Dapper

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject GI_Items GIItems;
@inject GoodsIssue issue;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject SaleOrder saleorder;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@if (isLoading)
{
        <div class="row p-3 align-items-center">
            <div class="col-6">
                <h3>
                @header
                @if (IsSaving)
                {
                            <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
                }
                @if (IsDraft)
                {
                            <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
                }
                @if (ToBill)
                {
                            <MudChip Variant="Variant.Text" Color="Color.Warning">To Bill</MudChip>
                }
                @if (IsCancelled)
                {
                            <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
                }
                @if (IsCompleted)
                {
                            <MudChip Variant="Variant.Text" Color="Color.Success">Completed</MudChip>
                }
                </h3>
            </div>
            <div class="col-6 d-flex justify-content-end">
            @if (!ToBill && !IsCancelled && !IsCompleted)
            {
                        <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                    @GetSubmitButtonText()
                        </button>
            }
            @if (ToBill && !IsCancelled && !IsCompleted)
            {
                        <div class="dropdown m-1" id="dropdown">
                            <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                            <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                                <li><a @onclick="CreateSI" class="btn ms-2 m-1 text-sm-start">Sales Invoice</a></li>
                            </ul>
                        </div>
                        <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                            Cancel
                        </button>
            }
            </div>
        </div>

        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
            <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
                <div class="col-md-6" hidden="@DisplayPO">
                    <label class="form-label">Goods Issue Number</label>
                    <input type="text" class="form-control" @bind="issue.GoodsIssueID" readonly>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Date</label>
                    <input type="date" @bind="issue.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Customer</label>
                    <div class="dropdown" id="dropdown" @onkeydown="e => DropDownCustomer.CloseDropdown(e)">
                        <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownCustomer.ToggleDropdown()" @bind="customer.Name"
                               placeholder="Select a Customer" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterCustomerOptions(e)" />
                        <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownCustomer.ListItems[0].IsDropdownOpen ? "block" : "none");"
                            aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                            <li>
                            @if (DropDownCustomer.ListItems[0].FilteredOptions != null)
                            {
                                @foreach (var option in DropDownCustomer.ListItems[0].FilteredOptions)
                                {
                                                <a class="dropdown-item" @onclick="() => SelectCustomerOption(option)">@option.Text</a>
                                                <hr class="m-1 border-primary" />
                                }
                            }
                                <button @onclick="NavigateCustomer" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new Customer</button>
                            </li>
                        </ul>
                    </div>
                </div>
            </form>
        </div>

        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
            <h5>Address and Contact</h5>
            <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
                <div class="col-md-6">
                    <label class="form-label">Vendor Address</label>
                    <input type="text" class="form-control" @bind="customer.Address" readonly>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Vendor Contact</label>
                    <input type="text" class="form-control" @bind="customer.Contact" readonly>
                </div>
            </form>
        </div>

        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
            <h5>Items</h5>
            <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
                <table class="table size table-hover">
                    <thead>
                        <tr>
                            <th class="col col-auto" style="width: 50px;">
                                No.
                            </th>
                            <th class="col col-auto" style="min-width:150px">
                                Item
                            </th>
                            <th class="col col-auto" style="width: 160px;">
                                Quantity
                            </th>
                            <th class="col col-auto" style="width: 160px;">
                                UOM
                            </th>
                          <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                                Rate
                            </th>
                          <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                                Amount
                            </th>
                        </tr>
                    </thead>
                    <tbody id="table-body">
                    @for (int index = 0; index < Items.Count; index++)
                    {
                        var item = Items[index];
                        item.RowID = index + 1;
                        var rowIndex = item.RowID - 1;
                        DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                        DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                        item.Amount = (item.Rate * item.Quantity);
                                <tr>
                                    <td>
                                        <div style="display: flex; align-items: center;">
                                            <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                    @(index + 1)
                                            <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")">Delete</button>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                            <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                                   placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                            <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                                aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                                <li>
                                            @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                                {
                                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text</a>
                                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                                    <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>

                                    <td><input type="text" inputmode="numeric" id="quantity" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                                    <td>
                                        <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                            <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex)" @bind="UOMName[rowIndex]"
                                                   placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                            <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                                style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                                aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                                <li>
                                                    <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                                @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                                {
                                                    @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                    {
                                                                        <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                                        <hr class="m-1 border-primary" />
                                                    }
                                                }
                                                        <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                    <td><input type="text" inputmode="numeric" class="form-control" id="rate" @bind="item.Rate" readonly="@ReadonlyHidden" /></td>
                                    <td><input type="text" class="form-control" @bind="item.Amount" readonly /></td>
                                </tr>
                    }
                    </tbody>
                </table>
            </form>
            <div class="col-12">
                <button class="btn btn-primary rounded-pill" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
            </div>
        </div>

        <div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
            <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
                <div class="col-md-6">
                    <label class="form-label">Total Quantity</label>
                    <input type="text" inputmode="numeric" class="form-control" value="@SumQuantity" readonly="@ReadonlyHidden">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Total Amount</label>
                    <input type="text" inputmode="numeric" class="form-control" value="@SumAmounts" readonly="@ReadonlyHidden">
                </div>
            </form>
        </div>

        <script>
            function toggleDropdown() {
                var dropdownMenu = document.getElementById("dropdownMenu");
                dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
            }
            $('#quantity').on('input', function () {
                debugger;
                var inputValue = $(this).val();
                var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

                if (nonNumberRegex.test(inputValue)) {
                    $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
                }
            });
            $('#quantity').on('paste', function () {
                debugger;
                var inputValue = $(this).val();
                var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

                if (nonNumberRegex.test(inputValue)) {
                    $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
                }
            }); $('#rate').on('input', function () {
                debugger;
                var inputValue = $(this).val();
                var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

                if (nonNumberRegex.test(inputValue)) {
                    $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
                }
            });
            $('#rate').on('paste', function () {
                debugger;
                var inputValue = $(this).val();
                var nonNumberRegex = /[^0-9]|[-]{2,}/g; // Regex to match non-numeric characters and more than one occurrence of plus or minus sign

                if (nonNumberRegex.test(inputValue)) {
                    $(this).val(inputValue.replace(nonNumberRegex, '')); // Remove non-numeric characters and more than one occurrence of plus or minus sign
                }
            });
        </script>
}

@code {
    [Parameter]
    public string? GoodsIssueID { get; set; }
    private string header = "New Goods Issue";

    bool isMobile = false;
    string DeviceType { get; set; }

    bool isLoading = false;
    private bool ToBill = false;
    private bool IsDraft = false;
    private bool IsSaving = true;
    private bool DisplayPO = true;
    private bool IsCancelled = false;
    private bool IsCompleted = false;
    public bool isAuthorized { get; set; }
    public bool ReadonlyHidden { get { return IsCancelled || ToBill || IsCompleted; } }

    public DropDown DropDownUOM = new DropDown();
    public DropDown DropDownItem = new DropDown();
    public SingleDropDown DropDownCustomer = new SingleDropDown();

    List<int> IsDelete = new List<int>();
    private List<string> UOMList { get; set; }
    public List<string> UOMName = new List<string>();
    public List<string> ItemName = new List<string>();
    private List<GI_Items> Items = new List<GI_Items>();

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
            isLoading = true;
            try
            {
                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    issue.DocumentDate = DateTime.Now;
                    var SaleOrderID = string.Empty;
                    if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "SaleOrderID"))
                    {
                        SaleOrderID = await _protectedLocalStore.GetLocalAsync<string>("SaleOrderID");
                    }

                    if (GoodsIssueID != null)
                    {
                        issue = db.QueryFirstOrDefault<GoodsIssue>("Select * from GoodIssue where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID });
                        Items = db.Query<GI_Items>("select * from GI_Items where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                        ItemName = db.Query<string>("select ItemName from GI_Items inner join Items on Item = ItemCode where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                        UOMName = db.Query<string>("select UOMName from GI_Items inner join UOM on UOMID = UOM  where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                        customer = db.QueryFirstOrDefault<Customer>("select TOP(1)c.* from customer c inner join GoodIssue si on si.CustomerID = si.CustomerID where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID });
                        if (issue == null || Items.Count == 0)
                            NavigationManager.NavigateTo("/goodissue/");

                        DisplayPO = false;
                        header = issue.GoodsIssueName;
                        if (issue.Status == SaleStatus.ToBill)
                        {
                            ToBill = true;
                            IsSaving = false;
                        }
                        else if (issue.Status == SaleStatus.Draft)
                        {
                            IsDraft = true;
                            IsSaving = false;
                        }
                        else if (issue.Status == SaleStatus.Cancelled)
                        {
                            IsCancelled = true;
                            IsSaving = false;
                        }
                        else if (issue.Status == SaleStatus.Completed)
                        {
                            IsCompleted = true;
                            IsSaving = false;
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(SaleOrderID))
                    {
                        issue.CustomerID = db.QueryFirstOrDefault<string>("select CustomerID from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                        Items = db.Query<GI_Items>("select Quantity ,* from SO_Item where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                        ItemName = db.Query<string>("select ItemName from SO_Item inner join Items on Item = ItemCode  where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                        customer = db.QueryFirstOrDefault<Customer>("select c.* from Customer c inner join SaleOrder so on so.CustomerID = c.CustomerID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                        issue.RefrenceDocument = SaleOrderID;
                        await _protectedLocalStore.SetLocalAsync("SaleOrderID", "");
                    }
                    else
                    {
                        AddRow();
                    }
                    DropDownCustomer.Options = db.Query<option>("select CustomerID as Value, Name as Text from Customer").ToList();
                    DropDownUOM.Options = db.Query<option>("select UOMName as Text , UOMID as Value from UOM").ToList();
                    DropDownItem.Options = db.Query<option>("select ItemCode as Value, ItemName as Text from Items").ToList();


                }
                StateHasChanged();
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }

        base.OnInitialized();
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidateGR();
                if (validate != null)
                {
                    return validate;
                }
                StringBuilder titleBuilder = new StringBuilder("Goods Issue for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append(".");
                }

                issue.GoodsIssueName = titleBuilder.ToString();
                header = titleBuilder.ToString();
                issue.TotalAmount = SumAmounts;
                issue.TotalQuantity = SumQuantity;

                if (IsSaving)
                {
                    issue.Status = SaleStatus.Draft;
                }
                else if (IsDraft)
                {
                    issue.Status = SaleStatus.ToBill;
                }
                else if (IsCompleted)
                {
                    issue.Status = SaleStatus.Completed;
                }
                else if (IsCancelled)
                {
                    issue.Status = SaleStatus.Cancelled;
                }

                issue.GoodsIssueID = crud.CRD(issue, "CreateGoodIssue");
                GIItems.GoodsIssueID = issue.GoodsIssueID;
                crud.CRD(GIItems, "CreateGI_Items", IsDelete: true);

                foreach (var GI in Items)
                {
                    GI.GoodsIssueID = issue.GoodsIssueID;
                    DisplayPO = false;
                    crud.CRD(GI, "CreateGI_Items");
                }

                foreach (var del in IsDelete)
                {
                    GIItems.RowID = del;
                    GIItems.GoodsIssueID = issue.GoodsIssueID;
                    crud.CRD(GIItems, "CreateGI_Items", IsDelete: true);
                }

                IsDelete.Clear();
                ToggleApproval();

                if (GoodsIssueID == null)
                {
                    NavigationManager.NavigateTo($"/goodissue/{issue.GoodsIssueID}", forceLoad: true);
                }

                if (IsDraft)
                {
                    return "Goods issue Saved Successfully";
                }

                else if (ToBill)
                {
                    return "Goods Issue Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Goods Issue Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving Goods Issue";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidateGR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (issue.GoodsIssueID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from GoodIssue where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = issue.GoodsIssueID });
                if (GetStatus != null)
                {
                    if (GetStatus == SaleStatus.ToBill && !ToBill) { return "Goods Issue has already been submitted changes cannot be done"; }
                    if (GetStatus == SaleStatus.Cancelled && !IsCancelled) { return "This Goods Issue has already been Cancelled"; }
                }
                else
                {
                    return "Goods Issue ID does not exist";
                }
            }
            foreach (var GI in Items)
            {
                int CheckItem = 0;
                CheckItem = db.QueryFirstOrDefault<int>("Select Quantity: @quantity from Stock where ItemID = @ItemID", new { ItemID = GI.Item });
                if (CheckItem == 0) { return $"Item on Row: {GI.RowID} does not have enough Quantity"; }
            }

            if (issue.DocumentDate == null) { return "Please Enter Document Date"; }
            if (string.IsNullOrWhiteSpace(issue.CustomerID)) return $"Please select Customer";
            if (string.IsNullOrWhiteSpace(customer.Name)) { return "Please select Customer"; }
            if (!DropDownCustomer.Options.Any(option => option.Text == customer.Name)) { return "Please Enter Valid Customer"; }
            if (Items.Count > 0)
            {
                foreach (var GI in Items)
                {
                    if (string.IsNullOrWhiteSpace(GI.Item)) return $"Please select Item on Row: {GI.RowID}";

                    if (string.IsNullOrWhiteSpace(ItemName[GI.RowID - 1])) return $"Please Enter Item on Row: {GI.RowID}";

                    if (GI.Quantity <= 0) return $"Row {GI.RowID}: Quantity cannot be less than or equal to 0";

                    if (string.IsNullOrWhiteSpace(GI.UOM)) return $"Please Enter UOM on Row: {GI.RowID}";

                    if (GI.Rate <= 0) return $"Row {GI.RowID}: Rate cannot be less than or equal to 0";

                    if (GI.Amount <= 0) return $"Row {GI.RowID}: Amount cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[GI.RowID - 1])) return $"Item on Row: {GI.RowID} does not exist";

                }
            }
            return null;
        }
    }

    public void SavePO()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (ToBill)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            ToBill = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (ToBill)
        {
            IsCancelled = true;
            IsSaving = false;
            ToBill = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new GI_Items
            {
                Quantity = 0,
                Rate = 0,
                Amount = 0
            });
        ItemName.Add("");
        UOMName.Add("");
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                IsDelete.Add(Items[i].RowID);
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterCustomerOptions(ChangeEventArgs e)
    {
        bool result = DropDownCustomer.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownCustomer.ListItems[0].FilteredOptions.Any(option => option.Text == saleorder.SaleOrderID))
            {
                saleorder.SaleOrderID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectCustomerOption(option options)
    {
        bool result = DropDownCustomer.SelectOption(options);
        if (result == false)
        {
            customer.Name = options.Text;
            issue.CustomerID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                customer = db.QueryFirstOrDefault<Customer>("Select * from Customer where CustomerID = @CustomerID", new { CustomerID = options.Value });
            }
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(option options, int rowIndex)
    {
        bool result = DropDownItem.SelectOption(options, rowIndex);
        if (result == false)
        {
            ItemName[rowIndex] = options.Text;
            Items[rowIndex].Item = options.Value;
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(option options, int rowIndex)
    {
        bool result = DropDownUOM.SelectOption(options, rowIndex);
        if (result == false)
        {
            Items[rowIndex].UOM = options.Value;
            UOMName[rowIndex] = options.Text;
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from GoodIssue where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = issue.GoodsIssueID });
            if (GetStatus == SaleStatus.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Good Issue has already been Cancelled", Severity.Error);
                return;
            }
        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Goods Issue", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = issue.GoodsIssueID;
            cancelall.type = "Goods Issue";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {

        }
    }

    public void CreateSI()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from GoodIssue where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = issue.GoodsIssueID });

            if (GetStatus != SaleStatus.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Sales Invoice, Goods Issue has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Goods Issue ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("GoodsIssueID", issue.GoodsIssueID);
            NavigationManager.NavigateTo("/saleinvoice/new-sales-invoice");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateCustomer()
    {
        NavigationManager.NavigateTo($"/customers/new-customer", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }
}