@using static MudBlazor.CategoryTypes
@using SharedClass.Components.Layout
@using SharedClass.Components.Model
@using SharedClass.Components.Data
@using System.Globalization
@using System.Net.Http.Json
@page "/saleorder"
@layout AdminLayout;
@inject Select select;
@inject ISnackbar Snackbar;
@inject SaleOrder saleorder;
@inject ProtectedLocalStorage _protectedLocalStore;
@inject NavigationManager NavigationManager;

@if (isLoading)
{
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <div class="d-flex justify-content-end">
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Style="text-transform:none; margin-bottom: 20px;"
                                   Href="/saleorder/new-sales-order" Size="Size.Large">Create</MudButton>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <MudTable @ref="_table" T="SaleOrder" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Style="border-radius:20px"
                              OnRowClick="@OnRowClick" Filter="new Func<SaleOrder,bool>(FilterFunc1)" @bind-SelectOnRowClick="@_selectOnRowClick" Elevation="4">

                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Sales Orders</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>

                        <HeaderContent>
                            <MudTh>Order Number</MudTh>
                            <MudTh>Title</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Grand Total</MudTh>
                            <MudTh>Document Date</MudTh>
                            <MudTh>Delivery Date</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Purchase Order Number">@context.SaleOrderID</MudTd>
                            <MudTd DataLabel="Title">@context.SaleOrderName</MudTd>
                            <MudTd DataLabel="Status">@context.Status</MudTd>
                            <MudTd DataLabel="Total Amount">@context.TotalAmount</MudTd>
                            <MudTd DataLabel="Document Date">@context.DocumentDate</MudTd>
                            <MudTd DataLabel="Delivery Date">@context.DeliveryDate</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                </div>
            </div>
        </div>
}

@code {
    //authorization
    bool isLoading = false;
    public bool isAuthorized { get; set; }
    protected override async void OnInitialized()
    {
        var cookieContent = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
        isAuthorized = cookieContent;
        if (isAuthorized)
        {
            isLoading = true;
            StateHasChanged();
        }
        else
        {
            isLoading = false;
            NavigationManager.NavigateTo("/adminlogin");
            Snackbar.Clear();
            Snackbar.Add("Not Authorized", Severity.Error);
        }
        base.OnInitialized();
    }
    //authorization

    private string searchString1 = "";
    private bool _selectOnRowClick = false;
    private MudTable<SaleOrder> _table;
    private string _selectedItemText = "No row clicked";
    private IEnumerable<SaleOrder> Elements = new List<SaleOrder>();
    private HashSet<SaleOrder> selectedItems = new HashSet<SaleOrder>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await select.GetSaleOrderDataAsync();
    }

    void OnRowClick(TableRowClickEventArgs<SaleOrder> args)
    {
        saleorder.SaleOrderID = args.Item.SaleOrderID;
        NavigationManager.NavigateTo($"/saleorder/{saleorder.SaleOrderID}");
    }

    private bool FilterFunc1(SaleOrder element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SaleOrder element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.SaleOrderName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if ($"{element.SaleOrderID} {element.TotalAmount} {element.DocumentDate} {element.DeliveryDate}".Contains(searchString)) return true;

        return false;
    }
}