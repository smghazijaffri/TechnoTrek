@page "/saleorder/new-sales-order"
@page "/saleorder/{SaleOrderID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Connection con;
@inject SO_Item SOItem;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject SaleOrder saleorder;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (ToBill)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">To Bill</MudChip>
            }
            @if (PartiallyPaid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Partially Paid</MudChip>
            }
            @if (IsCompleted)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Completed</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!ReadonlyHidden)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePO">
                @GetSubmitButtonText()
            </button>
        }
        @if (ToBill || PartiallyPaid && !IsCancelled && !IsCompleted)
        {
            <div class="dropdown m-1" id="dropdown">
                <button type="reset" class="btn btn-primary rounded-3 text-sm-center" onclick="toggleDropdown()">Create</button>
                <ul class="dropdown-menu w-100 list-group mt-1" id="dropdownMenu" style="display: none;">
                    <li hidden="@IsCompleted" class="btn ms-2 m-1 text-sm-start" @onclick="CreateGI">Goods Issue</li>
                    <hr hidden="@ReadonlyHidden" class="m-1 border-primary" />
                    <li hidden="@IsCompleted" class="btn ms-2 m-1 text-sm-start" @onclick="CreateSI">Sales Invoice</li>
                    <hr hidden="@ReadonlyHidden" class="m-1 border-primary" />
                    <li hidden="@ToBill || @IsCompleted" class="btn ms-2 m-1 text-sm-start" @onclick="CreatePR">Purchase Request</li>
                </ul>
            </div>
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
        @if (IsCompleted && !IsCancelled)
        {
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplaySO">
            <label class="form-label">Sales Order ID</label>
            <input type="text" class="form-control" @bind="saleorder.SaleOrderID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="saleorder.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Delivery Date</label>
            <input type="date" @bind="saleorder.DeliveryDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer</label>
            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownCustomer.CloseDropdown(e)">
                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownCustomer.ToggleDropdown()" @bind="customer.Name"
                       placeholder="Select a Customer" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterCustomerOptions(e)" />
                <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownCustomer.ListItems[0].IsDropdownOpen ? "block" : "none");"
                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                    <li>
                        @if (DropDownCustomer.ListItems[0].FilteredOptions != null)
                        {
                            @foreach (var option in DropDownCustomer.ListItems[0].FilteredOptions)
                            {
                                <a class="dropdown-item" @onclick="() => SelectCustomerOption(option)">@option.Text</a>
                                <hr class="m-1 border-primary" />
                            }
                        }
                        <button @onclick="NavigateCustomer" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new Customer</button>
                    </li>
                </ul>
            </div>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Address and Contact</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Customer Address</label>
            <input type="text" class="form-control" @bind="customer.Address" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer Contact</label>
            <input type="text" class="form-control" @bind="customer.Contact" readonly>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        UOM
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    item.RowID = index + 1;
                    var rowIndex = item.RowID - 1;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * (item.Quantity * quantity[index]));
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>

                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex, true)" @bind="UOMName[rowIndex]"
                                       placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                    style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" class="form-control" @bind="item.Rate" readonly="@ReadonlyHidden" /></td>
                        <td><input type="text" class="form-control" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" class="form-control" value="@SumQuantity" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" class="form-control" value="@SumAmounts" readonly>
        </div>
    </form>
</div>
<script>
    function toggleDropdown() {
        var dropdownMenu = document.getElementById("dropdownMenu");
        dropdownMenu.style.display = (dropdownMenu.style.display === "block") ? "none" : "block";
    }
</script>

@code {
    [Parameter]
    public string? SaleOrderID { get; set; }

    string? DeviceType { get; set; }
    string header = "New Sales Order";

    bool ToBill = false;
    bool IsDraft = false;
    bool IsSaving = true;
    bool DisplaySO = true;
    bool isMobile = false;
    bool IsCancelled = false;
    bool IsCompleted = false;
    bool PartiallyPaid = false;
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool ReadonlyHidden { get { return IsCancelled || ToBill || IsCompleted || PartiallyPaid; } }

    DropDown DropDownUOM = new DropDown();
    DropDown DropDownItem = new DropDown();
    List<string> UOMName = new List<string>();
    SingleDropDown DropDownCustomer = new SingleDropDown();

    List<int> quantity = new List<int>();
    List<int> IsDelete = new List<int>();
    List<string> ItemName = new List<string>();
    List<SO_Item> Items = new List<SO_Item>();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;

        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                saleorder.DocumentDate = DateTime.Now;
                saleorder.DeliveryDate = DateTime.Now;
                if (SaleOrderID != null)
                {
                    saleorder = db.QueryFirstOrDefault<SaleOrder>("Select * from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                    if (saleorder == null) { NavigationManager.NavigateTo("/saleorder/"); }
                    Items = db.Query<SO_Item>("select * from SO_Item where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    ItemName = db.Query<string>("select ItemName from SO_Item inner join Items on Item = ItemCode where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    customer = db.QueryFirstOrDefault<Customer>("select TOP(1)c.* from customer c inner join SaleOrder si on si.CustomerID = si.CustomerID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                    UOMName = db.Query<string>("select UOMName from SO_Item pr inner join UOM u on pr.UOM = u.UOMID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    quantity = db.Query<int>("select StockQuantity from UOM Inner Join SO_Item on UOM = UOMID  where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                    DisplaySO = false;
                    header = saleorder.SaleOrderName;
                    if (saleorder.Status == SaleStatus.ToBill)
                    {
                        ToBill = true;
                        IsSaving = false;
                    }
                    else if (saleorder.Status == SaleStatus.Draft)
                    {
                        IsDraft = true;
                        IsSaving = false;
                    }
                    else if (saleorder.Status == SaleStatus.PartiallyPaid)
                    {
                        PartiallyPaid = true;
                        IsSaving = false;
                    }
                    else if (saleorder.Status == SaleStatus.Completed)
                    {
                        IsCompleted = true;
                        IsSaving = false;
                    }
                    else if (saleorder.Status == SaleStatus.Cancelled)
                    {
                        IsCancelled = true;
                        IsSaving = false;
                    }
                }
                else
                {
                    AddRow();
                }
                DropDownCustomer.Options = db.Query<Option>("select CustomerID as Value, Name as Text from Customer").ToList();
                DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items").ToList();
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

        base.OnInitialized();
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePO();
                if (validate != null)
                {
                    return validate;
                }
                StringBuilder titleBuilder = new StringBuilder("Sales Order for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append(".");
                }

                saleorder.SaleOrderName = titleBuilder.ToString();
                header = titleBuilder.ToString();
                saleorder.TotalAmount = SumAmounts;
                saleorder.TotalQuantity = SumQuantity;
                if (IsSaving)
                {
                    saleorder.Status = SaleStatus.Draft;
                }
                else if (IsDraft)
                {
                    saleorder.Status = SaleStatus.ToBill;
                }
                saleorder.SaleOrderID = crud.CRD(saleorder, "CreateSaleOrder");

                foreach (var PO in Items)
                {
                    foreach (int del in IsDelete)
                    {
                        if (PO.RowID == del)
                        {
                            IsDelete.Remove(del);
                        }
                    }
                    PO.SaleOrderID = saleorder.SaleOrderID;
                    DisplaySO = false;
                    crud.CRD(PO, "SOItem");
                }

                foreach (var del in IsDelete)
                {
                    SOItem.RowID = del;
                    SOItem.SaleOrderID = saleorder.SaleOrderID;
                    crud.CRD(SOItem, "SOItem", System.Data.CommandType.StoredProcedure, true);
                }
                IsDelete.Clear();
                ToggleApproval();
                if (SaleOrderID == null)
                {
                    NavigationManager.NavigateTo($"/saleorder/{saleorder.SaleOrderID}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Order Saved Successfully";
                }

                else if (ToBill)
                {
                    return "Sale Order Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Sale Order Cancelled Successfully";
                }

                else
                {
                    IsDraft = false;
                    return "Error in saving request";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public string ValidatePO()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (saleorder.SaleOrderID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = saleorder.SaleOrderID });
                if (GetStatus != null)
                {
                    if (GetStatus == SaleStatus.ToBill && !ToBill) { return "Sale Order has already been submitted changes cannot be done"; }

                    if (GetStatus == SaleStatus.Cancelled && !IsCancelled) { return "This Sale Order has already been Cancelled"; }
                }
                else
                {
                    return "Sale Order ID does not exist";
                }
            }

            if (saleorder.DocumentDate == null) return "Please Enter Document Date";

            if (string.IsNullOrWhiteSpace(saleorder.CustomerID)) return $"Please select Customer";
            if (string.IsNullOrWhiteSpace(customer.Name)) { return "Please select Customer"; }

            if (!DropDownCustomer.Options.Any(option => option.Text == customer.Name)) return "Please Enter Valid Customer";
            int count = 0;
            if (Items.Count > 0)
            {
                foreach (var PO in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(PO.Item)) return $"Please select Item on Row: {count}";

                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (PO.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";

                    if (PO.Rate <= 0) return $"Row {count}: Rate cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }
            return null;
        }
    }

    public void SavePO()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
    }

    private string GetSubmitButtonText()
    {
        if (ToBill)
        {
            return "Cancel";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            ToBill = true;
            IsSaving = false;
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        else if (ToBill)
        {
            IsCancelled = true;
            IsSaving = false;
            ToBill = false;
        }
        else if (IsCompleted)
        {
            IsCancelled = true;
            IsSaving = false;
            IsCompleted = false;
        }
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new SO_Item
            {
                Quantity = 1
            });
        ItemName.Add("");
        UOMName.Add("");
        quantity.Add(0);
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                UOMName.RemoveAt(i);
                quantity.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
                DropDownUOM.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterCustomerOptions(ChangeEventArgs e)
    {
        bool result = DropDownCustomer.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownCustomer.ListItems[0].FilteredOptions.Any(option => option.Text == saleorder.SaleOrderID))
            {
                saleorder.SaleOrderID = "";
            }
        }
        StateHasChanged();
    }

    private void SelectCustomerOption(Option options)
    {
        bool result = DropDownCustomer.SelectOption(options);
        if (result == false)
        {
            saleorder.CustomerID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                customer = db.QueryFirstOrDefault<Customer>("Select Address,Contact from Customer where CustomerID = @CustomerID", new { CustomerID = options.Value });
            }
            customer.Name = options.Text;
            HandleFormInput();
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                DropDownUOM.ListItems[rowIndex].FilteredOptions = db.Query<Option>("select UOMName as Text , u.UOMID as Value  from UOM u inner join ItemUOM it on it.UOMID = u.UOMID where ItemID = @ItemID", new { ItemID = options.Value }).ToList();
                HandleFormInput();
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                Items[rowIndex].UOM = options.Value;
                quantity[rowIndex] = db.QueryFirstOrDefault<int>("select StockQuantity from UOM where UOMID = @UOMID", new { UOMID = options.Value });
                HandleFormInput();
            }
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {

            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = saleorder.SaleOrderID });

            if (GetStatus == SaleStatus.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Sale Order has already been Cancelled", Severity.Error);
                return;
            }

        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Sale Order", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = saleorder.SaleOrderID;
            cancelall.type = "Sale Order";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void CreateGI()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = saleorder.SaleOrderID });

            if (GetStatus != SaleStatus.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Goods Issue, Sales Order has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Sales Order ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("SaleOrderID", saleorder.SaleOrderID);
            NavigationManager.NavigateTo("/goodissue/new-goods-issue");
        }
    }

    public void CreatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = saleorder.SaleOrderID });

            if (GetStatus != SaleStatus.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Purchase Request, Sales Order has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Sales Order ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("SaleOrderID", saleorder.SaleOrderID);
            NavigationManager.NavigateTo("/purchaserequisition/new-purchase-request");
        }
    }

    public void CreateSI()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            string? GetStatus = db.QueryFirstOrDefault<string?>("Select Status from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = saleorder.SaleOrderID });

            if (GetStatus != SaleStatus.ToBill)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot create Sales Invoice, Sales Order has already been " + GetStatus, Severity.Error);
                return;
            }
            else if (GetStatus == null)
            {
                Snackbar.Clear();
                Snackbar.Add("Sales Order ID does not exist", Severity.Error);
                return;
            }
            _protectedLocalStore.SetLocalAsync("SaleOrderID", saleorder.SaleOrderID);
            NavigationManager.NavigateTo("/saleinvoice/new-sales-invoice");
        }
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }

    public void NavigateCustomer()
    {
        NavigationManager.NavigateTo($"/customers/new-customer", forceLoad: true);
    }
}