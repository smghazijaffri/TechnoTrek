@page "/saleinvoice/new-sales-invoice"
@page "/saleinvoice/{SalesInvoiceID?}"

@inject CRUD crud;
@layout AdminLayout;
@inject Select select;
@inject Connection con;
@inject Customer customer;
@inject ISnackbar Snackbar;
@inject SI_Item invoiceitem;
@inject IJSRuntime JSRuntime;
@inject SalesInvoice salesinvoice;
@inject IDialogService DialogService;
@inject SingleDropDown singledropdown;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@* <nav class="ps-3 pt-3" style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/buying">Buying</a></li>
            <li class="breadcrumb-item"><a href="/PurchaseInvoice">Purchase Requisition</a></li>
            <li class="breadcrumb-item active" aria-current="page">@header</li>
        </ol>
    </nav> *@

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            @header
            @if (IsSaving)
            {
                <MudChip Variant="Variant.Text" Color="Color.Warning">Not Saved</MudChip>
            }
            @if (IsDraft)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Draft</MudChip>
            }
            @if (PartiallyPaid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Surface">Partially Paid</MudChip>
            }
            @if (IsCancelled)
            {
                <MudChip Variant="Variant.Text" Color="Color.Error">Cancelled</MudChip>
            }
            @if (Paid)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success">Paid</MudChip>
            }
            @if (Overdue)
            {
                <MudChip Variant="Variant.Text" Color="Color.Dark">Overdue</MudChip>
            }
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsCancelled && !Paid)
        {
            <button type="submit" class="btn btn-primary m-1 rounded-3 text-sm-center" @onclick="SavePR">
                @GetSubmitButtonText()
            </button>
        }
        @if (Paid || Overdue && !IsCancelled)
        {
            <MudIconButton Icon="@Icons.Material.Outlined.Download" Color="Color.Info" aria-label="download" OnClick="DownloadReport" />
            <button type="reset" class="btn btn-danger m-1 rounded-3 text-sm-center" @onclick="OpenDialog">
                Cancel
            </button>
        }
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6" hidden="@DisplaySI">
            <label class="form-label">Sales Invoice ID</label>
            <input type="text" class="form-control" @bind="salesinvoice.SalesInvoiceID" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer</label>
            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownCustomer.CloseDropdown(e)">
                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownCustomer.ToggleDropdown()" @bind="customer.Name"
                       placeholder="Select a Customer" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterCustomerOptions(e)" />
                <ul class="dropdown-menu w-100" id="ul" style="max-height: 200px; overflow-y: auto; display: @(DropDownCustomer.ListItems[0].IsDropdownOpen ? "block" : "none");"
                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                    <li>
                        @if (DropDownCustomer.ListItems[0].FilteredOptions != null)
                        {
                            @foreach (var option in DropDownCustomer.ListItems[0].FilteredOptions)
                            {
                                <a class="dropdown-item" @onclick="() => SelectCustomerOption(option)">@option.Text</a>
                                <hr class="m-1 border-primary" />
                            }
                        }
                        <button @onclick="NavigateCustomer" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new Customer</button>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input type="date" @bind="salesinvoice.DocumentDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Due Date</label>
            <input type="date" @bind="salesinvoice.DueDate" class="form-control" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <MudCheckBox @bind-Value="@IsPaid" Size="Size.Small" Dense="true" Label="Paid" readonly="@Readonly"></MudCheckBox>
            <MudCheckBox @bind-Value="@isPartiallyPaid" Size="Size.Small" Dense="true" Label="Partially Paid" readonly="@Hidden"></MudCheckBox>
            <MudCheckBox @bind-Value="@IsReturn" Size="Size.Small" Dense="true" Label="Return" readonly="@ReadonlyHidden"></MudCheckBox>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Address and Contact</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Customer Address</label>
            <input type="text" class="form-control" @bind="customer.Address" readonly>
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer Contact</label>
            <input type="text" class="form-control" @bind="customer.Contact" readonly>
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off" style="overflow-x: @(isMobile? "scroll" : "")">
        <table class="table size table-hover">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto" style="min-width:150px">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 160px;">
                        Quantity
                    </th>
                    <th class="col col-auto" style="width: 160px;">
                        UOM
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Rate
                    </th>
                    <th class="col col-auto text-center" style="min-width: 150px; width: 150px">
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];

                    var rowIndex = index;
                    DropDownItem.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                    item.Amount = (item.Rate * (item.Quantity * quantity[index]));
                    <tr>
                        <td style="vertical-align: middle;">
                            <div style="display: flex; justify-content: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" hidden="@ReadonlyHidden" />
                                @(index + 1)
                            </div>
                        </td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownItem.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownItem.ToggleDropdown(rowIndex)" @bind="ItemName[rowIndex]"
                                       placeholder="Select an Item" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterItemOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownItem.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        @if (DropDownItem.ListItems[rowIndex].FilteredOptions != null)
                                        {
                                            @foreach (var option in DropDownItem.ListItems[rowIndex].FilteredOptions)
                                            {
                                                <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectItemOption(option, rowIndex)">@option.Text<br /><label style="font-size: 12px;">@option.Type</label></a>
                                                <hr class="m-1 border-primary" />
                                            }
                                        }
                                        <button @onclick="NavigateItem" class="text-info" hidden="@ReadonlyHidden"><i class="bi bi-plus h5 ms-2 m-1" />Create a new Item</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Quantity" readonly="@ReadonlyHidden" /></td>
                        <td>
                            <div class="dropdown" id="dropdown" @onkeydown="e => DropDownUOM.CloseDropdown(e, rowIndex)">
                                <input type="text" id="Item" readonly="@ReadonlyHidden" @onclick="() => DropDownUOM.ToggleDropdown(rowIndex, true)" @bind="UOMName[rowIndex]"
                                       placeholder="Select UOM" class="w-100 text-start btn dropdown-toggle bg-white border" @oninput="e => FilterUOMOptions(e, rowIndex)" />
                                <ul class="dropdown-menu w-100" id="ul" @onclick="() =>DropDownItem.HandleDropdownFocusOut(rowIndex)"
                                    style="position: @(isMobile? "relative" : ""); max-height: 200px; overflow-y: auto; display: @(DropDownUOM.ListItems[rowIndex].IsDropdownOpen ? "block" : "none");"
                                    aria-labelledby="dropdownMenuButton" hidden="@ReadonlyHidden">
                                    <li>
                                        <div @onfocusout="() =>DropDownUOM.HandleDropdownFocusOut(rowIndex)">
                                            @if (DropDownUOM.ListItems[rowIndex].FilteredOptions != null)
                                            {
                                                @foreach (var option in DropDownUOM.ListItems[rowIndex].FilteredOptions)
                                                {
                                                    <a class="dropdown-item" bind="@item.Item" @onclick="() => SelectUOMOption(option, rowIndex)">@option.Text</a>
                                                    <hr class="m-1 border-primary" />
                                                }
                                            }
                                            <button @onclick="NavigateUOM" class="text-info"><i class="bi bi-plus h5 ms-2 m-1" />Create new UOM</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Rate" readonly /></td>
                        <td><input type="text" inputmode="numeric" class="form-control" @bind="item.Amount" readonly /></td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12 d-flex justify-content-start p-0">
        <button class="btn btn-primary rounded-3 me-2" @onclick="AddRow" hidden="@ReadonlyHidden">Add Row</button>
        <button class="btn btn-danger rounded-3" style="display: @(IsAnyItemSelected ? "block" : "none")" @onclick="DeleteRow" hidden="@ReadonlyHidden">Delete</button>
    </div>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <form class="row g-3" @oninput="HandleFormInput" autocomplete="off">
        <div class="col-md-6">
            <label class="form-label">Total Quantity</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumQuantity" readonly="@ReadonlyHidden">
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" inputmode="numeric" class="form-control" value="@SumAmounts" readonly="@ReadonlyHidden">
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string? SalesInvoiceID { get; set; }

    string? DeviceType { get; set; }
    string header = "Create Sales Invoice";

    bool IsDraft = false;
    bool IsSaving = true;
    bool Overdue = false;
    bool isMobile = false;
    bool DisplaySI = true;
    bool IsCancelled = false;
    bool Paid { get; set; } = false;
    bool IsPaid { get; set; } = false;
    bool IsReturn { get; set; } = false;
    bool PartiallyPaid { get; set; } = false;
    bool isPartiallyPaid { get; set; } = false;
    bool Readonly { get { return IsCancelled || Paid; } }
    bool IsAnyItemSelected => Items.Any(item => item.Selected);
    bool Hidden { get { return IsCancelled || Paid || Overdue; } }
    bool ReadonlyHidden { get { return IsCancelled || Overdue || PartiallyPaid || Paid; } }

    DropDown DropDownItem = new DropDown();
    List<string> UOMName = new List<string>();
    List<int> quantity = new List<int>();
    DropDown DropDownUOM = new DropDown();

    List<int> IsDelete = new List<int>();
    List<SI_Item> Items = new List<SI_Item>();
    List<string> ItemName = new List<string>();
    SingleDropDown DropDownCustomer = new SingleDropDown();

    protected override async void OnInitialized()
    {
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
        if (DeviceType == "Mobile") isMobile = true;
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            salesinvoice.DocumentDate = DateTime.Now;
            salesinvoice.DueDate = DateTime.Now;
            var GoodsIssueID = string.Empty;
            var SaleOrderID = string.Empty;

            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "GoodsIssueID"))
            {
                GoodsIssueID = await _protectedLocalStore.GetLocalAsync<string>("GoodsIssueID");
            }

            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "SaleOrderID"))
            {
                SaleOrderID = await _protectedLocalStore.GetLocalAsync<string>("SaleOrderID");
            }

            if (SalesInvoiceID != null)
            {
                salesinvoice = db.QueryFirstOrDefault<SalesInvoice>("select * from SaleInvoice where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID });
                Items = db.Query<SI_Item>("Select * from SI_Item where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID }).ToList();
                ItemName = db.Query<string>("select ItemName from SI_Item inner join Items on Item = ItemCode  where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID }).ToList();
                customer = db.QueryFirstOrDefault<Customer>("select TOP(1)c.* from customer c inner join SaleInvoice si on si.CustomerID = si.CustomerID where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID });
                UOMName = db.Query<string>("select UOMName from SI_Item pr inner join UOM u on pr.UOM = u.UOMID where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID }).ToList();
                quantity = db.Query<int>("select StockQuantity from UOM Inner Join SI_Item on UOM = UOMID  where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = SalesInvoiceID }).ToList();
                getUOM(Items);
                if (salesinvoice == null || Items.Count == 0)
                    NavigationManager.NavigateTo("/saleinvoice/");

                DisplaySI = false;
                header = salesinvoice.SalesInvoiceName;
                if (salesinvoice.Status == SaleStatus.Draft)
                {
                    IsDraft = true;
                    IsSaving = false;
                }
                else if (salesinvoice.Status == SaleStatus.Cancelled)
                {
                    IsCancelled = true;
                    IsSaving = false;
                }
                else if (salesinvoice.Status == SaleStatus.Paid)
                {
                    Paid = true;
                    IsPaid = true;
                    salesinvoice.IsPaid = true;
                    IsSaving = false;
                    PartiallyPaid = false;
                    isPartiallyPaid = false;
                    Overdue = false;
                }
                else if (salesinvoice.Status == SaleStatus.PartiallyPaid)
                {
                    salesinvoice.IsPartiallyPaid = true;
                    PartiallyPaid = true;
                    isPartiallyPaid = true;
                    Paid = false;
                    IsPaid = false;
                    salesinvoice.IsPaid = false;
                    IsSaving = false;
                }
                else if (salesinvoice.Status == SaleStatus.Overdue)
                {
                    Overdue = true;
                    salesinvoice.IsPartiallyPaid = false;
                    PartiallyPaid = false;
                    Paid = false;
                    IsPaid = false;
                    salesinvoice.IsPaid = false;
                    IsSaving = false;
                }
            }
            else if (!string.IsNullOrWhiteSpace(GoodsIssueID))
            {
                salesinvoice.CustomerID = db.QueryFirstOrDefault<string>("select CustomerID from GoodIssue where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID });
                Items = db.Query<SI_Item>("select Quantity ,* from GI_Items where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                ItemName = db.Query<string>("select ItemName from GI_Items inner join Items on Item = ItemCode  where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                customer = db.QueryFirstOrDefault<Customer>("select c.* from Customer c inner join GoodIssue so on so.CustomerID = c.CustomerID where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID });
                quantity = db.Query<int>("select StockQuantity from UOM Inner Join GI_Items on UOM = UOMID where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                UOMName = db.Query<string>("select UOMName from GI_Items pr inner join UOM u on pr.UOM = u.UOMID where GoodsIssueID = @GoodsIssueID", new { GoodsIssueID = GoodsIssueID }).ToList();
                getUOM(Items);
                salesinvoice.RefrenceDocument = GoodsIssueID;
                await _protectedLocalStore.SetLocalAsync("GoodsIssueID", "");
            }
            else if (!string.IsNullOrWhiteSpace(SaleOrderID))
            {
                salesinvoice.CustomerID = db.QueryFirstOrDefault<string>("select CustomerID from SaleOrder where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                Items = db.Query<SI_Item>("select Quantity ,* from SO_Item where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                ItemName = db.Query<string>("select ItemName from SO_Item inner join Items on Item = ItemCode where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                customer = db.QueryFirstOrDefault<Customer>("select c.* from Customer c inner join SaleOrder so on so.CustomerID = c.CustomerID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID });
                quantity = db.Query<int>("select StockQuantity from UOM Inner Join SO_Item on UOM = UOMID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                UOMName = db.Query<string>("select UOMName from SO_Item pr inner join UOM u on pr.UOM = u.UOMID where SaleOrderID = @SaleOrderID", new { SaleOrderID = SaleOrderID }).ToList();
                getUOM(Items);
                salesinvoice.RefrenceDocument = SaleOrderID;
                await _protectedLocalStore.SetLocalAsync("SaleOrderID", "");
            }
            else
            {
                AddRow();
            }

            DropDownItem.Options = db.Query<Option>("select ItemCode as Value, ItemName as Text, ItemType as Type from Items").ToList();
            DropDownCustomer.Options = db.Query<Option>("select CustomerID as Value, Name as Text from Customer where CustomerType = 'Bulk'").ToList();
        }
        StateHasChanged();

        base.OnInitialized();
    }

    public int SumAmounts
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public int SumQuantity
    {
        get { return Items.Sum(item => item.Quantity); }
    }

    public int SumTotal
    {
        get { return Items.Sum(item => item.Amount); }
    }

    public string createPurchase()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                string validate = ValidatePR();
                if (validate != null)
                {
                    return validate;
                }

                StringBuilder titleBuilder = new StringBuilder("Sales Invoice for ");

                foreach (string data in ItemName)
                {
                    titleBuilder.Append(data);
                    titleBuilder.Append(", ");
                }

                if (Items.Count > 0)
                {
                    titleBuilder.Length -= 2;
                    titleBuilder.Append("...");
                }

                salesinvoice.SalesInvoiceName = titleBuilder.ToString();
                header = titleBuilder.ToString();

                if (IsSaving)
                {
                    salesinvoice.Status = PurchaseStatuses.Draft;
                }
                else if (IsDraft)
                {
                    if (IsPaid)
                    {
                        Paid = true;
                        salesinvoice.Status = PurchaseStatuses.Paid;
                    }
                    else if (isPartiallyPaid)
                    {
                        PartiallyPaid = true;
                        salesinvoice.Status = PurchaseStatuses.PartiallyPaid;
                    }
                }
                else if (IsPaid)
                {
                    Paid = true;
                    salesinvoice.Status = PurchaseStatuses.Paid;
                }
                else if (Overdue)
                {
                    salesinvoice.Status = PurchaseStatuses.Overdue;
                }
                else if (Paid || Overdue)
                {
                    salesinvoice.Status = PurchaseStatuses.Cancelled;
                }
                DataTable Delete = Select.ConvertIntToDataTable(IsDelete);
                DataTable ItemTable = Select.ItemTable();
                foreach (var PO in Items)
                {
                    ItemTable.Rows.Add(PO.RowID, PO.Item, PO.Quantity, PO.UOM, PO.Rate, PO.Amount, null);
                }
                var parameters = new DynamicParameters(salesinvoice);
                parameters.Add("@SIItems", ItemTable.AsTableValuedParameter("Purhcase"));
                parameters.Add("@DeleteSIItems", Delete.AsTableValuedParameter("DeleteType"));
                OutputClass output = crud.CRD3(parameters, "CreateSaleInvoice", outputMessage: true, errorMessage: true);
                if (output.ErrorMessage != null)
                {
                    return output.ErrorMessage;
                }
                salesinvoice.SalesInvoiceID = output.Output;
                IsDelete.Clear();
                ToggleApproval();
                if (SalesInvoiceID == null)
                {
                    NavigationManager.NavigateTo($"/saleinvoice/{salesinvoice.SalesInvoiceID}", forceLoad: true);
                }
                if (IsDraft)
                {
                    return "Invoice Saved Successfully";
                }

                else if (PartiallyPaid || Paid)
                {
                    return "Sale Invoice Submitted Successfully";
                }

                else if (IsCancelled)
                {
                    return "Sale Invoice Cancelled Successfully";
                }

                else
                {
                    return "Error in saving Invoice";
                }
            }
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }

    public void getUOM(List<SI_Item> Items)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            int count = 0;
            foreach (var item in Items)
            {
                DropDownUOM.ListItems.Add(new BindDropdown { IsDropdownOpen = false });
                DropDownUOM.ListItems[count].FilteredOptions = db.Query<Option>("select UOMName as Text , u.UOMID as Value from UOM u inner join ItemUOM it on it.UOMID = u.UOMID where ItemID = @ItemID", new { ItemID = item.Item }).ToList();
                count++;
            }

        }
    }

    public string ValidatePR()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (salesinvoice.SalesInvoiceID != null)
            {
                string GetStatus = db.QueryFirstOrDefault<string>("Select Status from SaleInvoice where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = salesinvoice.SalesInvoiceID });
                if (GetStatus != null)
                {
                    if (GetStatus == SaleStatus.Paid && Paid) return "Sale Invoice has already been paid changes cannot be done";

                    if (GetStatus == SaleStatus.Cancelled && !IsCancelled) return "This Sale Invoice has already been Cancelled";

                }
                else
                {
                    return "Sale Invoice ID does not exist";
                }
            }

            if (salesinvoice.DocumentDate == null) return "Please Enter Document Date";

            if (salesinvoice.CustomerID == null) return "Please Select a Customer";

            if (IsPaid && isPartiallyPaid) return "Invoice can't be Paid and Partially Paid at the same time";

            if (!IsPaid && !isPartiallyPaid) return "Invoice has to be Paid or Partially Paid to submit";

            if (Overdue && isPartiallyPaid) return "Overdu Invoice cannot be Partially Paid";

            if (salesinvoice.DueDate < salesinvoice.DocumentDate) return "DueDate cannot be before DocumentDate";
            if (Items.Count > 0)
            {
                int count = 0;

                foreach (var PI in Items)
                {
                    count++;
                    if (string.IsNullOrWhiteSpace(ItemName[count - 1])) return $"Please Enter Item on Row: {count}";

                    if (PI.Rate <= 0) return $"Row {count}: Rate cannot be less than or equal to 0";

                    if (PI.Quantity <= 0) return $"Row {count}: Quantity cannot be less than or equal to 0";

                    if (PI.Amount <= 0) return $"Row {count}: Amount cannot be less than or equal to 0";

                    if (!DropDownItem.Options.Any(option => option.Text == ItemName[count - 1])) return $"Item on Row: {count} does not exist";
                }
            }
            else
            {
                return $"There are no Items";
            }

            return null;
        }
    }

    public void SavePR()
    {
        string notification = createPurchase();
        if (notification.Contains("Successfully"))
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add(notification, Severity.Error);
        }
        StateHasChanged();
    }

    private string GetSubmitButtonText()
    {
        if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsSaving = false;
        }
        else if (isPartiallyPaid)
        {
            salesinvoice.IsPartiallyPaid = true; ;
            Paid = false;
            IsPaid = false;
            IsSaving = false;
            IsDraft = false;
            PartiallyPaid = true;
        }
        else if (IsPaid)
        {
            salesinvoice.IsPaid = true;
            Overdue = false;
            Paid = true;
            PartiallyPaid = false;
            IsSaving = false;
            IsDraft = false;
        }
        else if (Overdue)
        {
            if (IsPaid)
            {
                Overdue = false;
                Paid = true;
                salesinvoice.IsPaid = true;
                isPartiallyPaid = false;
                PartiallyPaid = false;
            }
            else { Overdue = true; }
        }
        else if (IsSaving)
        {
            IsDraft = true;
            IsSaving = false;
        }
        StateHasChanged();
    }

    private void AddRow()
    {
        HandleFormInput();
        Items.Add(new SI_Item
            {
                Quantity = 1
            });
        ItemName.Add("");
        UOMName.Add("");
        quantity.Add(0);
    }

    private void DeleteRow()
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                if (Items[i].RowID != 0)
                {
                    IsDelete.Add(Items[i].RowID);
                }
                Items.RemoveAt(i);
                ItemName.RemoveAt(i);
                quantity.RemoveAt(i);
                DropDownItem.ListItems.RemoveAt(i);
            }
        }
    }

    private void HandleFormInput()
    {
        if (IsDraft)
        {
            IsSaving = true;
            IsDraft = false;
            Paid = false;
            GetSubmitButtonText();
            StateHasChanged();
        }
    }

    public void FilterCustomerOptions(ChangeEventArgs e)
    {
        bool result = DropDownCustomer.FilterOptions(e);
        if (result == true)
        {
            if (!DropDownCustomer.ListItems[0].FilteredOptions.Any(option => option.Text == salesinvoice.SalesInvoiceID))
            {
                salesinvoice.SalesInvoiceID = "";
            }
            HandleFormInput();
        }
        StateHasChanged();
    }

    private void SelectCustomerOption(Option options)
    {
        bool result = DropDownCustomer.SelectOption(options);
        if (result == false)
        {
            customer.Name = options.Text;
            salesinvoice.CustomerID = options.Value;
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                customer = db.QueryFirstOrDefault<Customer>("Select * from Customer where CustomerID = @CustomerID", new { CustomerID = options.Value });
            }
        }
    }

    public void FilterItemOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownItem.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownItem.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].Item = "";
            }
        }
        StateHasChanged();
    }

    private void SelectItemOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownItem.SelectOption(options, rowIndex);
            if (result == false)
            {
                if (Items[rowIndex].Item != options.Value)
                {
                    UOMName[rowIndex] = "";
                }
                ItemName[rowIndex] = options.Text;
                Items[rowIndex].Item = options.Value;
                Items[rowIndex].Rate = db.QueryFirstOrDefault<int>("Select Rate from Stock WHERE ItemID = @ItemID", new { ItemID = options.Value });
                DropDownUOM.ListItems[rowIndex].FilteredOptions = db.Query<Option>("select UOMName as Text , u.UOMID as Value  from UOM u inner join ItemUOM it on it.UOMID = u.UOMID where ItemID = @ItemID", new { ItemID = options.Value }).ToList();

                HandleFormInput();
            }
        }
    }

    public void FilterUOMOptions(ChangeEventArgs e, int rowIndex)
    {
        bool result = DropDownUOM.FilterOptions(e, rowIndex);
        if (result == true)
        {
            if (!DropDownUOM.ListItems[rowIndex].FilteredOptions.Any(option => option.Text == Items[rowIndex].Item))
            {
                Items[rowIndex].UOM = "";
            }
        }
        StateHasChanged();
    }

    public void SelectUOMOption(Option options, int rowIndex)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            bool result = DropDownUOM.SelectOption(options, rowIndex);
            if (result == false)
            {
                UOMName[rowIndex] = options.Text;
                Items[rowIndex].UOM = options.Value;
                quantity[rowIndex] = db.QueryFirstOrDefault<int>("select StockQuantity from UOM where UOMID = @UOMID", new { UOMID = options.Value });
                HandleFormInput();
            }
        }
    }

    public async void DownloadReport()
    {
        Snackbar.Add("Generating Report", Severity.Info);
        try
        {
            var PdfByte = select.GetPdfAsync("Sales Invoice", salesinvoice.SalesInvoiceID);

            var pdfBytes = Select.ExtractOddPages(PdfByte);

            if (isMobile)
            {
                HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
                await Select.OpenPdfAsync(pdfBytes, $"{salesinvoice.SalesInvoiceID}.pdf");
            }
            else
            {
                var base64Pdf = Convert.ToBase64String(pdfBytes);
                var pdfDataUrl = $"data:application/pdf;base64,{base64Pdf}";
                await JSRuntime.InvokeVoidAsync("downloadFile", pdfDataUrl, $"{salesinvoice.SalesInvoiceID}.pdf");
                Snackbar.Add("Report Downloaded", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task OpenDialog()
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {

            string GetStatus = db.QueryFirstOrDefault<string>("Select Status from SaleInvoice where SalesInvoiceID = @SalesInvoiceID", new { SalesInvoiceID = salesinvoice.SalesInvoiceID });

            if (GetStatus == SaleStatus.Cancelled)
            {
                Snackbar.Clear();
                Snackbar.Add("This Sale Invoice has already been Cancelled", Severity.Error);
                return;
            }

        }
        var options = new DialogOptions { ClassBackground = "dialog" };
        var result = await DialogService.Show<Dialog>("Cancel Sale Invoice", options).Result;

        if (result.Data is bool && (bool)result.Data)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        try
        {
            CancelAll cancelall = new CancelAll();
            cancelall.ID = salesinvoice.SalesInvoiceID;
            cancelall.type = "Sale Invoice";
            crud.CRD(cancelall, "CancelAll");
            ToggleApproval();
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void NavigateItem()
    {
        NavigationManager.NavigateTo($"/item/new-item", forceLoad: true);
    }

    public void NavigateCustomer()
    {
        NavigationManager.NavigateTo($"/customers/new-customer", forceLoad: true);
    }

    public void NavigateUOM()
    {
        NavigationManager.NavigateTo("/uom/new-uom", forceLoad: true);
    }
}