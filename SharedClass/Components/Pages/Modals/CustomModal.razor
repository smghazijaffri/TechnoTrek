@using System.ComponentModel.DataAnnotations;
@using SharedClass.Components.Pages.CustomPC;

@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject ProtectedLocalStorage _protectedLocalStore;

<!-- Modal -->
<div class="modal" tabindex="-1" id="quickViewModal" aria-labelledby="quickViewModal" aria-hidden="true" style="display: @(IsVisible ? "block" : "none");">
    <div class="modal-dialog modal-fullscreen ps-3 pt-3 pe-4 pb-3">
        <div class="modal-content" style="border-radius:20px;">
            <div class="modal-header">
                <h4 class="modal-title heading">@ComponentName  </h4>
                <button type="button" class="btn-close" @onclick="CloseQuickView" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (ComponentName == "Motherboard")
                {
                    <Motherboard />
                }
                @if (ComponentName == "Processor")
                {
                    <Processor />
                }
                @if (ComponentName == "Graphics Card")
                {
                    <GPU />
                }
                @if (ComponentName == "Gaming Case")
                {
                    <Case />
                }
                @if (ComponentName == "Memory")
                {
                    <Memory />
                }
                @if (ComponentName == "Storage")
                {
                    <Storage />
                }
                @if (ComponentName == "Power Supply")
                {
                    <PSU />
                }
                @if (ComponentName == "Cooler")
                {
                    <Cooler />
                }
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-secondary btnpc m-1" style="width: auto" @onclick="Cancel" aria-label="Close">Cancel</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
@code {
    public class BuildPcViewModel
    {
        public string Id { get; set; }
        public bool IsModalOpen { get; set; }
        public string selectedComponentName { get; set; }
        [Required]
        public string Contact { get; set; }
        [Required]
        public string Name { get; set; }
    }

    [Parameter]
    public BuildPcViewModel Model { get; set; }

    [Parameter]
    public bool IsVisible
    {
        get => Model.IsModalOpen;
        set => Model.IsModalOpen = value;
    }

    [Parameter]
    public string ComponentName
    {
        get => Model.selectedComponentName;
        set => Model.selectedComponentName = value;
    }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private void ShowQuickView()
    {
        Model.IsModalOpen = true;
    }

    private async void CloseQuickView()
    {
        Model.IsModalOpen = false;
        await OnClose.InvokeAsync(null);
    }

    private async void Cancel()
    {
        CloseQuickView();
        await _protectedLocalStore.SetLocalAsync(Model.selectedComponentName, "");
        if (Model.selectedComponentName == "Storage")
        {
            await _protectedLocalStore.SetLocalAsync("StorageQuantity", "");

        }
        if (Model.selectedComponentName == "Memory")
        {
            await _protectedLocalStore.SetLocalAsync("RamQuantity", "");
        }
        Snackbar.Clear();
        Snackbar.Add("Cancelled", Severity.Error);
    }
}
