@using System.ComponentModel.DataAnnotations;

@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject ProtectedLocalStorage _protectedLocalStore;

<!-- Modal -->
<div class="modal" tabindex="-1" id="quickViewModal" aria-labelledby="quickViewModal" aria-hidden="true"
     style="display: @(IsVisible ? "block" : "none");">
    <div class="modal-dialog modal-fullscreen ps-3 pt-3 pe-4 pb-3">
        <div class="modal-content" style="border-radius:20px;">
            <div class="modal-header">
                <h6 class="modal-title heading" style="font-size: 40px;">@ComponentName </h6>
                <button type="button" class="btn-close" @onclick="CloseQuickView" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (ComponentName == "Motherboard")
                {
                    <Motherboard />
                }
                @if (ComponentName == "Processor")
                {
                    <Processor />
                }
                @if (ComponentName == "Graphics Card")
                {
                    <GPU />
                }
                @if (ComponentName == "Gaming Case")
                {
                    <Case />
                }
                @if (ComponentName == "Memory")
                {
                    <Memory />
                }
                @if (ComponentName == "Storage")
                {
                    <Storage />
                }
                @if (ComponentName == "Power Supply")
                {
                    <PSU />
                }
                @if (ComponentName == "Cooler")
                {
                    <Cooler />
                }
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-secondary btnpc m-1" style="width: auto" @onclick="Cancel"
                        aria-label="Close">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->

<script>
    window.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            DotNet.invokeMethodAsync('SharedClass', 'CloseModal');
        }
    });
</script>

@code {
    public class BuildPcViewModel
    {
        public bool IsModalOpen { get; set; }
        public string selectedComponentName { get; set; }
    }

    [Parameter]
    public BuildPcViewModel Model { get; set; }

    [Parameter]
    public bool IsVisible
    {
        get => Model.IsModalOpen;
        set => Model.IsModalOpen = value;
    }

    [Parameter]
    public string ComponentName
    {
        get => Model.selectedComponentName;
        set => Model.selectedComponentName = value;
    }

    [Parameter]
    public EventCallback OnClose { get; set; }

    bool isMobile = false;

    string? DeviceType { get; set; }

    protected override void OnInitialized()
    {
        _instance = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private void ShowQuickView()
    {
        Model.IsModalOpen = true;
    }

    private async void CloseQuickView()
    {
        Model.IsModalOpen = false;
        await OnClose.InvokeAsync(null);
    }

    private async void Cancel()
    {
        try
        {
            if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
            CloseQuickView();
            await _protectedLocalStore.SetLocalAsync(Model.selectedComponentName, "");
            if (Model.selectedComponentName == "Storage")
            {
                await _protectedLocalStore.SetLocalAsync("StorageQuantity", 0);

            }
            if (Model.selectedComponentName == "Memory")
            {
                await _protectedLocalStore.SetLocalAsync("RamQuantity", 0);
            }
            Snackbar.Clear();
            Snackbar.Add("Cancelled", Severity.Error);
        }
        catch (Exception ex)
        {
            if (isMobile) Vibration.Default.Vibrate();
            Snackbar.Add($"Error ordering item: {ex.Message}", Severity.Error);
        }
    }

    private static CustomModal? _instance;

    [JSInvokable]
    public static Task CloseModal()
    {
        if (_instance != null)
        {
            _instance.CloseQuickView();
        }
        return Task.CompletedTask;
    }
}
