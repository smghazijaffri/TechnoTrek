@using static SharedClass.Components.Pages.Modals.CustomModal
@using SharedClass.Components.Data;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;
@inject Update update;
<!-- InputModal.razor -->

<div class="modal" tabindex="-1" id="inputModal" aria-labelledby="inputModal" aria-hidden="true" style="display: @(IsVisible ? "block" : "none");">
    <div class="modal-dialog modal-sm p-4 border-0">
        <div class="modal-content bg-white shadow-lg border-0" style="border-radius: 30px;">
            <div class="modal-header heading">
                <h2 class="modal-title">Customer Details</h2>
                <button type="button" class="btn-close" @onclick="CloseInputModal" aria-label="Close" style="font-size: 15px"></button>
            </div>
            <div class="modal-body">
                <!-- Input form for Name, Contact, and Date -->
                <EditForm Model="@model" OnValidSubmit="SaveChanges">
                    <div class="modal" tabindex="-1" id="inputModal" aria-labelledby="inputModal" aria-hidden="true" style="display: @(IsVisible ? "block" : "none");">
                        <div class="modal-dialog modal-sm p-4">
                            <div class="modal-content" style="border-radius: 30px;">
                                <div class="modal-header heading">
                                    <h2 class="modal-title">Customer Details</h2>
                                    <button type="button" class="btn-close" @onclick="CloseInputModal" aria-label="Close" style="font-size: 15px"></button>
                                </div>
                                <div class="modal-body">
                                    @* <div class="form-group">
                                        <label for="name">Customer ID</label>
                                        <input type="text" class="form-control" id="id" @bind="model.Id" />
                                    </div> *@
                                    <div class="form-group pb-4">
                                        @* <label for="name">Name</label> *@
                                        <InputText class="form-control" placeholder="Name" id="name" @bind-Value="model.Name" />
                                        <ValidationMessage For="@(() => model.Name)" />
                                    </div>
                                    <div class="form-group">
                                        @* <label for="contact">Contact</label> *@
                                        <InputText class="form-control" placeholder="Contact" id="contact" @bind-Value="model.Contact" />
                                        <ValidationMessage For="@(() => model.Contact)" />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btnpc btn-secondary m-1 rz-ripple" @onclick="CloseInputModal" aria-label="Close">Cancel</button>
                                    <button type="button" class="btn btnpc btn-primary m-1 rz-ripple" @onclick="SubmitForm">Continue</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<script defer>
    function validateForm() {
        var name = document.getElementById('name').value;
        var contact = document.getElementById('contact').value;
        // var id = document.getElementById('id').value;

        if (name.trim() === '' || contact.trim() === '' && id.trim() == '') {
            alert('Name and Contact cannot be empty');
            return false;
        }
        if (!/^\d{11}$/.test(contact.trim())) {
            alert('Contact should be a number and must be 11 digits long');
            return false;
        }
        return true;
    }
</script>

@code {
    BuildPcViewModel model = new BuildPcViewModel();

    private async Task SubmitForm()
    {
        // Call the JavaScript function to perform validation
        var isValid = await JSRuntime.InvokeAsync<bool>("validateForm");

        // If validation passes, proceed with form submission
        if (isValid)
        {
            SaveChanges();
        }
    }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }
    private void CloseInputModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
        navigationManager.NavigateTo("/");
    }
    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void SaveChanges()
    {
        if(model.Id == null)
        {
            Random random = new Random();
            int randomNumber = random.Next(101);
            model.Id = (model.Name + "#" + model.Contact + "#" + Convert.ToString(randomNumber));
        }
        update.Uupdate(model.Id);
        OnSaveChanges.InvokeAsync(model);
        // Close the modal after saving changes
        CloseModal();
    }

    [Parameter]
    public EventCallback<BuildPcViewModel> OnSaveChanges { get; set; }
}