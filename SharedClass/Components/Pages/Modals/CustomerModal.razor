@using static SharedClass.Components.Pages.Modals.CustomModal
@using SharedClass.Components.Data;

@inject CRUD crud;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager navigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;
<!-- InputModal.razor -->

<div class="modal" tabindex="-1" id="inputModal" aria-labelledby="inputModal" aria-hidden="true" style="display: @(IsVisible ? "block" : "none"); backdrop-filter: blur(15px);">
    <div class="modal-dialog modal-sm p-4 border-0">
        <div class="modal-content bg-white shadow-lg border-0" style="border-radius: 20px;">
            <div class="modal-header heading">
                <h2 class="modal-title">Customer Details</h2>
                <button type="button" class="btn-close" @onclick="CloseInputModal" aria-label="Close" style="font-size: 15px"></button>
            </div>
            <div class="modal-body">
                <!-- Input form for Name, Contact, and Date -->
                <EditForm Model="@model" OnValidSubmit="SubmitForm">
                    <div class="modal" tabindex="-1" id="inputModal" aria-labelledby="inputModal" aria-hidden="true" style="display: @(IsVisible ? "block" : "none");">
                        <div class="modal-dialog modal-sm p-4">
                            <div class="modal-content" style="border-radius: 20px;">
                                <div class="modal-header heading">
                                    <h2 class="modal-title">Customer Details</h2>
                                    <button type="button" class="btn-close" @onclick="CloseInputModal" aria-label="Close" style="font-size: 15px"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group pb-4">
                                        <InputText class="form-control" placeholder="Name" id="name" @bind-Value="model.Name" />
                                        <ValidationMessage For="@(() => model.Name)" />
                                    </div>
                                    <div class="form-group">
                                        <InputText class="form-control" placeholder="Contact" id="contact" @bind-Value="model.Contact" />
                                        <ValidationMessage For="@(() => model.Contact)" />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btnpc btn-secondary m-1" @onclick="CloseInputModal" aria-label="Close">Cancel</button>
                                    <button type="button" class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="SubmitForm">Continue</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    BuildPcViewModel model = new BuildPcViewModel();

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback<BuildPcViewModel> OnSaveChanges { get; set; }

    private async Task SubmitForm()
    {
        if (string.IsNullOrWhiteSpace(model.Name))
        {
            Snackbar.Clear();
            Snackbar.Add("Name not valid", Severity.Error);
            return;
        }
        else if (string.IsNullOrWhiteSpace(model.Contact) || (model.Contact).Length != 11)
        {
            Snackbar.Clear();
            Snackbar.Add("Contact not valid", Severity.Error);
            return;
        }
        else
        {
            Customer customer = new Customer();
            customer.Name = model.Name;
            customer.Contact = model.Contact;
            var customerData = crud.CRD(customer, "CreateCustomer");
            if (customerData.Contains("Failed"))
            {
                Snackbar.Clear();
                Snackbar.Add(customerData, Severity.Error);
                return;
            }
            else
            {
                customer.CustomerID = customerData;
                await _protectedLocalStore.SetLocalAsync("customerID", customer.CustomerID);
                await _protectedLocalStore.SetLocalAsync("customerName", customer.Name);
                await _protectedLocalStore.SetLocalAsync("customerContact", customer.Contact);
                Snackbar.Clear();
                Snackbar.Add("Weclome " + customer.Name, Severity.Success);
                CloseModal();
            }
        }
    }

    private void CloseInputModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
        navigationManager.NavigateTo("/");
    }

    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
    }
}