@page "/adminlogin"
@using SharedClass.Components
@using SharedClass.Components.Data
@using Microsoft.AspNetCore.Components.Forms
@inject Login login;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject ExampleJsInterop Example;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService localStorage;

<div class="mt-5 bg-white modal-content p-1 m-auto shadow-sm" style="border-radius:20px;max-inline-size: fit-content;">
    <div class="modal-header text-center" style="align-self: center;">
        <h5 class="modal-title heading text-center">Login</h5>
    </div>
    <div class="modal-body p-1 m-auto">
        <EditForm Model="@login">
            <div class="mb-3">
                <InputText id="usernameInput" placeholder="Username" class="form-control" @bind-Value="Username" />
            </div>
            <div class="mb-3">
                <InputText id="passwordInput" placeholder="Password" type="password" class="form-control" @bind-Value="Password" />
            </div>
            <button type="submit" class="btn btnpc btn-primary m-1" @onclick="Pagelogin">Login</button>
        </EditForm>
    </div>
</div>

<script defer>
    function CreateCookie() {
        let CCookie = document.cookie = "Authorized=true";
        return CCookie;
    }
</script>

@code {
    private string Username = string.Empty;
    private string Password = string.Empty;
    private bool IsLoginSuccessful = false;

    private async void Pagelogin()
    {
        IsLoginSuccessful = await login.Access(Username, Password, JSRuntime);
        if (IsLoginSuccessful)
        {
            await localStorage.SetItemAsync("Authorized", true);
            await localStorage.SetItemAsync("Username", Username);
            await JSRuntime.InvokeAsync<string>("CreateCookie");
            NavigationManager.NavigateTo("/dashboard");
            Snackbar.Clear();
            Snackbar.Add("Welcome " + Username, Severity.Success);
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("Invalid Credentials", Severity.Error);
        }
    }
}
