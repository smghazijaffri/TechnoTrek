@using Microsoft.Data.SqlClient
@using System.Data;
@using Dapper
@inject Select select;
@inject Insert insert;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (Memories != null)
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in Memories)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand</h5>
                                <h5 class="card-title">@values.ItemName</h5>
                                <h6>Select Quantity</h6>
                                <p><MudSlider @bind-Value="quantity" Min="1" Max="4" Color="Color.Dark" ValueLabel="true" /></p>
                                <div>
                                    <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                        <h6><span>Show Description</span></h6>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                            @onclick="() => Select(values)">
                                        Select
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>


@code {
    private IEnumerable<ItemClass> Memories;
    public double quantity { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Motherboard") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) &&
                !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor"))
                {
                    string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                    string Processor = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                    Memories = db.Query<ItemClass>("select distinct it.* from ItemCompability inner join Items it on ItemCode = ItemID where CompatibilityID in ('" + MotherBoard + "','" + Processor + "') and Status = 'Enabled' and ItemType = 'Memory' union SELECT it.* FROM Items it LEFT JOIN ItemCompability ic ON it.ItemCode = ic.ItemID WHERE ic.ItemID IS NULL and ItemType = 'Memory' and Status = 'Enabled'").ToList();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Please reselect other components", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {

            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
        // Memories = await select.GetItemsAsync("Memory");
    }
    private async Task Select(ItemClass selectedMemory)
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")))
                {
                    string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                    string Processors = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                    List<string> CompatItem = new List<string>();
                    CompatItem.Add(MotherBoard);
                    CompatItem.Add(Processors);
                    DataTable CompiItem = select.ConvertListToDataTable(CompatItem);
                    var parameters = new DynamicParameters();
                    parameters.Add("@ItemCode", selectedMemory.ItemCode);
                    parameters.Add("@CompatibilityID", CompiItem.AsTableValuedParameter("dbo.CompatibleItems"));
                    parameters.Add("@Output", dbType: DbType.String, direction: ParameterDirection.Output, size: 50);
                    db.Execute("item_Compatibility", parameters, commandType: CommandType.StoredProcedure);
                    string outputValue = parameters.Get<string>("@Output");
                    if (outputValue != "Allow")
                    {
                        Snackbar.Clear();
                        Snackbar.Add(outputValue, Severity.Error);
                    }

                    else if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Memory"))
                    {
                        string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");
                        if (Memory != selectedMemory.ItemCode)
                        {
                            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage"))
                            {
                                string Processor = await _protectedLocalStore.GetLocalAsync<string>("Storage");

                                if (!string.IsNullOrEmpty(Processor))
                                {
                                    await _protectedLocalStore.SetLocalAsync("Cooler", "");
                                    await _protectedLocalStore.SetLocalAsync("Storage", "");
                                    await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
                                    await _protectedLocalStore.SetLocalAsync("Power Supply", "");
                                    await _protectedLocalStore.SetLocalAsync("Graphics Card", "");

                                    await _protectedLocalStore.SetLocalAsync("Memory", selectedMemory.ItemCode);

                                    Snackbar.Clear();
                                    Snackbar.Add("Please reselect other components", Severity.Info);
                                }
                                else
                                {
                                    await _protectedLocalStore.SetLocalAsync("Memory", selectedMemory.ItemCode);
                                    await _protectedLocalStore.SetLocalAsync("RamQuantity", quantity);
                                    Snackbar.Clear();
                                    Snackbar.Add("Selection Saved", Severity.Success);
                                }
                            }
                            else
                            {

                                await _protectedLocalStore.SetLocalAsync("Memory", selectedMemory.ItemCode);
                                await _protectedLocalStore.SetLocalAsync("RamQuantity", quantity);
                                Snackbar.Clear();
                                Snackbar.Add("Selection Saved", Severity.Success);
                            }
                        }
                        else
                        {

                            await _protectedLocalStore.SetLocalAsync("Memory", selectedMemory.ItemCode);
                            await _protectedLocalStore.SetLocalAsync("RamQuantity", quantity);
                            Snackbar.Clear();
                            Snackbar.Add("Selection Saved", Severity.Success);
                        }
                    }
                    else
                    {
                        await _protectedLocalStore.SetLocalAsync("RamQuantity", quantity);
                        await _protectedLocalStore.SetLocalAsync("Memory", selectedMemory.ItemCode);
                        Snackbar.Clear();
                        Snackbar.Add("Selection Saved", Severity.Success);
                    }

                }

                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Please reselect other components", Severity.Info);
                }
            }

        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void OnButtonClicked(string message)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Description", message);
        StateHasChanged();
    }
}
