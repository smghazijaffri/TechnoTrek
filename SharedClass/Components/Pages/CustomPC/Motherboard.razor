@inject CRUD crud;
@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (Motherboards != null && Motherboards.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in Motherboards)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand @values.ItemName</h5>
                                <h6 class="card-title">Rs. @(ItemRates.ContainsKey(values.ItemCode) ? ItemRates[values.ItemCode]?.ToString() ?? "N/A" : "Loading...")</h6>
                                @if (!string.IsNullOrEmpty(values.Description))
                                {
                                    <div>
                                        <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                            <h6><span>Product Page</span></h6>
                                        </div>
                                    </div>
                                }
                                @if (isBulk)
                                {
                                    <h6>Select Quantity: @quantities[values.ItemCode]</h6>
                                    <p><MudSlider @bind-Value="quantities[values.ItemCode]" Min="20" Max="50" Color="Color.Dark" ValueLabel="true" /></p>
                                    <h6>Total: @(ItemRates[values.ItemCode] * quantities[values.ItemCode])</h6>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Order(values, quantities[values.ItemCode])">
                                            Order
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Select
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

<script>
    function openInNewTab(url) {
        window.open(url, '_blank');
    }
</script>

@code {
    [Parameter]
    public bool isBulk { get; set; }

    [Parameter]
    public string? userid { get; set; }

    [Parameter]
    public string? Username { get; set; }

    bool isMobile = false;

    string? DeviceType { get; set; }

    private IEnumerable<ItemClass>? Motherboards;

    private Dictionary<string, int> quantities = new Dictionary<string, int>();

    private Dictionary<string, decimal?> ItemRates = new Dictionary<string, decimal?>();

    protected override async Task OnInitializedAsync()
    {
        Motherboards = await select.GetItemsAsync("Motherboard");
        if (Motherboards.Any())
        {
            foreach (var item in Motherboards)
            {
                var stock = await select.GetStockDataAsync(item.ItemCode);
                ItemRates[item.ItemCode] = stock?.FirstOrDefault()?.Rate;
                quantities[item.ItemCode] = 20;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using SqlConnection db = new SqlConnection(con.connectionString);
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
        StateHasChanged();
    }

    private async Task Select(ItemClass selectedMotherboard)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor"))
            {
                if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")))
                {
                    var components = new[] { "Memory", "Cooler", "Storage", "Processor", "Gaming Case", "Power Supply", "Graphics Card" };

                    foreach (var component in components)
                    {
                        await _protectedLocalStore.SetLocalAsync(component, "");
                    }

                    Snackbar.Clear();
                    Snackbar.Add("Please reselect other components", Severity.Info);
                }
            }

            await _protectedLocalStore.SetLocalAsync("Motherboard", selectedMotherboard.ItemCode);
            Snackbar.Add("Selection Saved", Severity.Success);
        }
        catch (Exception ex)
        {
            if (isMobile) Vibration.Default.Vibrate();
            Snackbar.Add($"Error selecting item: {ex.Message}", Severity.Error);
        }
    }

    private async Task Order(ItemClass selected, int quantity)
    {
        try
        {
            if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);

            var cartItems = await Data.Select.RetrieveCartItems(userid);

            bool itemFound = false;
            for (int i = 0; i < cartItems.Count; i++)
            {
                if (cartItems[i].Code == selected.ItemCode)
                {
                    cartItems[i].Quantity = quantity;
                    itemFound = true;
                    break;
                }
            }

            if (!itemFound)
            {
                AppState.CartItemCount++;
                cartItems.Add(new Bulk { Code = selected.ItemCode, Quantity = quantity });
            }

            var serializedItems = JsonSerializer.Serialize(cartItems);

            var parameters = new DynamicParameters();
            parameters.Add("@UserID", userid);
            parameters.Add("@CartItemsJson", serializedItems);
            parameters.Add("@Action", "Save");

            var result = crud.CRD3(parameters, "ManageCartItems", CommandType.StoredProcedure, false, outputMessage: true, errorMessage: true);

            if (!string.IsNullOrEmpty(result.Output))
            {
                Snackbar.Add(result.Output, Severity.Success);
            }
            else if (result.ErrorMessage != null)
            {
                AppState.CartItemCount--;
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
            else
            {
                AppState.CartItemCount--;
                Snackbar.Add("Failed to add to cart.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            if (isMobile) Vibration.Default.Vibrate();
            Snackbar.Add($"Error ordering item: {ex.Message}", Severity.Error);
        }
    }

    public class Bulk
    {
        public string? Code { get; set; }
        public int Quantity { get; set; }
    }

    private async void OnButtonClicked(string link)
    {
        try
        {
            if (!isMobile)
            {
                await JSRuntime.InvokeVoidAsync("openInNewTab", link);
            }
            else
            {
                HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
                bool supportsUri = await Launcher.Default.CanOpenAsync(new Uri(link));

                if (supportsUri)
                {
                    await Launcher.Default.OpenAsync(new Uri(link));
                }
                else
                {
                    Snackbar.Add("Can't Open Link", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}