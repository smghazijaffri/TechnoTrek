@inject Select select;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (Motherboards != null && Motherboards.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in Motherboards)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand @values.ItemName</h5>
                                <h6 class="card-title">Rs. @(ItemRates.ContainsKey(values.ItemCode) ? ItemRates[values.ItemCode]?.ToString() ?? "N/A" : "Loading...")</h6>
                                <div>
                                    <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                        <h6><span>Visit Product Page</span></h6>
                                    </div>
                                </div>
                                @if (isBulk)
                                {
                                    <h6>Select Quantity: @quantity</h6>
                                    <p><MudSlider @bind-Value="quantity" Min="20" Max="50" Color="Color.Dark" ValueLabel="true" /></p>
                                    <h6>Total: @(ItemRates[values.ItemCode] * quantity)</h6>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Order(values, quantity)">
                                            Order
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Select
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h1>Sorry, no product available</h1>
        }
    </div>
</section>

<script>
    function openInNewTab(url) {
        window.open(url, '_blank');
    }
</script>

@code {
    [Parameter]
    public bool isBulk { get; set; }

    public int quantity { get; set; } = 20;

    private IEnumerable<ItemClass>? Motherboards;

    private Dictionary<string, decimal?> ItemRates = new Dictionary<string, decimal?>();

    protected override async Task OnInitializedAsync()
    {
        Motherboards = await select.GetItemsAsync("Motherboard");
        if (Motherboards.Any())
        {
            foreach (var item in Motherboards)
            {
                var stock = await select.GetStockDataAsync(item.ItemCode);
                ItemRates[item.ItemCode] = stock?.FirstOrDefault()?.Rate;
            }
        }
    }

    private async Task Select(ItemClass selectedMotherboard)
    {
        if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")))
        {
            await _protectedLocalStore.SetLocalAsync("Memory", "");
            await _protectedLocalStore.SetLocalAsync("Cooler", "");
            await _protectedLocalStore.SetLocalAsync("Storage", "");
            await _protectedLocalStore.SetLocalAsync("Processor", "");
            await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
            await _protectedLocalStore.SetLocalAsync("Power Supply", "");
            await _protectedLocalStore.SetLocalAsync("Graphics Card", "");

            await _protectedLocalStore.SetLocalAsync("Motherboard", selectedMotherboard.ItemCode);

            Snackbar.Clear();
            Snackbar.Add("Please reselect other components", Severity.Info);
        }
        else
        {
            await _protectedLocalStore.SetLocalAsync("Motherboard", selectedMotherboard.ItemCode);
        }
        Snackbar.Add("Selection Saved", Severity.Success);
    }

    private async Task Order(ItemClass selected, int quantity)
    {
        await _protectedLocalStore.SetLocalAsync("BulkMotherboard", selected);
        await _protectedLocalStore.SetLocalAsync("BulkMotherboardQuantity", quantity);
    }

    private async void OnButtonClicked(string link)
    {
        await JSRuntime.InvokeVoidAsync("openInNewTab", link);
    }
}