@page "/buildpc";

@using static Modals.CustomModal

@inject BOM bom;
@inject CRUD crud;
@inject Login login;
@inject Connection con;
@inject BOM_Item BOMItem;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

@if (AppState.CustomerAuthorized)
{
    @if (!isQuickViewVisible)
    {
        <div class="container" style="max-width: 100vw; overflow-x: hidden; padding-bottom: 20px;">
            <div class="row justify-content-center">
                @if (string.IsNullOrEmpty(AppState.Case) && string.IsNullOrEmpty(AppState.Memory) && string.IsNullOrEmpty(AppState.Cooler) && string.IsNullOrEmpty(AppState.PSU) &&
               string.IsNullOrEmpty(AppState.Storage) && string.IsNullOrEmpty(AppState.GPU) && string.IsNullOrEmpty(AppState.Processor) && string.IsNullOrEmpty(AppState.Motherboard))
                {
                    <div class="card col-12 col-md-12 col-lg-6 p-5 border-danger bg-gradient shadow" style="border-radius:20px;">
                        <div class="card-wrapper">
                            <div class="card-box align-center">
                                <h1 class="card-title mbr-fonts-style mb-4 display-1" style="font-family: 'Arial Rounded MT'; font-weight: 400; color: black;">
                                    <strong>Ready to Build Your Dream PC?</strong>
                                </h1>
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(AppState.Case) || !string.IsNullOrEmpty(AppState.Memory) || !string.IsNullOrEmpty(AppState.Cooler) || !string.IsNullOrEmpty(AppState.PSU) ||
               !string.IsNullOrEmpty(AppState.Storage) || !string.IsNullOrEmpty(AppState.GPU) || !string.IsNullOrEmpty(AppState.Processor) || !string.IsNullOrEmpty(AppState.Motherboard))
                {
                    <div class="col-md-3 p-auto pb-2 mt-2">
                        <div class="border border-danger shadow p-auto m-auto" style="border-radius: 20px;">
                            <div class="card-body p-3 m-auto">
                                <div class="row pb-2 m-auto">
                                    <div class="col-6">
                                        <h5 class="card-title">ITEMS</h5>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(AppState.Motherboard))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Motherboard</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @MotherboardPrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.Processor))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Processor</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @ProcessorPrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.GPU))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Graphics</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @GraphicsPrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.Case))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Case</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @CasePrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.Memory))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Memory (@MemoryQuantity):</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @MemoryPrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.Storage))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Storage (@StorageQuantity)</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @StoragePrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.PSU))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Supply</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @SupplyPrice</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(AppState.Cooler))
                                {
                                    <div class="row mb-2 m-auto">
                                        <div class="col-6">
                                            <p class="card-text">@Cooler</p>
                                        </div>
                                        <div class="col-6 text-right">
                                            <p class="card-text">Rs. @CoolerPrice</p>
                                        </div>
                                    </div>
                                }

                                <div class="row mb-2 m-auto">
                                    <div class="col-6">
                                        <h5>Total:</h5>
                                    </div>
                                    <div class="col-6 text-right">
                                        <h6>Rs. @totalPrice</h6>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(AppState.Case) && !string.IsNullOrEmpty(AppState.Memory) && !string.IsNullOrEmpty(AppState.Cooler) && !string.IsNullOrEmpty(AppState.PSU) && !string.IsNullOrEmpty(AppState.Storage) && !string.IsNullOrEmpty(AppState.GPU) && !string.IsNullOrEmpty(AppState.Processor) && !string.IsNullOrEmpty(AppState.Motherboard))
                                {
                                    @if (!isConfirming)
                                    {
                                        <div class="row mt-3 m-auto">
                                            <div class="col-12 text-center">
                                                <NavLink @onclick="SaveBOM" class="btn btnpc" style="background-color:#A687CB; color:white">Confirm</NavLink>
                                            </div>
                                        </div>
                                    }
                                    else if (isConfirming)
                                    {
                                        <button class="btn btn-danger rounded-lg me-4" type="button" disabled>
                                            <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                                            <span role="status">Confirming...</span>
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="container col-auto m-auto pb-4">
            <div class="row justify-content-center p-auto me-auto">
                <Virtualize ItemsProvider="LoadComponents" Context="component">
                    <div class="col-md-3 p-auto m-auto" title="@component.Title">
                        <div class="shadow p-auto m-auto" style="border-radius:20px;">
                            <div class="container p-4">
                                <img src="@component.ImageUrl" class="card-img-top" alt="...">
                            </div>
                            <div class="card-body p-3 m-auto">
                                <h5 class="card-title text-truncate">@component.Title</h5>
                                <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    <p class="card-text">@component.Description</p>
                                </div>
                                <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@component.OnClickAction" Match="NavLinkMatch.All">Select</NavLink>
                            </div>
                        </div>
                    </div>
                </Virtualize>
            </div>
            <button class="scroll-to-top" @onclick="ScrollToTop">
                <i class="bi bi-arrow-up"></i>
            </button>
        </div>
    }
}

<CustomModal Model="model" IsVisible="isQuickViewVisible" ComponentName="@selectedComponentName" OnClose="HandleCloseModal" />

<style>
    .scroll-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: none;
        width: 50px;
        height: 50px;
        background-color: transparent;
        color: red;
        border: none;
        border-radius: 50%;
        text-align: center;
        font-size: 24px;
        cursor: pointer;
        z-index: 1000;
    }

        .scroll-to-top.show {
            display: block;
        }
</style>

@code {
    private List<PCComponent> components;

    BuildPcViewModel model = new BuildPcViewModel();

    string? Role { get; set; }
    string? userid { get; set; }
    string? Username { get; set; }
    string? DeviceType { get; set; }

    bool isMobile = false;
    bool IsVisible { get; set; }
    bool isQuickViewVisible = false;

    string? Case { get; set; }
    string? CaseCode { get; set; }
    int CasePrice { get; set; }

    string? Memory { get; set; }
    string? MemoryCode { get; set; }
    int MemoryPrice { get; set; }
    int MemoryQuantity { get; set; }

    string? Cooler { get; set; }
    string? CoolerCode { get; set; }
    int CoolerPrice { get; set; }

    string? Supply { get; set; }
    string? SupplyCode { get; set; }
    int SupplyPrice { get; set; }

    string? Storage { get; set; }
    string? StorageCode { get; set; }
    int StoragePrice { get; set; }
    int StorageQuantity { get; set; }

    string? Graphics { get; set; }
    string? GraphicsCode { get; set; }
    int GraphicsPrice { get; set; }

    string? Processor { get; set; }
    string? ProcessorCode { get; set; }
    int ProcessorPrice { get; set; }

    string? Motherboard { get; set; }
    string? MotherboardCode { get; set; }
    int MotherboardPrice { get; set; }

    int totalPrice { get; set; } = 0;

    string selectedComponentName = "";

    bool isConfirming = false;

    protected override async void OnInitialized()
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        Username = AppState.Username;
        Role = AppState.Role;
        if (!string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Role))
        {
            userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = Username });
            if (string.IsNullOrEmpty(userid))
            {
                Snackbar.Add("User does not exist", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
            else if (Role != "Customer")
            {
                Snackbar.Add("Please login as a Customer", Severity.Error);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
        else
        {
            Snackbar.Add("Please login as a Customer", Severity.Error);
            AppState.Authorized = false;
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        var itemNames = new[] { "Memory", "Cooler", "Storage", "Gaming Case", "Processor", "Power Supply", "Motherboard", "Graphics Card" };
        var itemTasks = itemNames.Select(itemName => LoadItemDataAsync(itemName)).ToList();

        var itemResults = await Task.WhenAll(itemTasks);

        Memory = itemResults[0].Name;
        MemoryCode = itemResults[0].Code;
        MemoryQuantity = AppState.MemoryQuantity;
        MemoryPrice = itemResults[0].Price * MemoryQuantity;

        Cooler = itemResults[1].Name;
        CoolerCode = itemResults[1].Code;
        CoolerPrice = itemResults[1].Price;

        Storage = itemResults[2].Name;
        StorageCode = itemResults[2].Code;
        StorageQuantity = AppState.StorageQuantity;
        StoragePrice = itemResults[2].Price * StorageQuantity;

        Case = itemResults[3].Name;
        CaseCode = itemResults[3].Code;
        CasePrice = itemResults[3].Price;

        Processor = itemResults[4].Name;
        ProcessorCode = itemResults[4].Code;
        ProcessorPrice = itemResults[4].Price;

        Supply = itemResults[5].Name;
        SupplyCode = itemResults[5].Code;
        SupplyPrice = itemResults[5].Price;

        Motherboard = itemResults[6].Name;
        MotherboardCode = itemResults[6].Code;
        MotherboardPrice = itemResults[6].Price;

        Graphics = itemResults[7].Name;
        GraphicsCode = itemResults[7].Code;
        GraphicsPrice = itemResults[7].Price;

        totalPrice = 0;
        totalPrice = MotherboardPrice + ProcessorPrice + MemoryPrice + StoragePrice + GraphicsPrice + SupplyPrice + CasePrice + CoolerPrice;

        components = await GetComponentsAsync();

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
        }
    }

    private Task<List<PCComponent>> GetComponentsAsync()
    {
        return Task.FromResult(new List<PCComponent>
        {
            new PCComponent { Title = "Motherboard", ImageUrl = "_content/SharedClass/Images/motherboard.jpg", Description = string.IsNullOrEmpty(AppState.Motherboard)? "Choose your desired Motherboard" : Motherboard, OnClickAction = () => ShowQuickView("Motherboard") },
            new PCComponent { Title = "Processor", ImageUrl = "_content/SharedClass/Images/processor.jpg", Description = string.IsNullOrEmpty(AppState.Processor)? "Choose your desired Processor" : Processor, OnClickAction = () => ShowQuickView("Processor") },
            new PCComponent { Title = "Memory", ImageUrl = "_content/SharedClass/Images/ram.jpg", Description = string.IsNullOrEmpty(AppState.Memory)? "Choose your desired Memory" : Memory, OnClickAction = () => ShowQuickView("Memory") },
            new PCComponent { Title = "Storage", ImageUrl = "_content/SharedClass/Images/ssd.jpg", Description = string.IsNullOrEmpty(AppState.Storage)? "Choose your desired Storage" : Storage, OnClickAction = () => ShowQuickView("Storage") },
            new PCComponent { Title = "Graphics Card", ImageUrl = "_content/SharedClass/Images/gpu.jpg", Description = string.IsNullOrEmpty(AppState.GPU)? "Choose your desired Graphics Card" : Graphics, OnClickAction = () => ShowQuickView("Graphics Card") },
            new PCComponent { Title = "Power Supply", ImageUrl = "_content/SharedClass/Images/psu.jpg", Description = string.IsNullOrEmpty(AppState.PSU)? "Choose your desired Power Supply" : Supply, OnClickAction = () => ShowQuickView("Power Supply") },
            new PCComponent { Title = "Gaming Case", ImageUrl = "_content/SharedClass/Images/case.jpg", Description = string.IsNullOrEmpty(AppState.Case)? "Choose your desired Gaming Case" : Case, OnClickAction = () => ShowQuickView("Gaming Case") },
            new PCComponent { Title = "Cooler", ImageUrl = "_content/SharedClass/Images/cooler.jpg", Description = string.IsNullOrEmpty(AppState.Cooler)? "Choose your desired Fans" : Cooler, OnClickAction = () => ShowQuickView("Cooler") }
        });
    }

    private async ValueTask<ItemsProviderResult<PCComponent>> LoadComponents(ItemsProviderRequest request)
    {
        var totalItemCount = components.Count;
        var items = components.Skip(request.StartIndex).Take(request.Count).ToList();
        await ValueTask.CompletedTask;
        return new ItemsProviderResult<PCComponent>(items, totalItemCount);
    }

    private async Task<(string? Name, string Code, int Price)> LoadItemDataAsync(string itemName)
    {
        string itemCode = GetItemCode(itemName);
        if (!string.IsNullOrEmpty(itemCode))
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                var itemData = await GetItemDataAsync(db, itemCode);
                return itemData;
            }
        }

        return (null, string.Empty, 0);
    }

    private string GetItemCode(string itemName)
    {
        return itemName switch
        {
            "Memory" => AppState.Memory,
            "Cooler" => AppState.Cooler,
            "Storage" => AppState.Storage,
            "Gaming Case" => AppState.Case,
            "Processor" => AppState.Processor,
            "Power Supply" => AppState.PSU,
            "Motherboard" => AppState.Motherboard,
            "Graphics Card" => AppState.GPU,
            _ => string.Empty
        };
    }

    private async Task<(string? Name, string Code, int Price)> GetItemDataAsync(SqlConnection db, string itemCode)
    {
        string? itemName = await db.QuerySingleOrDefaultAsync<string?>(
            "SELECT ItemName FROM Items WHERE ItemCode = @ItemCode ORDER BY ItemCode",
            new { ItemCode = itemCode });

        int itemPrice = await db.QueryFirstOrDefaultAsync<int>(
            "SELECT TOP(1) Rate FROM Stock WHERE ItemID = @ItemCode",
            new { ItemCode = itemCode });

        return (itemName, itemCode, itemPrice);
    }

    private void ShowQuickView(string componentName)
    {
        var dependencies = new Dictionary<string, List<string>>()
        {
            { "Motherboard", new List<string>() },
            { "Processor", new List<string> { "Motherboard" } },
            { "Memory", new List<string> { "Motherboard", "Processor" } },
            { "Storage", new List<string> { "Motherboard", "Processor", "Memory" } },
            { "Graphics Card", new List<string> { "Motherboard", "Processor", "Memory", "Storage" } },
            { "Power Supply", new List<string> { "Motherboard", "Processor", "Memory", "Storage", "Graphics Card" } },
            { "Gaming Case", new List<string> { "Motherboard", "Processor", "Memory", "Storage", "Graphics Card", "Power Supply" } },
            { "Cooler", new List<string> { "Motherboard", "Processor", "Memory", "Storage", "Graphics Card", "Power Supply", "Gaming Case" } }
        };

        if (dependencies.TryGetValue(componentName, out var requiredComponents))
        {
            bool allDependenciesMet = requiredComponents.All(component => !string.IsNullOrEmpty(GetComponentValue(component)));

            if (allDependenciesMet)
            {
                selectedComponentName = componentName;
                isQuickViewVisible = true;
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("Please select the previous components first", Severity.Error);
            }
        }
    }

    private string GetComponentValue(string componentName)
    {
        return componentName switch
        {
            "Motherboard" => AppState.Motherboard,
            "Processor" => AppState.Processor,
            "Memory" => AppState.Memory,
            "Storage" => AppState.Storage,
            "Graphics Card" => AppState.GPU,
            "Power Supply" => AppState.PSU,
            "Gaming Case" => AppState.Case,
            "Cooler" => AppState.Cooler,
            _ => string.Empty
        };
    }

    private Task ClearComponentSelectionsAsync()
    {
        AppState.Motherboard = string.Empty;
        AppState.Processor = string.Empty;
        AppState.Memory = string.Empty;
        AppState.MemoryQuantity = 0;
        AppState.Storage = string.Empty;
        AppState.StorageQuantity = 0;
        AppState.GPU = string.Empty;
        AppState.PSU = string.Empty;
        AppState.Case = string.Empty;
        AppState.Cooler = string.Empty;
        return Task.CompletedTask;
    }

    private void HandleCloseModal()
    {
        OnInitialized();
        IsVisible = false;
        isQuickViewVisible = false;
        StateHasChanged();
    }

    public void SaveBOM()
    {
        if (isConfirming)
        {
            Snackbar.Add("Please Wait", Severity.Info);
            return;
        }

        isConfirming = true;

        try
        {
            if (isMobile) HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                BOM bom = new BOM();
                var customerID = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = Username });
                if (!string.IsNullOrEmpty(customerID))
                {
                    var customerName = db.QueryFirstOrDefault<string>("Select Name from Customer where CustomerID = @CustomerID", new { CustomerID = customerID });
                    var customerContact = db.QueryFirstOrDefault<string>("Select Contact from Customer where CustomerID = @CustomerID", new { CustomerID = customerID });
                    string BOMName = $"BOM for {customerName}-{customerContact}-{DateTime.Today.ToString("MM/dd/yyyy")}";
                    var parameter = new DynamicParameters();
                    parameter.Add("@BOMID", "");
                    parameter.Add("@BOMName", BOMName);
                    parameter.Add("@ItemName", (customerID + " PC"));
                    parameter.Add("@DocumentDate", DateTime.Today);
                    parameter.Add("@IsActive", true);
                    parameter.Add("@Type", "Customer");
                    OutputClass output = crud.CRD3(parameter, "CreateBOM", outputMessage: true, errorMessage: true);
                    if (output.ErrorMessage != null)
                    {
                        Snackbar.Clear();
                        Snackbar.Add(output.ErrorMessage, Severity.Error);
                        return;
                    }
                    bom.BOMID = output.Output;

                    List<CustomPC_Items> customItems = new List<CustomPC_Items>();
                    customItems.Add(new CustomPC_Items { ItemID = MotherboardCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = SupplyCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = CaseCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = CoolerCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = ProcessorCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = MemoryCode, Quantity = AppState.MemoryQuantity });
                    customItems.Add(new CustomPC_Items { ItemID = GraphicsCode, Quantity = 1 });
                    customItems.Add(new CustomPC_Items { ItemID = StorageCode, Quantity = AppState.StorageQuantity });
                    DataTable dataTable = new DataTable("CustomPC_ItemsTable");

                    dataTable.Columns.Add("ItemID", typeof(string));
                    dataTable.Columns.Add("Quantity", typeof(int));

                    foreach (var item in customItems)
                    {
                        DataRow row = dataTable.NewRow();
                        row["ItemID"] = item.ItemID;
                        row["Quantity"] = item.Quantity;
                        dataTable.Rows.Add(row);
                    }
                    var parameters = new DynamicParameters();
                    parameters.Add("@CustomPCItems", dataTable.AsTableValuedParameter("dbo.CustomPC_Items"));
                    parameters.Add("@BOMID", bom.BOMID);
                    parameters.Add("@ErrorMessage", dbType: DbType.String, direction: ParameterDirection.Output, size: 2000);

                    db.Execute("CustomPcBOM_Items", parameters, commandType: CommandType.StoredProcedure);
                    string ErrorMessage = parameters.Get<string>("@ErrorMessage");
                    if (ErrorMessage != null)
                    {
                        Snackbar.Clear();
                        Snackbar.Add(ErrorMessage, Severity.Error);
                    }
                    else
                    {
                        Snackbar.Clear();
                        Snackbar.Add("Order Confirmed", Severity.Success);
                        ClearComponentSelectionsAsync();
                    }
                }
                else
                {
                    AppState.CartItemCount = 0;
                    AppState.Username = string.Empty;
                    AppState.CustomerAuthorized = false;
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    Snackbar.Add("User not found.", Severity.Error);
                }
                StateHasChanged();
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            isConfirming = false;
        }
    }

    private void ScrollToTop()
    {
        JSRuntime.InvokeVoidAsync("scrollToTop");
    }
}