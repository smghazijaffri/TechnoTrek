@page "/buildpc";

@using static SharedClass.Components.Pages.Modals.CustomerModal
@using static SharedClass.Components.Pages.Modals.CustomModal
@using SharedClass.Components.Pages.Modals;
@using SharedClass.Components.Data;
@using Microsoft.Data.SqlClient;
@using System.Data;
@using System.Text
@using Dapper;

@inject BOM bom;
@inject CRUD crud;
@inject Insert insert;
@inject Connection con;
@inject BOM_Item BOMItem;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject ProtectedLocalStorage _protectedLocalStore;

<div class="container" style="max-width: 100vw; overflow-x: hidden; padding-bottom: 20px;">
    <div class="row justify-content-center">
        <div class="card col-12 col-md-12 col-lg-6 p-5 border-danger bg-gradient shadow" style="border-radius:20px;">
            <div class="card-wrapper">
                <div class="card-box align-center">
                    <h1 class="card-title mbr-fonts-style mb-4 display-1" style="font-family: 'Arial Rounded MT'; font-weight: 400; color: black;">
                        <strong>Ready to Build Your Dream PC?</strong>
                    </h1>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Case) && !string.IsNullOrEmpty(Memory) && !string.IsNullOrEmpty(Cooler) && !string.IsNullOrEmpty(Supply) &&
        !string.IsNullOrEmpty(Storage) && !string.IsNullOrEmpty(Graphics) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Motherboard))
        {
            <div class="col-md-3 p-auto pb-2 mt-2">
                <div class="shadow p-auto m-auto" style="border-radius: 20px;">
                    <div class="card-body p-3 m-auto">
                        <div class="row pb-2 m-auto">
                            <div class="col-6">
                                <h5 class="card-title">Items</h5>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Motherboard:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @MotherboardPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Processor:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @ProcessorPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Graphics Card:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @GraphicsPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Case:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @CasePrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Memory:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @MemoryPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Storage:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @StoragePrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Power Supply:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @SupplyPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <p class="card-text">Cooler:</p>
                            </div>
                            <div class="col-6 text-right">
                                <p class="card-text">Rs. @CoolerPrice</p>
                            </div>
                        </div>

                        <div class="row mb-2 m-auto">
                            <div class="col-6">
                                <h5>Total:</h5>
                            </div>
                            <div class="col-6 text-right">
                                <h6>Rs. @totalPrice</h6>
                            </div>
                        </div>

                        <div class="row mt-3 m-auto">
                            <div class="col-12 text-center">
                                <NavLink @onclick="SaveBOM" class="btn btnpc" style="background-color:#A687CB; color:white">Confirm</NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="container col-auto m-auto pb-4">
    <div class="row justify-content-center p-auto me-auto">
        <div class="col-md-3 p-auto m-auto" title="Motherboard">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/motherboard.jpg" class="card-img-top" alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Motherboard</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Motherboard == "" || Motherboard == null)
                        {
                            <p class="card-text">Choose your desired Motherboard</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Motherboard">@Motherboard</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Motherboard"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Processor">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/processor.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Processor</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Processor == "" || Processor == null)
                        {
                            <p class="card-text">Choose your desired Processor</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Processor">@Processor</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Processor"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Memory">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/ram.jpg" class="card-img-top" alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Memory</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Memory == "" || Memory == null)
                        {
                            <p class="card-text">Choose your desired Memory</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Memory">@Memory</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Memory"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Storage">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/ssd.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Storage</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Storage == "" || Storage == null)
                        {
                            <p class="card-text">Choose your desired Storage</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Storage">@Storage</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Storage"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Graphics Card">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/gpu.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Graphics Card</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Graphics == "" || Graphics == null)
                        {
                            <p class="card-text">Choose your desired Graphics Card</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Graphics">@Graphics</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Graphics Card"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Power Supply">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/psu.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Power Supply</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Supply == "" || Supply == null)
                        {
                            <p class="card-text">Choose your desired Power PSU</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Supply">@Supply</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Power Supply"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Gaming Case">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/case.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Gaming Case</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Case == "" || Case == null)
                        {
                            <p class="card-text">Choose your desired Gaming Case</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Case">@Case</p>
                        }
                    </div>
                    <NavLink class="btn btnpc m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Gaming Case"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-3" title="Cooler">
            <div class="shadow p-auto m-auto" style="border-radius:20px;">
                <div class="container p-4">
                    <img src="_content/SharedClass/Images/cooler.jpg" class="card-img-top " alt="...">
                </div>
                <div class="card-body p-3 m-auto">
                    <h5 class="card-title text-truncate">Cooler</h5>
                    <div class="m-auto" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @if (Cooler == "" || Cooler == null)
                        {
                            <p class="card-text">Choose your desired Fans</p>
                        }
                        else
                        {
                            <p class="card-text" title="@Cooler">@Cooler</p>
                        }
                    </div>
                    <NavLink class="btn btnpc  m-1" style="background-color:#A687CB; color:white" @onclick="@(args => ShowQuickView("Cooler"))" Match="NavLinkMatch.All">Select</NavLink>
                </div>
            </div>
        </div>
    </div>
</div>

<CustomerModal @bind-IsVisible="IsVisible" OnSaveChanges="HandleInputModalSaveChanges" />

<CustomModal Model="model" IsVisible="isQuickViewVisible" ComponentName="@selectedComponentName" OnClose="HandleCloseModal" />

@code {
    public DropDown DropDownUOM = new DropDown();

    public List<string> CustomItems = new List<string>();
    public List<int> CustomItemsPrice = new List<int>();
    private List<BOM_Item> BOMItems = new List<BOM_Item>();

    BuildPcViewModel model = new BuildPcViewModel();

    bool isModalOpen = false;
    private bool IsVisible { get; set; }
    private bool isQuickViewVisible = false;

    string Case { get; set; }
    string CaseCode { get; set; }
    int CasePrice { get; set; }
    string Memory { get; set; }
    string MemoryCode { get; set; }
    int MemoryPrice { get; set; }
    string Cooler { get; set; }
    string CoolerCode { get; set; }
    int CoolerPrice { get; set; }
    string Supply { get; set; }
    string SupplyCode { get; set; }
    int SupplyPrice { get; set; }
    string Storage { get; set; }
    string StorageCode { get; set; }
    int StoragePrice { get; set; }
    string Graphics { get; set; }
    string GraphicsCode { get; set; }
    int GraphicsPrice { get; set; }
    string Processor { get; set; }
    string ProcessorCode { get; set; }
    int ProcessorPrice { get; set; }
    string Motherboard { get; set; }
    string MotherboardCode { get; set; }
    int MotherboardPrice { get; set; }

    int totalPrice = 0;
    private string selectedComponentName = "";

    private void ShowQuickView(string componentName)
    {
        if (componentName == "Motherboard")
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Processor" && !string.IsNullOrEmpty(Motherboard))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Memory" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Storage" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Memory))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Graphics Card" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Memory) && !string.IsNullOrEmpty(Storage))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Power Supply" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Memory) && !string.IsNullOrEmpty(Storage) && !string.IsNullOrEmpty(Graphics))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Gaming Case" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Memory) && !string.IsNullOrEmpty(Storage) && !string.IsNullOrEmpty(Graphics) && !string.IsNullOrEmpty(Supply))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else if (componentName == "Cooler" && !string.IsNullOrEmpty(Motherboard) && !string.IsNullOrEmpty(Processor) && !string.IsNullOrEmpty(Memory) && !string.IsNullOrEmpty(Storage) && !string.IsNullOrEmpty(Graphics) && !string.IsNullOrEmpty(Supply) && !string.IsNullOrEmpty(Case))
        {
            isModalOpen = true;
            selectedComponentName = componentName;
            isQuickViewVisible = true;
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("Please select the previous components first", Severity.Error);
        }
    }

    protected async override void OnInitialized()
    {
        IsVisible = true;

        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Memory"))
        {
            Memory = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Memory"));
            MemoryCode = await _protectedLocalStore.GetLocalAsync<string>("Memory");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                MemoryPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = MemoryCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Cooler"))
        {
            Cooler = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Cooler"));
            CoolerCode = await _protectedLocalStore.GetLocalAsync<string>("Cooler");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                CoolerPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = CoolerCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage"))
        {
            Storage = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Storage"));
            StorageCode = await _protectedLocalStore.GetLocalAsync<string>("Storage");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                StoragePrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = StorageCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Gaming Case"))
        {
            Case = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Gaming Case"));
            CaseCode = await _protectedLocalStore.GetLocalAsync<string>("Gaming Case");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                CasePrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = CaseCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor"))
        {
            Processor = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Processor"));
            ProcessorCode = await _protectedLocalStore.GetLocalAsync<string>("Processor");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                ProcessorPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = ProcessorCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Power Supply"))
        {
            Supply = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Power Supply"));
            SupplyCode = await _protectedLocalStore.GetLocalAsync<string>("Power Supply");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                SupplyPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = SupplyCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Motherboard"))
        {
            Motherboard = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Motherboard"));
            MotherboardCode = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                MotherboardPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = MotherboardCode });
            }
        }
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Graphics Card"))
        {
            Graphics = await GetItemNameAsync(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card"));
            GraphicsCode = await _protectedLocalStore.GetLocalAsync<string>("Graphics Card");
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                GraphicsPrice = db.QueryFirstOrDefault<int>("SELECT Top(1)Rate FROM Stock WHERE ItemID = @ItemCode ", new { ItemCode = GraphicsCode });
            }
        }

        totalPrice = 0;
        totalPrice = MotherboardPrice + ProcessorPrice + MemoryPrice + StoragePrice + GraphicsPrice + SupplyPrice + CasePrice + CoolerPrice;

        await InvokeAsync(StateHasChanged);
    }

    private async void HandleInputModalSaveChanges(BuildPcViewModel model)
    {
        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "customerName"))
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "customerContact"))
            {
                {
                    if (await _protectedLocalStore.GetLocalAsync<string>("customerName") != model.Name ||
                    await _protectedLocalStore.GetLocalAsync<string>("customerContact") != model.Contact)
                    {
                        await _protectedLocalStore.SetLocalAsync("Memory", "");
                        await _protectedLocalStore.SetLocalAsync("Cooler", "");
                        await _protectedLocalStore.SetLocalAsync("Storage", "");
                        await _protectedLocalStore.SetLocalAsync("Processor", "");
                        await _protectedLocalStore.SetLocalAsync("Motherboard", "");
                        await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
                        await _protectedLocalStore.SetLocalAsync("Power Supply", "");
                        await _protectedLocalStore.SetLocalAsync("Graphics Card", "");

                        await InvokeAsync(OnInitialized);
                        IsVisible = false;
                        isModalOpen = false;
                        isQuickViewVisible = false;
                    }
                    await _protectedLocalStore.SetLocalAsync("customerName", model.Name);
                    await _protectedLocalStore.SetLocalAsync("customerContact", model.Contact);
                }
            }
        }
        else
        {
            await _protectedLocalStore.SetLocalAsync("customerName", model.Name);
            await _protectedLocalStore.SetLocalAsync("customerContact", model.Contact);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void HandleCloseModal()
    {
        await InvokeAsync(OnInitialized);
        IsVisible = false;
        isModalOpen = false;
        isQuickViewVisible = false;
    }

    public async Task<string> GetItemNameAsync(string ItemCode)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            return await db.QuerySingleOrDefaultAsync<string>("SELECT ItemName FROM Items WHERE ItemCode = @ItemCode ORDER BY ItemCode", new { ItemCode });
        }
    }

    public async void SaveBOM()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                BOM bom = new BOM();
                string BOMName = "BOM for " + await _protectedLocalStore.GetLocalAsync<string>("customerName") + "-" + await _protectedLocalStore.GetLocalAsync<string>("customerContact") + "-" + DateTime.Now.Date;
                bom.BOMName = BOMName;
                bom.ItemName = await _protectedLocalStore.GetLocalAsync<string>("customerID") + " PC";
                bom.DocumentDate = DateTime.Now.Date;
                bom.IsActive = true;
                bom.Type = "Customer";
                bom.BOMID = crud.CRD(bom, "CreateBOM");

                List<CustomPC_Items> customItems = new List<CustomPC_Items>();
                customItems.Add(new CustomPC_Items { ItemID = MotherboardCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = SupplyCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = CaseCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = CoolerCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = ProcessorCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = MemoryCode, Quantity = await _protectedLocalStore.GetLocalAsync<int>("RamQuantity") });
                customItems.Add(new CustomPC_Items { ItemID = GraphicsCode, Quantity = 1 });
                customItems.Add(new CustomPC_Items { ItemID = StorageCode, Quantity = await _protectedLocalStore.GetLocalAsync<int>("StorageQuantity") });
                DataTable dataTable = new DataTable("CustomPC_ItemsTable");

                dataTable.Columns.Add("ItemID", typeof(string));
                dataTable.Columns.Add("Quantity", typeof(int));

                foreach (var item in customItems)
                {
                    DataRow row = dataTable.NewRow();
                    row["ItemID"] = item.ItemID;
                    row["Quantity"] = item.Quantity;
                    dataTable.Rows.Add(row);
                }
                var parameters = new DynamicParameters();
                parameters.Add("@CustomPCItems", dataTable.AsTableValuedParameter("dbo.CustomPC_Items"));
                parameters.Add("@BOMID", bom.BOMID);
                parameters.Add("@ErrorMessage", dbType: DbType.String, direction: ParameterDirection.Output, size: 2000);

                db.Execute("CustomPcBOM_Items", parameters, commandType: CommandType.StoredProcedure);
                string ErrorMessage = parameters.Get<string>("@ErrorMessage");
                if (ErrorMessage != null)
                {
                    Snackbar.Clear();
                    Snackbar.Add(ErrorMessage, Severity.Error);
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Order Confirmed", Severity.Success);
                    await _protectedLocalStore.SetLocalAsync("Memory", "");
                    await _protectedLocalStore.SetLocalAsync("Cooler", "");
                    await _protectedLocalStore.SetLocalAsync("Storage", "");
                    await _protectedLocalStore.SetLocalAsync("Processor", "");
                    await _protectedLocalStore.SetLocalAsync("Motherboard", "");
                    await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
                    await _protectedLocalStore.SetLocalAsync("Power Supply", "");
                    await _protectedLocalStore.SetLocalAsync("Graphics Card", "");
                }
            }
            StateHasChanged();
        }

        catch (Exception ex)
        {

            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}