@using Microsoft.Data.SqlClient
@using System.Data;
@using Dapper
@inject Select select;
@inject Insert insert;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (Coolers != null)
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in Coolers)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand</h5>
                                <h5 class="card-title">@values.ItemName</h5>
                                <div>
                                    <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                        <h6><span>Show Description</span></h6>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                            @onclick="() => Select(values)">
                                        Select
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>


@code {
    private IEnumerable<ItemClass> Coolers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Motherboard") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Memory") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Storage")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Graphics Card") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Power Supply") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Power Supply") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Gaming Case") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Gaming Case")))
                {
                    string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                    string Processor = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                    string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");
                    string Storage = await _protectedLocalStore.GetLocalAsync<string>("Storage");
                    string GPU = await _protectedLocalStore.GetLocalAsync<string>("Graphics Card");
                    string PowerSupply = await _protectedLocalStore.GetLocalAsync<string>("Power Supply");
                    string Case = await _protectedLocalStore.GetLocalAsync<string>("Gaming Case");

                    Coolers = db.Query<ItemClass>("select distinct it.* from ItemCompability inner join Items it on ItemCode = ItemID where CompatibilityID in ('" + MotherBoard + "','" + Processor + "','" + Memory + "','" + Storage + "','" + GPU + "','" + PowerSupply + "','" + Case + "') and ItemType = 'Cooler' and Status = 'Enabled' union SELECT it.* FROM Items it LEFT JOIN ItemCompability ic ON it.ItemCode = ic.ItemID WHERE ic.ItemID IS NULL and ItemType = 'Cooler' and Status = 'Enabled'").ToList();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Please reselect other components", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {

            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }

        //Coolers = await select.GetItemsAsync("Cooler");
    }

    private async Task Select(ItemClass selectedCooler)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Motherboard") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Memory") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Storage")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Graphics Card") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Power Supply") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Power Supply") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")) && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Gaming Case") && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Gaming Case")))
            {
                List<string> CompatItem = new List<string>();
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Motherboard"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Processor"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Memory"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Storage"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Power Supply"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Gaming Case"));
                DataTable CompiItem = select.ConvertListToDataTable(CompatItem);
                var parameters = new DynamicParameters();
                parameters.Add("@ItemCode", selectedCooler.ItemCode);
                parameters.Add("@CompatibilityID", CompiItem.AsTableValuedParameter("dbo.CompatibleItems"));
                parameters.Add("@Output", dbType: DbType.String, direction: ParameterDirection.Output, size: 50);
                db.Execute("item_Compatibility", parameters, commandType: CommandType.StoredProcedure);
                string outputValue = parameters.Get<string>("@Output");
                if (outputValue != "Allow")
                {
                    Snackbar.Clear();
                    Snackbar.Add(outputValue, Severity.Error);
                }
                else
                {
                    string component = "Cooler";
                    await _protectedLocalStore.SetLocalAsync(component, selectedCooler.ItemCode);
                    Snackbar.Clear();
                    Snackbar.Add("Selection Saved", Severity.Success);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("Selection Saved", Severity.Success);
                await _protectedLocalStore.SetLocalAsync("Gaming Case", selectedCooler.ItemCode);
            }
        }

       
    }

    private async void OnButtonClicked(string message)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Description", message);
        StateHasChanged();
    }
}
