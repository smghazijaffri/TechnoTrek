@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (Cases != null && Cases.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in Cases)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand @values.ItemName</h5>
                                <h6 class="card-title">Rs. @(ItemRates.ContainsKey(values.ItemCode) ? ItemRates[values.ItemCode]?.ToString() ?? "N/A" : "Loading...")</h6>
                                @if (!string.IsNullOrEmpty(values.Description))
                                {
                                    <div>
                                        <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                            <h6><span>Product Page</span></h6>
                                        </div>
                                    </div>
                                }
                                @if (isBulk)
                                {
                                    <h6>Select Quantity: @quantity</h6>
                                    <p><MudSlider @bind-Value="quantity" Min="20" Max="50" Color="Color.Dark" ValueLabel="true" /></p>
                                    <h6>Total: @(ItemRates[values.ItemCode] * quantity)</h6>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Order(values, quantity)">
                                            Order
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Select
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

<script>
    function openInNewTab(url) {
        window.open(url, '_blank');
    }
</script>

@code {
    [Parameter]
    public bool isBulk { get; set; }

    bool isMobile = false;
    string? DeviceType { get; set; }

    private IEnumerable<ItemClass>? Cases;

    private Dictionary<string, decimal?> ItemRates = new Dictionary<string, decimal?>();

    public int quantity { get; set; } = 20;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (isBulk)
                {
                    Cases = await select.GetItemsAsync("Gaming Case");
                }
                else
                {
                    if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor"))
                    && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Storage"))
                    && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")))
                    {
                        string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                        string Processor = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                        string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");
                        string Storage = await _protectedLocalStore.GetLocalAsync<string>("Storage");
                        string GPU = await _protectedLocalStore.GetLocalAsync<string>("Graphics Card");
                        string PowerSupply = await _protectedLocalStore.GetLocalAsync<string>("Power Supply");

                        Cases = db.Query<ItemClass>("select distinct it.* from ItemCompability inner join Items it on ItemCode = ItemID where CompatibilityID in ('" + MotherBoard + "','" + Processor + "','" + Memory + "','" + Storage + "','" + GPU + "','" + PowerSupply + "') and ItemType = 'Gaming Case' and Status = 'Enabled' union SELECT it.* FROM Items it LEFT JOIN ItemCompability ic ON it.ItemCode = ic.ItemID WHERE ic.ItemID IS NULL and ItemType = 'Gaming Case' and Status = 'Enabled'").ToList();
                    }
                    else
                    {
                        Snackbar.Clear();
                        Snackbar.Add("Please reselect other components", Severity.Info);
                    }
                }
                if (Cases.Any())
                {
                    foreach (var item in Cases)
                    {
                        var stock = await select.GetStockDataAsync(item.ItemCode);
                        ItemRates[item.ItemCode] = stock?.FirstOrDefault()?.Rate;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Select(ItemClass selectedCase)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor"))
            && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Storage"))
            && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Power Supply")))
            {
                List<string> CompatItem = new List<string>();
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Motherboard"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Processor"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Memory"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Storage"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Graphics Card"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Power Supply"));
                DataTable CompiItem = Data.Select.ConvertListToDataTable(CompatItem);
                var parameters = new DynamicParameters();
                parameters.Add("@ItemCode", selectedCase.ItemCode);
                parameters.Add("@CompatibilityID", CompiItem.AsTableValuedParameter("dbo.CompatibleItems"));
                parameters.Add("@Output", dbType: DbType.String, direction: ParameterDirection.Output, size: 50);
                db.Execute("item_Compatibility", parameters, commandType: CommandType.StoredProcedure);
                string outputValue = parameters.Get<string>("@Output");
                if (outputValue != "Allow")
                {
                    Snackbar.Clear();
                    Snackbar.Add(outputValue, Severity.Error);
                }
                else if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Gaming Case"))
                {
                    string Case = await _protectedLocalStore.GetLocalAsync<string>("Gaming Case");
                    if (Case != selectedCase.ItemCode)
                    {
                        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Cooler"))
                        {
                            string Cooler = await _protectedLocalStore.GetLocalAsync<string>("Cooler");

                            if (!string.IsNullOrEmpty(Cooler))
                            {
                                await _protectedLocalStore.SetLocalAsync("Cooler", "");

                                await _protectedLocalStore.SetLocalAsync("Gaming Case", selectedCase.ItemCode);

                                Snackbar.Clear();
                                Snackbar.Add("Please reselect other components", Severity.Info);
                            }
                            else
                            {
                                Snackbar.Clear();
                                Snackbar.Add("Selection Saved", Severity.Success);
                                await _protectedLocalStore.SetLocalAsync("Gaming Case", selectedCase.ItemCode);
                            }
                        }
                        else
                        {
                            Snackbar.Clear();
                            Snackbar.Add("Selection Saved", Severity.Success);
                            await _protectedLocalStore.SetLocalAsync("Gaming Case", selectedCase.ItemCode);
                        }
                    }
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Selection Saved", Severity.Success);
                    await _protectedLocalStore.SetLocalAsync("Gaming Case", selectedCase.ItemCode);
                }
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("Please reselect other components", Severity.Info);
            }
        }
    }

    private async Task Order(ItemClass selected, int quantity)
    {
        await _protectedLocalStore.SetLocalAsync("BulkCase", selected.ItemCode);
        await _protectedLocalStore.SetLocalAsync("BulkCaseQuantity", quantity.ToString());
        // var isOrdered = await _protectedLocalStore.GetLocalAsync<string>("BulkMotherboard");
        // if (!string.IsNullOrEmpty(isOrdered) && isOrdered != selected.ItemCode)
        // {
        AppState.CartItemCount++;
        // }
        Snackbar.Add("Added to cart", Severity.Success);
    }

    private async void OnButtonClicked(string link)
    {
        try
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
            if (!isMobile)
            {
                await JSRuntime.InvokeVoidAsync("openInNewTab", link);
            }
            else
            {
                bool? result = await DialogService.ShowMessageBox("Product Link", link);
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
