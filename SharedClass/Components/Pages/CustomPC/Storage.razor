@using static SharedClass.Components.Pages.CustomPC.Motherboard

@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (IStorage != null && IStorage.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in IStorage)
                {
                    <div class="col mb-4">
                        <div class="card text-black" style="border-radius:20px;">
                            <div class="card-body">
                                <h5 class="card-title">@values.Brand @values.ItemName</h5>
                                <h6 class="card-title">Rs. @(ItemRates.ContainsKey(values.ItemCode) ? ItemRates[values.ItemCode]?.ToString() ?? "N/A" : "Loading...")</h6>
                                @if (!string.IsNullOrEmpty(values.Description))
                                {
                                    <div>
                                        <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                            <h6><span>Product Page</span></h6>
                                        </div>
                                    </div>
                                }
                                @if (isBulk)
                                {
                                    <h6>Select Quantity: @quantities[values.ItemCode]</h6>
                                    <p><MudSlider @bind-Value="quantities[values.ItemCode]" Min="20" Max="50" Color="Color.Dark" ValueLabel="true" /></p>
                                    <h6>Total: @(ItemRates[values.ItemCode] * quantities[values.ItemCode])</h6>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Order(values, quantities[values.ItemCode])">
                                            Order
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <h6>Select Quantity: @Storagequantity</h6>
                                    <p><MudSlider @bind-Value="Storagequantity" Min="1" Max="4" Color="Color.Dark" ValueLabel="true" /></p>
                                    <h6>Total: @(ItemRates[values.ItemCode] * Storagequantity)</h6>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Select
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

<script>
    function openInNewTab(url) {
        window.open(url, '_blank');
    }
</script>

@code {
    [Parameter]
    public bool isBulk { get; set; }

    bool isMobile = false;

    string? DeviceType { get; set; }

    IEnumerable<ItemClass>? IStorage;

    int Storagequantity { get; set; } = 1;

    Dictionary<string, int> quantities = new Dictionary<string, int>();

    Dictionary<string, decimal?> ItemRates = new Dictionary<string, decimal?>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (isBulk)
                {
                    IStorage = await select.GetItemsAsync("Storage");
                }
                else
                {
                    if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor"))
                    && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")))
                    {
                        string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                        string Processor = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                        string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");

                        IStorage = db.Query<ItemClass>("select distinct it.* from ItemCompability inner join Items it on ItemCode = ItemID where CompatibilityID in ('" + MotherBoard + "','" + Processor + "','" + Memory + "') and ItemType = 'Storage' and Status = 'Enabled' union SELECT it.* FROM Items it LEFT JOIN ItemCompability ic ON it.ItemCode = ic.ItemID WHERE ic.ItemID IS NULL and ItemType = 'Storage' and Status = 'Enabled'").ToList();
                    }
                    else
                    {
                        Snackbar.Clear();
                        Snackbar.Add("Please reselect other components", Severity.Info);
                    }
                }
                if (IStorage.Any())
                {
                    foreach (var item in IStorage)
                    {
                        var stock = await select.GetStockDataAsync(item.ItemCode);
                        ItemRates[item.ItemCode] = stock?.FirstOrDefault()?.Rate;
                        quantities[item.ItemCode] = 20;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Select(ItemClass selectedStorage)
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Motherboard") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Processor") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Memory"))
                {
                    if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor"))
                    && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")))
                    {
                        string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");
                        List<string> CompatItem = new List<string>();
                        CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Motherboard"));
                        CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Processor"));
                        CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Memory"));
                        DataTable CompiItem = Data.Select.ConvertListToDataTable(CompatItem);
                        var parameters = new DynamicParameters();
                        parameters.Add("@ItemCode", selectedStorage.ItemCode);
                        parameters.Add("@CompatibilityID", CompiItem.AsTableValuedParameter("dbo.CompatibleItems"));
                        parameters.Add("@Output", dbType: DbType.String, direction: ParameterDirection.Output, size: 50);
                        db.Execute("item_Compatibility", parameters, commandType: CommandType.StoredProcedure);
                        string outputValue = parameters.Get<string>("@Output");
                        if (outputValue != "Allow")
                        {
                            Snackbar.Clear();
                            Snackbar.Add(outputValue, Severity.Error);
                        }
                        else if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage"))
                        {
                            string Storage = await _protectedLocalStore.GetLocalAsync<string>("Storage");
                            if (Storage != selectedStorage.ItemCode)
                            {
                                if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Graphics Card"))
                                {
                                    string Processor = await _protectedLocalStore.GetLocalAsync<string>("Graphics Card");

                                    if (!string.IsNullOrEmpty(Processor))
                                    {
                                        await _protectedLocalStore.SetLocalAsync("Cooler", "");
                                        await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
                                        await _protectedLocalStore.SetLocalAsync("Power Supply", "");
                                        await _protectedLocalStore.SetLocalAsync("Graphics Card", "");

                                        await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                                        await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);

                                        Snackbar.Clear();
                                        Snackbar.Add("Please reselect other components", Severity.Info);
                                    }
                                    else
                                    {
                                        await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                                        await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                                        Snackbar.Clear();
                                        Snackbar.Add("Selection Saved", Severity.Success);
                                    }
                                }
                                else
                                {
                                    await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                                    await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                                    Snackbar.Clear();
                                    Snackbar.Add("Selection Saved", Severity.Success);
                                }
                            }
                            else
                            {
                                await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                                await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                                Snackbar.Clear();
                                Snackbar.Add("Selection Saved", Severity.Success);
                            }
                        }
                        else
                        {
                            await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                            await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                            Snackbar.Clear();
                            Snackbar.Add("Selection Saved", Severity.Success);
                        }
                    }
                    else
                    {
                        Snackbar.Clear();
                        Snackbar.Add("Please reselect other components", Severity.Info);
                    }
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Please Select Previous Component", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Order(ItemClass selected, int quantity)
    {
        try
        {
            bool cartExists = await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Cart");
            List<Bulk> orderedItems = new List<Bulk>();

            if (cartExists)
            {
                var result = await _protectedLocalStore.GetLocalAsync<string>("Cart");

                if (!string.IsNullOrEmpty(result) && select.IsValidJson(result))
                {
                    orderedItems = JsonSerializer.Deserialize<List<Bulk>>(result);
                }
            }

            bool itemFound = false;

            for (int i = 0; i < orderedItems.Count; i++)
            {
                if (orderedItems[i].Code == selected.ItemCode)
                {
                    orderedItems[i].Quantity = quantity;
                    Snackbar.Add("Quantity Updated.", Severity.Success);
                    itemFound = true;
                    break;
                }
            }

            if (!itemFound)
            {
                orderedItems.Add(new Bulk { Code = selected.ItemCode, Quantity = quantity });
                AppState.CartItemCount++;
                Snackbar.Add("Added to cart.", Severity.Success);
            }

            var serializedItems = JsonSerializer.Serialize(orderedItems);
            await _protectedLocalStore.SetLocalAsync("Cart", serializedItems);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error ordering item: {ex.Message}", Severity.Error);
        }
    }

    private async void OnButtonClicked(string link)
    {
        try
        {
            DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
            if (DeviceType == "Mobile") isMobile = true;
            if (!isMobile)
            {
                await JSRuntime.InvokeVoidAsync("openInNewTab", link);
            }
            else
            {
                HapticFeedback.Default.Perform(HapticFeedbackType.LongPress);
                bool supportsUri = await Launcher.Default.CanOpenAsync(new Uri(link));

                if (supportsUri)
                {
                    await Launcher.Default.OpenAsync(new Uri(link));
                }
                else
                {
                    Snackbar.Add("Can't Open Link", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
