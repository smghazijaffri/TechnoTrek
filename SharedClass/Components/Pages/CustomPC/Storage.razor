@using Microsoft.Data.SqlClient
@using System.Data;
@using Dapper
@inject Select select;
@inject Insert insert;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject ProtectedLocalStorage _protectedLocalStore;

<section>
    <div class="container py-5">
        @if (IStorage != null && IStorage.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4">
                @foreach (var values in IStorage)
                {
                    @if (isBulk)
                    {
                        <div class="col mb-4">
                            <div class="card text-black" style="border-radius:20px;">
                                <div class="card-body">
                                    <h5 class="card-title">@values.Brand @values.ItemName</h5>
                                    <h6 class="card-title">Price</h6>
                                    <div>
                                        <div class="d-flex justify-content-center" @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                            <h6><span>Visit Product Page</span></h6>
                                        </div>
                                    </div>
                                    <h6>Select Quantity</h6>
                                    <p><MudSlider @bind-Value="quantity" Min="20" Max="50" Color="Color.Dark" ValueLabel="true" /></p>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Order
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col mb-4">
                            <div class="card text-black" style="border-radius:20px;">
                                <div class="card-body">
                                    <h5 class="card-title">@values.Brand</h5>
                                    <h5 class="card-title">@values.ItemName</h5>
                                     <h6>Select Quantity</h6>
 <p><MudSlider @bind-Value="Storagequantity" Min="1" Max="4" Color="Color.Dark" ValueLabel="true" /></p>

                                    <div>
                                        <div class="d-flex justify-content-center"
                                             @onclick="() => OnButtonClicked(values.Description)" style="cursor: pointer;">
                                            <h6><span>Visit Product Page</span></h6>
                                        </div>
                                    </div>
                                    <div>
                                        <button class="btn btnpc m-1" style="background-color:#A687CB; color:white"
                                                @onclick="() => Select(values)">
                                            Select
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <h1>Sorry, no product available</h1>
        }
    </div>
</section>

<script>
    function openInNewTab(url) {
        window.open(url, '_blank');
    }
</script>

@code {
    [Parameter]
    public bool isBulk { get; set; }

    public double quantity { get; set; } = 20;
    public int Storagequantity { get; set; } = 1;

    private IEnumerable<ItemClass> IStorage;
    public double quantity { get; set; } = 1;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (SqlConnection db = new SqlConnection(con.connectionString))
            {
                if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")) 
                && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")))
                {
                    string MotherBoard = await _protectedLocalStore.GetLocalAsync<string>("Motherboard");
                    string Processor = await _protectedLocalStore.GetLocalAsync<string>("Processor");
                    string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");

                    IStorage = db.Query<ItemClass>("select distinct it.* from ItemCompability inner join Items it on ItemCode = ItemID where CompatibilityID in ('" + MotherBoard + "','" + Processor + "','" + Memory + "') and ItemType = 'Storage' and Status = 'Enabled' union SELECT it.* FROM Items it LEFT JOIN ItemCompability ic ON it.ItemCode = ic.ItemID WHERE ic.ItemID IS NULL and ItemType = 'Storage' and Status = 'Enabled'").ToList();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Please reselect other components", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {

            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }
        //IStorage = await select.GetItemsAsync("Storage");
    }

    private async Task Select(ItemClass selectedStorage)
    {
        using (SqlConnection db = new SqlConnection(con.connectionString))
        {
            if (!string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Motherboard")) && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Processor")) 
            && !string.IsNullOrEmpty(await _protectedLocalStore.GetLocalAsync<string>("Memory")))
            {
                string Memory = await _protectedLocalStore.GetLocalAsync<string>("Memory");
                List<string> CompatItem = new List<string>();
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Motherboard"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Processor"));
                CompatItem.Add(await _protectedLocalStore.GetLocalAsync<string>("Memory"));
                DataTable CompiItem = select.ConvertListToDataTable(CompatItem);
                var parameters = new DynamicParameters();
                parameters.Add("@ItemCode", selectedStorage.ItemCode);
                parameters.Add("@CompatibilityID", CompiItem.AsTableValuedParameter("dbo.CompatibleItems"));
                parameters.Add("@Output", dbType: DbType.String, direction: ParameterDirection.Output, size: 50);
                db.Execute("item_Compatibility", parameters, commandType: CommandType.StoredProcedure);
                string outputValue = parameters.Get<string>("@Output");
                if (outputValue != "Allow")
                {
                    Snackbar.Clear();
                    Snackbar.Add(outputValue, Severity.Error);
                }
                else if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Storage"))
                {
                    string Storage = await _protectedLocalStore.GetLocalAsync<string>("Storage");
                    if (Storage != selectedStorage.ItemCode)
                    {
                        if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Graphics Card"))
                        {
                            string Processor = await _protectedLocalStore.GetLocalAsync<string>("Graphics Card");

                            if (!string.IsNullOrEmpty(Processor))
                            {
                                await _protectedLocalStore.SetLocalAsync("Cooler", "");
                                await _protectedLocalStore.SetLocalAsync("Gaming Case", "");
                                await _protectedLocalStore.SetLocalAsync("Power Supply", "");
                                await _protectedLocalStore.SetLocalAsync("Graphics Card", "");

                                await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);

                                Snackbar.Clear();
                                Snackbar.Add("Please reselect other components", Severity.Info);
                            }
                            else
                            {
                                await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                                await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                                Snackbar.Clear();
                                Snackbar.Add("Selection Saved", Severity.Success);
                            }
                        }
                        else
                        {
                            await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                            await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                            Snackbar.Clear();
                            Snackbar.Add("Selection Saved", Severity.Success);
                        }
                    }
                    else
                    {
                        await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                        await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                        Snackbar.Clear();
                        Snackbar.Add("Selection Saved", Severity.Success);
                    }
                }
                else
                {
                    await _protectedLocalStore.SetLocalAsync("Storage", selectedStorage.ItemCode);
                    await _protectedLocalStore.SetLocalAsync("StorageQuantity", Storagequantity);
                    Snackbar.Clear();
                    Snackbar.Add("Selection Saved", Severity.Success);
                }


                
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("Please reselect other components", Severity.Info);
            }
        }
    }

    private async void OnButtonClicked(string message)
    {
        await JSRuntime.InvokeVoidAsync("openInNewTab", link);
    }
}
