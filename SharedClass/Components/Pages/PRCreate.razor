@page "/purchaserequisition/create"
@using System.Reflection;
@inject SharedClass.Components.Data.Insert insert;
@inject IJSRuntime JSRuntime;

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            Create Purchase Requisition
            <span class="@(IsApproved ? "indicator-pill whitespace-nowrap green" : (IsDraft ? "indicator-pill whitespace-nowrap red" : "indicator-pill whitespace-nowrap orange"))">
                <span>@(IsApproved ? "Submitted" : (IsDraft ? "Draft" : "Not Saved"))</span>
            </span>
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
        @if (!IsApproved)
        {
            <button type="submit" class="btn btn-primary rounded-3 text-sm-center" @onclick="ToggleApproval">
                @GetSubmitButtonText()
            </button>
        }
    </div>
</div>


<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    @* <!-- Purchase Requisition Form -->
    <form class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Purchase Requisition Number</label>
            <input type="text" class="form-control" @bind="PurchaseRequisitionNumber"> 
        </div>
        <div class="col-md-6">
            <label class="form-label">Creation Date</label>
            <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="CreationDate">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <input type="text" class="form-control" @bind="Vendor">
        </div>
    </form> *@
    <!-- Purchase Requisition Form -->
    <form class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Purchase Requisition Number</label>
            <input type="text" class="form-control" @bind="PurchaseRequisitionNumber" readonly="@IsApproved">
        </div>
        <div class="col-md-6">
            <label class="form-label">Creation Date</label>
            <input type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" @bind="CreationDate" readonly="@IsApproved">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <input type="text" class="form-control" @bind="Vendor" readonly="@IsApproved">
        </div>
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3">
        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        No.
                    </th>
                    <th class="col col-auto">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="width: 150px;">
                        UOM
                    </th>
                    <th class="col col-auto" style="width: 150px;">
                        Required By
                    </th>
                </tr>
            </thead>
            <tbody id="table-body">
                <!-- Rows will be added here dynamically -->
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" readonly="@IsApproved"/>
                                @(index + 1)
                                <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")" readonly="@IsApproved">Delete</button>
                            </div>
                        </td>
                        <td><input type="text" class="form-control" @bind="item.Name" readonly="@IsApproved" /></td>
                        <td><input type="text" class="form-control" @bind="item.Quantity" readonly="@IsApproved" /></td>
                        <td>
                            <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" readonly="@IsApproved" />
                            <datalist id="uomOptions">
                                <option value="Piece"></option>
                                <option value="Each"></option>
                                <option value="Box"></option>
                                <!-- Add more UOM options as needed -->
                            </datalist>
                        </td>
                        <td>
                            <input type="date" class="form-control" @bind="item.RequiredBy" min="@DateTime.Now.ToString("dd-MM-yyyy")" readonly="@IsApproved" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12">
        <button class="btn btn-primary rounded-pill" @onclick="AddRow" disabled="@IsApproved">Add Row</button>
    </div>
</div>

<script defer>
    // JavaScript method to store values in an array and log to console
    function storeAndCallCSharpMethod() {
        var dataArray = [];

        // Loop through each dynamically added row
        var tableBody = document.getElementById('table-body');
        var rows = tableBody.getElementsByTagName('tr');

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var inputs = row.getElementsByTagName('input');

            // Get values from input fields
            var name = inputs[1].value;
            var quantity = inputs[2].value;
            var uom = inputs[3].value;
            var requiredBy = inputs[4].value;

            // Store values in an object
            var rowData = {
                Name: name,
                Quantity: quantity,
                UOM: uom,
                RequiredBy: requiredBy
            };

            // Add the object to the array
            dataArray.push(rowData);
        }
        // Log the array to the console
        console.log(dataArray);

        return dataArray;
    }
</script>

@code {
    private int PurchaseRequisitionNumber { get; set; }
    private DateTime CreationDate { get; set; } = DateTime.Now;
    private string Vendor { get; set; }
    private bool IsApproved { get; set; } = false;
    private bool IsDraft { get; set; } = false;
    private bool IsSaving { get; set; } = false;
    private List<Item> Items { get; set; } = new List<Item>();
    List<Item> dataArray = new List<Item>();

    async Task StoreAndCallCSharpMethod()
    {
        var dataArray = await JSRuntime.InvokeAsync<List<Item>>("storeAndCallCSharpMethod");

        if (PurchaseRequisitionNumber != 0 && !string.IsNullOrEmpty(Vendor))
        {
            foreach (var data in dataArray)
            {
                if (!string.IsNullOrEmpty(data.Name) && !string.IsNullOrEmpty(data.Quantity) && !string.IsNullOrEmpty(data.UOM))
                {
                    await insert.PRInsert(PurchaseRequisitionNumber, Vendor, data.Name, data.Quantity, data.UOM, CreationDate, data.RequiredBy, JSRuntime);
                }
            }
        }
    }

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            return "Submitted";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private async void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
            await StoreAndCallCSharpMethod();
        }
        else if (!IsSaving)
        {
            IsDraft = true;
        }
    }

    // You can update the IsDraft and IsSaving flags accordingly.
    private void Save()
    {
        IsDraft = true;
        IsSaving = true;

        IsSaving = false;
    }

    private void AddRow()
    {
        Items.Add(new Item
            {
                RequiredBy = DateTime.Now, // Set the default date to the current date
            });
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                Items.RemoveAt(i);
            }
        }
    }

    // private void ToggleAllRowsSelection()
    // {
    //     bool selectAll = Items.All(item => item.Selected);
    //     foreach (var item in Items)
    //     {
    //         item.Selected = !selectAll;
    //     }
    // }

    private class Item
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string UOM { get; set; }
        public DateTime RequiredBy { get; set; }
        public bool Selected { get; set; }
    }
}