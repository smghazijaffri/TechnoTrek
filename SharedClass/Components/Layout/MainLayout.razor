@using SharedClass.Components.Layout

@inject Login login;
@inject Select select;
@inject Connection con;
@inject AppState AppState;
@inject IJSRuntime JSRuntime;
@inherits LayoutComponentBase;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>

<NavMenu />

<main class="p-1">
    <MudThemeProvider />
    <MudDialogProvider FullWidth="true"
                       MaxWidth="MaxWidth.ExtraSmall"
                       CloseButton="true"
                       DisableBackdropClick="false"
                       NoHeader="false"
                       Position="DialogPosition.Center"
                       CloseOnEscapeKey="true" />
    <MudSnackbarProvider />
    @Body
</main>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        using SqlConnection db = new SqlConnection(con.connectionString);

        if (firstRender)
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Role") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Username"))
            {
                string Username = await _protectedLocalStore.GetLocalAsync<string>("Username");
                string Role = await _protectedLocalStore.GetLocalAsync<string>("Role");
                if (!string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Role))
                {
                    string? userid = db.QueryFirstOrDefault<string>("Select UserID from Users where UserName = @Username", new { Username = Username });
                    if (Role == "Customer")
                    {
                        var result = await Select.RetrieveCartItems(userid);
                        AppState.CartItemCount = result.Distinct().Count();
                    }
                }
            }
        }
        StateHasChanged();
    }
}