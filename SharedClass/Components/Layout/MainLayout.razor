@using SharedClass.Components.Layout

@inject Login login;
@inject IJSRuntime JSRuntime;
@inherits LayoutComponentBase;
@inject ProtectedLocalStorage _protectedLocalStore;

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>

<NavMenu />

<main class="p-1">
    <MudThemeProvider />
    <MudDialogProvider FullWidth="true"
                       MaxWidth="MaxWidth.ExtraSmall"
                       CloseButton="true"
                       DisableBackdropClick="false"
                       NoHeader="false"
                       Position="DialogPosition.Center"
                       CloseOnEscapeKey="true" />
    <MudSnackbarProvider />
    @Body
</main>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Authorized") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Username"))
            {
                await _protectedLocalStore.SetLocalAsync("Authorized", false);
                string User = await _protectedLocalStore.GetLocalAsync<string>("Username");
                await login.LogOut(User);
                await _protectedLocalStore.SetLocalAsync("Username", "");
            }

            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "customerID") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "customerName")
            && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "customerContact"))
            {
                await _protectedLocalStore.SetLocalAsync("customerID", "");
                await _protectedLocalStore.SetLocalAsync("customerName", "");
                await _protectedLocalStore.SetLocalAsync("customerContact", "");
            }

            await _protectedLocalStore.SetLocalAsync("Cart", "");
        }
        StateHasChanged();
    }
}