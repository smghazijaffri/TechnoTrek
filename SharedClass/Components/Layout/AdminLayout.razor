@inject Login login;
@inject Connection con;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage _protectedLocalStore;

@inherits LayoutComponentBase;

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>

@if (isLoading)
{
    <MudLayout>
        <div style="display:flex;">
            <MudAppBar Elevation="0" Class="bg-transparent" Style="display:flex; color:black; backdrop-filter: blur(8px);">
                <MudIconButton Icon="@(open ? Icons.Material.TwoTone.Close : Icons.Material.TwoTone.Menu)"
                               Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudImage Src="_content/SharedClass/Images/techlogo.png" Style="width: 200px" />
            </MudAppBar>
            <MudDrawer @bind-Open="@open" Breakpoint="@Breakpoint.Lg" Elevation="1" Variant="@DrawerVariant.Responsive"
                       PreserveOpenState="false"
                       Style="border-top-right-radius: 15px; border-bottom-right-radius:15px; backdrop-filter: blur(8px);">
                <MudNavMenu Class="mb-5">
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("dashboard")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.SpaceDashboard" OnClick='() => Navigate("dashboard")'
                                   Style="background-color:transparent;" Color="Color.Info">Dashboard</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("home")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Home" OnClick='() => Navigate("home")'
                                   Style="background-color:transparent;" Color="Color.Info">Home</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("buying")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Inventory2" OnClick='() => Navigate("buying")'
                                   Style="background-color:transparent;" Color="Color.Info">Inventory</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("selling")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Sell" OnClick='() => Navigate("selling")'
                                   Style="background-color:transparent;" Color="Color.Info">Selling</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("production")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Create" OnClick='() => Navigate("production")'
                                   Style="background-color:transparent;" Color="Color.Info">Production</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("returns")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.KeyboardReturn" OnClick='() => Navigate("returns")'
                                   Style="background-color:transparent;" Color="Color.Info">Returns</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("pos")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.PointOfSale" OnClick='() => Navigate("pos")'
                                   Style="background-color:transparent;" Color="Color.Info">Point of Sale</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("reports")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.InsertDriveFile" OnClick='() => Navigate("reports")'
                                   Style="background-color:transparent;" Color="Color.Info">Reports</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick='() => Navigate("users")'>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.VerifiedUser" OnClick='() => Navigate("users")'
                                   Style="background-color:transparent;" Color="Color.Info">Employees</MudButton>
                    </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick="Logout">
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Logout" OnClick="Logout"
                                   Style="background-color:transparent;" Color="Color.Error">Sign Out</MudButton>
                    </MudNavLink>
                </MudNavMenu>
            </MudDrawer>
        </div>
        <MudMainContent Class="p-4" Style="margin-top:50px; max-width: 100vw; overflow-x: hidden;">
            <MudThemeProvider />
            <MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.ExtraSmall" CloseButton="true"
                               DisableBackdropClick="false" NoHeader="false" Position="DialogPosition.Center" CloseOnEscapeKey="true" />
            <MudSnackbarProvider />
            @Body
        </MudMainContent>
    </MudLayout>
}

@code {
    bool open = false;
    bool isLoading = false;
    bool Authorized { get; set; }
    bool isAuthorized { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Authorization();
        }
        StateHasChanged();
    }

    private async Task Authorization()
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Authorized") && await JSRuntime.InvokeAsync<bool>("localStorage.hasOwnProperty", "Username"))
            {
                using (SqlConnection db = new SqlConnection(con.connectionString))
                {
                    string User = await _protectedLocalStore.GetLocalAsync<string>("Username");
                    string Role = await _protectedLocalStore.GetLocalAsync<string>("Role");

                    Authorized = db.QuerySingleOrDefault<bool>("SELECT Authorized FROM Users WHERE Username = @Username", new { Username = User });
                    isAuthorized = await _protectedLocalStore.GetLocalAsync<bool>("Authorized");
                    if (isAuthorized && Authorized && (!string.IsNullOrWhiteSpace(Role)) && Role != "Customer")
                    {
                        isLoading = true;
                    }
                    else if (isAuthorized && Authorized && (!string.IsNullOrWhiteSpace(Role)) && Role == "Customer")
                    {
                        isLoading = false;
                        NavigationManager.NavigateTo($"/user/{User}", forceLoad: true);
                    }
                    else
                    {
                        isLoading = false;
                        NavigationManager.NavigateTo("/login", forceLoad: true);
                        Snackbar.Clear();
                        Snackbar.Add("Not Authorized", Severity.Error);
                    }
                }
            }
            else
            {
                isLoading = false;
                NavigationManager.NavigateTo("/login", forceLoad: true);
                Snackbar.Clear();
                Snackbar.Add("Not Authorized", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void ToggleDrawer()
    {
        open = !open;
    }

    private async void Logout()
    {
        string User = await _protectedLocalStore.GetLocalAsync<string>("Username");
        await login.LogOut(User);
        await _protectedLocalStore.SetLocalAsync("Authorized", false);
        await _protectedLocalStore.SetLocalAsync("Username", "");
        await _protectedLocalStore.SetLocalAsync("Role", "");
        Snackbar.Clear();
        Snackbar.Add("Logged Out", Severity.Error);
        NavigationManager.NavigateTo("/");
    }

    private async void Navigate(string Page)
    {
        await Authorization();
        if (!string.IsNullOrWhiteSpace(Page))
        {
            NavigationManager.NavigateTo($"/{Page}");
        }
    }
}